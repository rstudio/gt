[{"path":[]},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://gt.rstudio.com/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://gt.rstudio.com/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Information and Guidelines for Contributing to gt","title":"Information and Guidelines for Contributing to gt","text":"many ways contribute ongoing development gt package. contributions can rather easy (e.g., fixing typos, improving documentation, filing issues feature requests problems, etc.) whereas contributions can require time patience (like answering questions submitting pull requests code changes). Just know help provided capacity much appreciated. :)","code":""},{"path":"https://gt.rstudio.com/CONTRIBUTING.html","id":"filing-issues","dir":"","previous_headings":"","what":"Filing Issues","title":"Information and Guidelines for Contributing to gt","text":"believe found bug, create minimal reprex posting gt issue tracker. Try include anything unnecessary, just minimal amount code constitutes reproducible bug. try verify bug running code reprex provided. quality reprex reduce amount back--forth communication trying understand execute code systems.","code":""},{"path":"https://gt.rstudio.com/CONTRIBUTING.html","id":"answering-questions","dir":"","previous_headings":"","what":"Answering questions","title":"Information and Guidelines for Contributing to gt","text":"great way help simply answering questions. ’s amazing little conversation lead better insights problem. Don’t quite know answer? ’s okay . ’re together. might answer user questions? forums Q&gt include Posit community, Twitter (good search term gt #rstats), Stack Overflow. Good etiquette key interactions: good person ask questions.","code":""},{"path":"https://gt.rstudio.com/CONTRIBUTING.html","id":"making-pull-requests","dir":"","previous_headings":"Answering questions","what":"Making Pull Requests","title":"Information and Guidelines for Contributing to gt","text":"consider making pull request (PR), please file issue first explain problem detail. PR enhancement, detail change make things better package users. Bugfix PRs also require explanation bug proposed fix remove bug. great way illustrate bug include reprex. upfront work prior preparing PR can time-consuming opens line communication package authors community, perhaps leading better enhancement effective fixes! consensus PR based issue helpful, adhering following process make things proceed quickly: Create separate Git branch PR. Look build status badges making changes; badges available package README. gt package follows tidyverse style guide please adopt style guidelines submitted code best possible. internal documentation uses roxygen2; contribution requires new revised documentation ensure roxygen comments added/modified (modify .Rd files man folder). Many functions share parameters. common parameters like rows, columns, data, use @inheritParams document . document parameters special case function documenting. case, go R/format-data.R, copy parameter documentation desired function add additional details. use testthat code coverage; contributions test cases included helpful easier accept. Ensure signed contributor license agreement. appear “Check” PR comment “CLAassistant” also appear explaining whether yet sign. sign, can click “Recheck” link comment check flip reflect ’ve signed.","code":""},{"path":"https://gt.rstudio.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018-2024 Posit Software, PBC Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gt.rstudio.com/PULL_REQUEST_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"Thank contributing gt! make process easier everyone, please explain context purpose contribution. Also, list changes made existing code documentation.","code":""},{"path":"https://gt.rstudio.com/PULL_REQUEST_TEMPLATE.html","id":"related-github-issues-and-prs","dir":"","previous_headings":"","what":"Related GitHub Issues and PRs","title":"Summary","text":"Ref: #","code":""},{"path":"https://gt.rstudio.com/PULL_REQUEST_TEMPLATE.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist","title":"Summary","text":"understand agree Code Conduct. listed major changes NEWS. added testthat unit tests tests/testthat new functionality.","code":""},{"path":[]},{"path":"https://gt.rstudio.com/SECURITY.html","id":"supported-versions","dir":"","previous_headings":"","what":"Supported Versions","title":"Security Policy","text":"following provides information versions gt currently supported security updates.","code":""},{"path":"https://gt.rstudio.com/SECURITY.html","id":"reporting-a-vulnerability","dir":"","previous_headings":"","what":"Reporting a Vulnerability","title":"Security Policy","text":"Please report security vulnerabilities rich@posit.co.","code":""},{"path":"https://gt.rstudio.com/articles/case-study-clinical-tables.html","id":"demographic-summary-tables","dir":"Articles","previous_headings":"","what":"Demographic Summary Tables","title":"Case Study: Clinical Tables","text":"Let’s start example basic demographic summary table. first step, use dplyr tidyr create tibble shape desired table use gt functions create output table: can now start expose tibble summary adsl variables gt using gt(). Values grouped category, labels rownames. addition, can give table nice title subtitle. first step, let’s try format columns, formatting counts, min, max medians fmt_integer(), percentages fmt_percent(), mean sd values fmt_number() using 1 2 decimals, respectively. intentionally keeping NA values now, needed cols_merge() pattern next step. looks way better table still rather wide style. collapse columns appropriately, use cols_merge(), combining mean SD, min max, well n percentages, respectively. use pattern argument specify custom merging pattern. Now looks like demographic table. let’s take step back understand merging pattern. { } used arrange single column values row-wise fashion. number curly braces corresponds order specified columns = argument. use << >> surround spans text omitted values within contain missing values. first column call cols_merge() contains values n’s, means medians printed values missing (meaning cells numeric categorical n’s, means medians min max). SD percentages categorical grouping variables appended cells mean categorical n’s, rows contain non-missing values. previous aspects ignored min max row, n’s, percentages, SD’s medians missing. , min max arranged. can now start look style features. Let us indent values stub using tab_stub_indent() left-align title opt_align_table_header(). Let’s now change column width Placebo Drug 1 columns align values center, making use cols_width() cols_align(). final step can now take care column names assign something meaningful. column header name study intervention together respective subject count. make use cols_label()’s ability handle lists, summarize new column labels named list.","code":"custom_summary <- function(df, group_var, sum_var) {      group_var <- rlang::ensym(group_var)   sum_var <- rlang::ensym(sum_var)      is_categorical <-      is.character(eval(expr(`$`(df, !!sum_var)))) |     is.factor(eval(expr(`$`(df, !!sum_var))))       if (is_categorical) {      category_lbl <-        sprintf(\"%s, n (%%)\", attr(eval(expr(`$`(df, !!sum_var))), \"label\"))      df_out <-       df |>       dplyr::group_by(!!group_var)  |>        dplyr::mutate(N = dplyr::n()) |>        dplyr::ungroup() |>        dplyr::group_by(!!group_var, !!sum_var) |>        dplyr::summarize(         val = dplyr::n(),         pct = dplyr::n()/mean(N),         .groups = \"drop\"       ) |>        tidyr::pivot_wider(         id_cols = !!sum_var, names_from = !!group_var,         values_from = c(val, pct)       ) |>        dplyr::rename(label = !!sum_var) |>        dplyr::mutate(         across(where(is.numeric), ~ifelse(is.na(.), 0, .)),         category = category_lbl       )    } else {      category_lbl <-       sprintf(         \"%s (%s)\",         attr(eval(expr(`$`(df, !!sum_var))), \"label\"),         attr(eval(expr(`$`(df, !!sum_var))), \"units\")       )      df_out <-        df |>        dplyr::group_by(!!group_var) |>        dplyr::summarize(         n = sum(!is.na(!!sum_var)),         mean = mean(!!sum_var, na.rm = TRUE),         sd = sd(!!sum_var, na.rm = TRUE),         median = median(!!sum_var, na.rm = TRUE),         min = min(!!sum_var, na.rm = TRUE),         max = max(!!sum_var, na.rm = TRUE),         min_max = NA,         .groups = \"drop\"       ) |>        tidyr::pivot_longer(         cols = c(n, mean, median, min_max),         names_to = \"label\",         values_to = \"val\"       ) |>        dplyr::mutate(         sd = ifelse(label == \"mean\", sd, NA),         max = ifelse(label == \"min_max\", max, NA),         min = ifelse(label == \"min_max\", min, NA),         label = dplyr::recode(           label,           \"mean\" = \"Mean (SD)\",           \"min_max\" = \"Min - Max\",           \"median\" = \"Median\"         )       ) |>        tidyr::pivot_wider(         id_cols = label,         names_from = !!group_var,         values_from = c(val, sd, min, max)       ) |>        dplyr::mutate(category = category_lbl)   }    return(df_out) }  adsl_summary <-    dplyr::filter(rx_adsl, ITTFL == \"Y\") |>    (\\(data) purrr::map_df(     .x = dplyr::vars(AGE, AAGEGR1, SEX, ETHNIC, BLBMI),     .f = \\(x) custom_summary(df = data, group_var = TRTA, sum_var = !!x)   ))() rx_adsl_tbl <-    adsl_summary |>    gt(     rowname_col = \"label\",     groupname_col = \"category\"   ) |>    tab_header(     title = \"x.x: Demographic Characteristics\",     subtitle = \"x.x.x: Demographic Characteristics - ITT Analysis Set\"   )  rx_adsl_tbl rx_adsl_tbl <-    rx_adsl_tbl |>    fmt_integer(     columns = starts_with(c(\"val_\", \"min_\", \"max_\")),     rows = label %in% c(\"n\", \"Median\", \"Min - Max\")   ) |>    fmt_percent(     columns = starts_with(\"pct_\"),     decimals = 1   ) |>    fmt_number(     columns = starts_with(\"val_\"),     rows = label == \"Mean (SD)\",     decimals = 1   ) |>    fmt_number(     columns = starts_with(\"sd_\"),     rows = label == \"Mean (SD)\",     decimals = 2   )   rx_adsl_tbl rx_adsl_tbl <-    rx_adsl_tbl |>    cols_merge(     columns = c(\"val_Placebo\", \"pct_Placebo\", \"sd_Placebo\", \"min_Placebo\", \"max_Placebo\"),     pattern = \"<<{1}>><< ({2})>><< ({3})>><<{4} - {5}>>\"   ) |>    cols_merge(     columns = c(\"val_Drug 1\", \"pct_Drug 1\", \"sd_Drug 1\", \"min_Drug 1\", \"max_Drug 1\"),     pattern = \"<<{1}>><< ({2})>><< ({3})>><<{4} - {5}>>\"   )  rx_adsl_tbl rx_adsl_tbl <-   rx_adsl_tbl |>    tab_stub_indent(     rows = everything(),     indent = 5   ) |>    opt_align_table_header(align = \"left\")   rx_adsl_tbl rx_adsl_tbl <-   rx_adsl_tbl |>    cols_width(     starts_with(\"val_\") ~ px(200),     1 ~ px(250)   ) |>    cols_align(     align = \"center\",     columns = starts_with(\"val_\")   )  rx_adsl_tbl ### Count subjects per arm and summarize values in a list arm_n <-   rx_adsl |>    dplyr::filter(ITTFL == \"Y\") |>    dplyr::group_by(TRTA) |>    dplyr::summarize(     lbl = sprintf(\"%s N=%i (100%%)\", unique(TRTA), dplyr::n()),     .groups = \"drop\"   ) |>    dplyr::arrange(TRTA)  collbl_list <- as.list(arm_n$lbl) names(collbl_list) <- paste0(\"val_\", arm_n$TRTA)  rx_adsl_tbl <-    rx_adsl_tbl |>    cols_label(.list = collbl_list)  rx_adsl_tbl"},{"path":"https://gt.rstudio.com/articles/case-study-clinical-tables.html","id":"response-event-rate-analysis-tables","dir":"Articles","previous_headings":"","what":"Response / Event Rate Analysis Tables","title":"Case Study: Clinical Tables","text":"another table, can summarize number subjects event per intervention subgroup defined age groups. Within intervention group counting number percentage participants event (EVNTFL == \"Y\") well total number participants. number participants event divided number without event odds experiencing event per study intervention. odds ratio computed odds Drug 1 divided odds Placebo. code performs calculation outlined within subgroup defined AAGEGR1, confidence intervals around event rates computed using Clopper Pearson method. Let’s first create basic gt table left-aligned table title subtitle. using tab_header() opt_align_table_header() . Next, formatting columns counts integers fmt_integer(), percentages CI’s around percentages numbers one decimal odds ratio CI around odds ratio numbers two decimals, cases using fmt_number(). can now merge columns participants events, total number participants percentage participants events, well 95% CI’s around event rate using cols_merge(). indicate intervention group adding tab spanners tab_spanner(). table looking way better now. Let’s now group two categories highlight fact actually age subgroups. using tab_row_group() manually add row group label Age. Next, ’ll take care column labels. now tab_row_group() label place, longer need label first column can assign empty string. Also, two tab spanners, can assign equal column labels event rates 95% CI’s intervention groups. Using cols_width() cols_align() can apply convenient column width left-align first column. Finally, make use tab_footnote() can add footnote columns 95% CI’s around event rates, indicating derived Clopper-Pearson method. change default symbol choice tab_footnote() numbers letters, add tab_options(footnote.marks = letters).","code":"rx_responders <-    rx_adsl |>    dplyr::filter(ITTFL == \"Y\") |>    dplyr::group_by(TRTA, AAGEGR1) |>    dplyr::summarize(     n_resp = sum(EVNTFL == \"Y\"),     n_total = dplyr::n(),     pct = 100 * sum(EVNTFL == \"Y\") / dplyr::n(),     ci_up = 100 * (       1 + (dplyr::n() - sum(EVNTFL == \"Y\")) / (         (sum(EVNTFL == \"Y\") + 1) * qf(           0.975,           2 * (sum(EVNTFL == \"Y\") + 1),           2 * (dplyr::n() - sum(EVNTFL == \"Y\"))           )         )       )^(-1),     ci_low = ifelse(       sum(EVNTFL == \"Y\") == 0,       0,       100 * (         1 + (dplyr::n() - sum(EVNTFL == \"Y\") + 1) /           (sum(EVNTFL == \"Y\") * qf(             0.025,             2 * sum(EVNTFL == \"Y\"),             2 * (dplyr::n() - sum(EVNTFL == \"Y\") + 1)             )           )         )^(-1)       ),     odds = sum(EVNTFL == \"Y\") / (dplyr::n() - sum(EVNTFL == \"Y\")),     .groups = \"drop\"   ) |>    tidyr::pivot_wider(     id_cols = AAGEGR1,     names_from = TRTA,     values_from = c(n_resp, n_total, pct, ci_up, ci_low, odds)   ) |>    dplyr::mutate(     or = ifelse(       odds_Placebo == 0,       NA_real_,       !! sym(\"odds_Drug 1\") / odds_Placebo     ),     or_ci_low = exp(       log(or) - qnorm(0.975) * sqrt(         1 / n_resp_Placebo +           1 / !!sym(\"n_resp_Drug 1\") +            1 / (n_total_Placebo - n_resp_Placebo) +            1 / (!!sym(\"n_total_Drug 1\") - !!sym(\"n_resp_Drug 1\"))       )     ),     or_ci_up = exp(       log(or) + qnorm(0.975) * sqrt(         1 / n_resp_Placebo +            1 / !!sym(\"n_resp_Drug 1\") +           1 / (n_total_Placebo - n_resp_Placebo) +           1 / (!!sym(\"n_total_Drug 1\") - !!sym(\"n_resp_Drug 1\"))       )     )   ) |>    dplyr::select(-tidyselect::starts_with(\"odds_\")) rx_resp_tbl <- rx_responders |>    gt() |>    tab_header(     title = \"x.x: Efficacy Data\",     subtitle = \"x.x.x: Occurence of Event per Subgroup - {gt} Analysis Set\"   ) |>    opt_align_table_header(align = \"left\")  rx_resp_tbl rx_resp_tbl <-    rx_resp_tbl |>    fmt_integer(columns = starts_with(\"n_\")) |>    fmt_number(columns = starts_with(c(\"pct_\", \"ci_\")), decimals = 1) |>    fmt_number(columns = starts_with(\"or\"), decimals = 2)   rx_resp_tbl rx_resp_tbl <-   rx_resp_tbl |>    cols_merge(     columns = c(\"n_resp_Placebo\", \"n_total_Placebo\", \"pct_Placebo\"),     pattern = \"{1}/{2} ({3})\"   ) |>    cols_merge(     columns = c(\"n_resp_Drug 1\", \"n_total_Drug 1\", \"pct_Drug 1\"),     pattern = \"{1}/{2} ({3})\"   ) |>    cols_merge(     columns = c(\"ci_low_Placebo\", \"ci_up_Placebo\"),     pattern = \"[{1}, {2}]\"   ) |>    cols_merge(     columns = c(\"ci_low_Drug 1\", \"ci_up_Drug 1\"),     pattern = \"[{1}, {2}]\"   ) |>    cols_merge(     columns = c(\"or_ci_low\", \"or_ci_up\"),     pattern = \"[{1}, {2}]\"   ) |>    tab_spanner(     label = \"Drug 1\",     columns = c(\"n_resp_Drug 1\", \"ci_low_Drug 1\")   ) |>    tab_spanner(     label = \"Placebo\",     columns = c(\"n_resp_Placebo\", \"ci_low_Placebo\")   )   rx_resp_tbl rx_resp_tbl <-   rx_resp_tbl |>    tab_row_group(     label = \"Age\",     rows = everything()   )   rx_resp_tbl rx_resp_tbl <-    rx_resp_tbl |>    cols_align(     align = \"center\",     columns = starts_with(c(\"n_\", \"ci\", \"or\"))   ) |>    cols_label(     .list = c(       \"AAGEGR1\" = \"\",       \"n_resp_Placebo\" = \"Event Rate (%)\",       \"ci_low_Placebo\" = \"[95% CI]\",       \"n_resp_Drug 1\" = \"Event Rate (%)\",       \"ci_low_Drug 1\" = \"[95% CI]\",       \"or\" = \"Odds ratio\",       \"or_ci_low\" = \"[95% CI]\"     )   ) |>    cols_width(     1 ~ px(80),     everything() ~ px(120)   ) |>    cols_align(align = \"left\", columns = 1)   rx_resp_tbl rx_resp_tbl <-   rx_resp_tbl |>    tab_footnote(     footnote = \"Event rate 95% exact confidence interval uses the Clopper−Pearson method.\",     locations = cells_column_labels(       columns = c(\"ci_low_Placebo\", \"ci_low_Drug 1\")     ),     placement = \"right\"   ) |>    tab_options(footnotes.marks = letters)  rx_resp_tbl"},{"path":"https://gt.rstudio.com/articles/case-study-clinical-tables.html","id":"protocol-deviation-table","dir":"Articles","previous_headings":"","what":"Protocol Deviation Table","title":"Case Study: Clinical Tables","text":"summary table protocol deviations (PDs) use second CDISC-flavored dataset, namely rx_addv. dataset contains summary row, indicating whether subject ITT population rx_adsl experienced least one major PD . addition subject level summary, individual PDs summarized. now like build table summarize overall counts individual PDs treatment arm furthermore indicate, whether PD related COVID-19 . order build table, first need apply data wrangling functions dplyr tidyr. dataset serves starting point gt. start exposing dataset gt add usual left-aligned headers. next step, like create summary row individual PDs get overall number individual PDs, well corresponding percentage. , first create row group individual PDs using tab_row_group() applied rows PARCAT1 equal PROTOCOL DEVIATIONS. , ’ll arrange order row groups list individual PDs overall summary. Finally, can create summary row, using summary_rows() gt sums columns n’s percentages us (summary functions possible, fn = 'sum' job us). kept column PARCAT1 facilitate generation row group. can hide column now using cols_hide(): Now table roughly right shape, can start format numeric columns merge columns n’s percentages intervention group COVID-19 relationship flag. looks like PD table! can now modify column names create cascade column spanners. can now add footnote, indicating subjects can one PD course study. footnote added tab_footnote() row least one major Protocol Deviation. Finally, can style table, indenting individual PDs Study Procedure Deviations, left-aligning first column centering columns. Note indentation, can still use hidden column PARCAT1 identify individual PDs.","code":"rx_addv |> str() #> tibble [291 × 20] (S3: tbl_df/tbl/data.frame) #>  $ STUDYID : chr [1:291] \"GT01\" \"GT01\" \"GT01\" \"GT01\" ... #>   ..- attr(*, \"label\")= chr \"Unique Study Identifier\" #>  $ STUDYIDN: chr [1:291] \"4001\" \"4001\" \"4001\" \"4001\" ... #>   ..- attr(*, \"label\")= chr \"Unique Study Identifier (N)\" #>  $ USUBJID : chr [1:291] \"GT1001\" \"GT1002\" \"GT1002\" \"GT1003\" ... #>   ..- attr(*, \"label\")= chr \"Unique Subject Identifier\" #>  $ TRTA    : Factor w/ 2 levels \"Placebo\",\"Drug 1\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"label\")= chr \"Actual Treatment\" #>  $ TRTAN   : num [1:291] 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \"label\")= chr \"Actual Treatment (N)\" #>  $ ITTFL   : chr [1:291] \"Y\" \"Y\" \"Y\" \"Y\" ... #>   ..- attr(*, \"label\")= chr \"ITT Population Flag\" #>  $ AGE     : int [1:291] 41 39 39 38 38 38 45 45 35 35 ... #>   ..- attr(*, \"label\")= chr \"Age\" #>   ..- attr(*, \"units\")= chr \"Years\" #>  $ AAGEGR1 : Factor w/ 2 levels \"<40\",\">=40\": 2 1 1 1 1 1 2 2 1 1 ... #>   ..- attr(*, \"label\")= chr \"Age Group\" #>  $ SEX     : Factor w/ 3 levels \"Male\",\"Female\",..: 1 2 2 1 1 1 1 1 2 2 ... #>   ..- attr(*, \"label\")= chr \"Sex\" #>  $ ETHNIC  : Factor w/ 3 levels \"Hispanic or Latino\",..: 2 2 2 2 2 2 2 2 1 1 ... #>   ..- attr(*, \"label\")= chr \"Ethnicity\" #>  $ BLBMI   : num [1:291] 33.4 30.5 30.5 22.9 22.9 ... #>   ..- attr(*, \"label\")= chr \"Body Mass Index\" #>   ..- attr(*, \"units\")= chr \"kg/m2\" #>  $ DVTERM  : chr [1:291] \"\" \"\" \"Lab values not taken at month 3\" \"\" ... #>   ..- attr(*, \"label\")= chr \"Protocol Deviation Term\" #>  $ PARAMCD : Factor w/ 6 levels \"PDANYM\",\"PDEV01\",..: 1 1 3 1 2 3 1 2 1 1 ... #>   ..- attr(*, \"label\")= chr \"Parameter Code\" #>  $ PARAM   : Factor w/ 6 levels \"At least one major Protocol Deviation\",..: 1 1 3 1 2 3 1 2 1 1 ... #>   ..- attr(*, \"label\")= chr \"Parameter\" #>  $ PARCAT1 : chr [1:291] \"OVERALL\" \"OVERALL\" \"PROTOCOL DEVIATION\" \"OVERALL\" ... #>   ..- attr(*, \"label\")= chr \"Parameter Category 1\" #>  $ DVCAT   : chr [1:291] \"\" \"\" \"Major\" \"\" ... #>   ..- attr(*, \"label\")= chr \"Protocol Deviation Category\" #>  $ ACAT1   : chr [1:291] \"\" \"\" \"Study Procedures Criteria Deviations\" \"\" ... #>   ..- attr(*, \"label\")= chr \"Analysis Category 1\" #>  $ AVAL    : num [1:291] 0 1 1 0 1 1 1 1 0 1 ... #>   ..- attr(*, \"label\")= chr \"Analysis Value\" #>  $ CRIT1   : chr [1:291] \"COVID-19 Related\" \"COVID-19 Related\" \"COVID-19 Related\" \"COVID-19 Related\" ... #>   ..- attr(*, \"label\")= chr \"Analysis Criterion 1\" #>  $ CRIT1FL : chr [1:291] \"N\" \"N\" \"N\" \"N\" ... #>   ..- attr(*, \"label\")= chr \"Criterion 1 Evaluation Flag\" addv_sum <-    rx_addv |>    dplyr::group_by(TRTA) |>    dplyr::mutate(     NTOT = n_distinct(USUBJID),     .groups = \"drop\"   ) |>    dplyr::group_by(TRTA, PARCAT1, PARAM, CRIT1FL) |>    dplyr::summarize(     n = sum(AVAL, na.rm = TRUE),     pct = 100 * sum(AVAL, na.rm = TRUE) / mean(NTOT),     .groups = \"drop\"   ) |>    tidyr::pivot_wider(     id_cols = c(PARCAT1, PARAM),     names_from = c(TRTA, CRIT1FL),     values_from = c(n, pct)   ) |>    dplyr::mutate(across(where(is.numeric), ~ifelse(is.na(.), 0, .))) |>    dplyr::add_row(PARAM = \"Subjects with at least:\", .before = 1)  addv_sum #> # A tibble: 7 × 10 #>   PARCAT1  PARAM n_Placebo_N n_Placebo_Y `n_Drug 1_N` `n_Drug 1_Y` pct_Placebo_N #>   <chr>    <chr>       <dbl>       <dbl>        <dbl>        <dbl>         <dbl> #> 1 NA       Subj…          NA          NA           NA           NA         NA    #> 2 OVERALL  At l…          24          15           23            5         26.7  #> 3 PROTOCO… GTQ …           7           0           12            0          7.78 #> 4 PROTOCO… Lab …          12           3            7            0         13.3  #> 5 PROTOCO… GTQ …           7           2            7            1          7.78 #> 6 PROTOCO… Mont…           9           4            3            1         10    #> 7 PROTOCO… Mont…           9           8            9            3         10    #> # ℹ 3 more variables: pct_Placebo_Y <dbl>, `pct_Drug 1_N` <dbl>, #> #   `pct_Drug 1_Y` <dbl> addv_tbl <-    addv_sum |>    gt(rowname_col = \"PARAM\") |>    tab_header(     title = \"xx.x: Demographic and Baseline Data\",     subtitle = \"xx.x.x: Major Protocol Deviations and Relationship to COVID-19 - ITT Set\"   ) |>    opt_align_table_header(align = \"left\")  addv_tbl addv_tbl <-    addv_tbl |>    tab_row_group(     label = \" \",     rows = PARCAT1 == \"PROTOCOL DEVIATION\"   ) |>    row_group_order(groups = c(NA, \" \")) |>   summary_rows(     groups = \" \",     columns = where(is.numeric),     fns = list(label = \"Study Procedure Deviations\", fn = \"sum\"),     side = \"top\"   )  addv_tbl addv_tbl <-    addv_tbl |>    cols_hide(columns = \"PARCAT1\")  addv_tbl addv_tbl <-    addv_tbl |>    sub_missing(     rows = 1,     missing_text = \"\"   ) |>    fmt_number(     columns = starts_with(\"pct\"),     decimals = 1   ) |>    cols_merge_n_pct(     col_n = \"n_Placebo_Y\",     col_pct = \"pct_Placebo_Y\"   ) |>    cols_merge_n_pct(     col_n = \"n_Placebo_N\",     col_pct = \"pct_Placebo_N\"   ) |>    cols_merge_n_pct(     col_n = \"n_Drug 1_Y\",     col_pct = \"pct_Drug 1_Y\"   ) |>    cols_merge_n_pct(     col_n = \"n_Drug 1_N\",     col_pct = \"pct_Drug 1_N\"   )  addv_tbl addv_tbl <-    addv_tbl |>    tab_spanner(     label = md(\"COVID-19 Related\"),     columns = c(\"n_Placebo_Y\", \"n_Placebo_N\"),     id = \"cov_pla\"   ) |>    tab_spanner(     label = md(\"COVID-19 Related\"),     columns = c(\"n_Drug 1_Y\", \"n_Drug 1_N\"),     id = \"cov_dru\"   ) |>    tab_spanner(     label = md(\"Placebo  \\n  N=90 (100%)  \\n   n (%)\"),     columns = c(\"n_Placebo_Y\", \"n_Placebo_N\")   ) |>    tab_spanner(     label = md(\"Drug 1  \\n  N=90 (100%)  \\n   n (%)\"),     columns = c(\"n_Drug 1_Y\", \"n_Drug 1_N\")   ) |>    cols_label(     .list = list(       \"n_Placebo_Y\" = \"Yes\",       \"n_Placebo_N\" = \"No\",       \"n_Drug 1_Y\" = \"Yes\",       \"n_Drug 1_N\" = \"No\"     )   ) |>    tab_style(     style = cell_text(align = \"center\"),     locations = cells_column_spanners(spanners = everything())   )  addv_tbl addv_tbl <-    addv_tbl |>    tab_footnote(     footnote = \"Subjects can have more than one Protocol Deviation throughout the study.\",     locations = cells_stub(rows = c(\"At least one major Protocol Deviation\")),     placement = \"right\"   )  addv_tbl addv_tbl |>    cols_align(     align = \"center\",     columns = 3:6   ) |>    cols_align(     align = \"left\",     columns = 1:2   ) |>    tab_stub_indent(     rows = PARCAT1 == \"PROTOCOL DEVIATION\",     indent = 5   )"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"row-groups","dir":"Articles","previous_headings":"","what":"Row Groups","title":"Case Study: gtcars","text":"Let’s use dplyr help make groupings ctry_origin column, provides country origin vehicle manufacturer car. can simply use dplyr::group_by() gtcars dataset pass gt(). get display table arranges cars row groups, name group displayed prominently . Getting row groups preferred order can done easily dplyr::arrange(). example, can groups arranged alphabetically manufacturer (mfr) sorted highest sticker price (msrp) lowest. also use factor levels get particular ordering within arrange(). example, can first arrange groups (country origin–ctry_origin) preferred ordering arrange mfr descending msrp . , group_by(ctry_origin) can used sorted tibble passing gt(). last variation combine manufacturer name model name, using combined strings row labels table. just little dplyr can use dplyr::mutate() make new car column followed dplyr::select() remove mfr model columns. introducing tibble gt() function, can now use rowname_col argument specify column serve row labels (newly made car column).","code":"# Use `group_by()` on `gtcars` and pass that to `gt()` gtcars_8 |>   group_by(ctry_origin) |>   gt() gtcars_8 |>   group_by(ctry_origin) |>   arrange(mfr, desc(msrp)) |>   gt() # Define our preferred order for `ctry_origin` order_countries <- c(\"Germany\", \"Italy\", \"United States\", \"Japan\")  # Reorder the table rows by our specific ordering of groups gtcars_8 |>   arrange(     factor(ctry_origin, levels = order_countries), mfr, desc(msrp)   ) |>   group_by(ctry_origin) |>   gt() # Reorder the table rows by our specific ordering of groups tab <-   gtcars_8 |>   arrange(     factor(ctry_origin, levels = order_countries),     mfr, desc(msrp)   ) |>   mutate(car = paste(mfr, model)) |>   select(-mfr, -model) |>   group_by(ctry_origin) |>   gt(rowname_col = \"car\")  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"hiding-and-moving-some-columns","dir":"Articles","previous_headings":"","what":"Hiding and Moving Some Columns","title":"Case Study: gtcars","text":"Let’s hide two columns don’t need final table: drivetrain bdy_style. can use cols_hide() hide columns. end result might also achieved using gtcars |> dplyr::select(-c(drivetrain, bdy_style)), introducing table gt(). function ? Sometimes ’ll need variables conditional statements within gt won’t want display end. Aside hiding columns, let’s move . , done dplyr::select() options gt via cols_move_to_start(), cols_move(), cols_move_to_end().","code":"# Use a few `cols_*()` functions to hide and move columns  tab <-    tab |>   cols_hide(columns = c(drivetrain, bdy_style)) |>   cols_move(     columns = c(trsmn, mpg_c, mpg_h),     after = trim   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"putting-columns-into-groups","dir":"Articles","previous_headings":"","what":"Putting Columns Into Groups","title":"Case Study: gtcars","text":"’s sometimes useful arrange variables/columns groups using spanner column labels. can done gt tab_spanner(). takes label columns arguments; label spanner column label columns columns belong group. , ’ll put mpg_c, mpg_h, hp, hp_rpm, trq, trq_rpm columns Performance spanner column, remaining columns won’t grouped together. single spanner column label styled Markdown using md() helper.","code":"# Put the first three columns under a spanner # column with the label 'Performance' tab <-    tab |>   tab_spanner(     label = \"Performance\",     columns = c(mpg_c, mpg_h, hp, hp_rpm, trq, trq_rpm)   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"merging-columns-together-and-labeling-them","dir":"Articles","previous_headings":"","what":"Merging Columns Together and Labeling Them","title":"Case Study: gtcars","text":"Sometimes ’d like combine data two columns single column. cols_merge() allows us , just need describe data combined. table, let’s merge together following pairs columns: mpg_c mpg_h (miles per gallon city highway driving modes) hp hp_rpm (horsepower associated RPM) trq trq_rpm (torque associated RPM) cols_merge() uses col_1 column col_2 column. combined, col_1 column retained col_2 column dropped. pattern argument uses {1} {2} represent content col_1 col_2. , can use string literals add text like rpm @ sign. Furthermore, targeting HTML table, can use <br> tag insert linebreak. going something little special pattern mpg_c mpg_h columns wrap <<\/>>. special pattern syntax tells gt remove anything inside double braces NA value. find single row NA columns (‘Tesla Model S’) rather seeing \"NA\" appear table, ’s better remove entry entirely specialized pattern syntax. Labeling columns essentially means choosing display-friendly labels longer simply column names (default label). cols_label() makes relabeling possible. accepts series named arguments form <column_name> = <column_label>, ....","code":"# Perform three column merges to better present # MPG, HP, and torque; relabel all the remaining # columns for a nicer-looking presentation tab <-    tab |>   cols_merge(     columns = c(mpg_c, mpg_h),     pattern = \"<<{1}c<br>{2}h>>\"   ) |>   cols_merge(     columns = c(hp, hp_rpm),     pattern = \"{1}<br>@{2}rpm\"   ) |>   cols_merge(     columns = c(trq, trq_rpm),     pattern = \"{1}<br>@{2}rpm\"   ) |>   cols_label(     mpg_c = \"MPG\",     hp = \"HP\",     trq = \"Torque\",     year = \"Year\",     trim = \"Trim\",     trsmn = \"Transmission\",     msrp = \"MSRP\"   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"using-formatter-functions","dir":"Articles","previous_headings":"","what":"Using Formatter Functions","title":"Case Study: gtcars","text":"number formatter functions, general naming convention fmt*(). various formatters convenient applying formats numeric character values table’s field. , simply use fmt_currency() msrp column (still refer columns original names) get USD currency decimal places. ’re supplying anything rows argument means want apply formatting entire column data.","code":"# Format the `msrp` column to USD currency # with no display of the currency subunits tab <-    tab |>   fmt_currency(columns = msrp, decimals = 0)  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"column-alignment-and-style-changes","dir":"Articles","previous_headings":"","what":"Column Alignment and Style Changes","title":"Case Study: gtcars","text":"can change alignment data columns cols_align(). table, let’s center-align mpg_c, hp, trq columns. columns maintain default alignments. ’s sometimes useful modify default styles table cells. can targeted way tab_style(). function require two key pieces information: style definition, one locations (cells styles applied ?). style argument commonly uses cell_*() helper functions. three (cell_text(), cell_fill() cell_borders()) contains different arguments different styles supported. use cell_text() specify text size \"12px\" targeted cells—px(12) \"12px\" work equally well . also use helper functions locations argument cells_*() functions. like target data cells columns except year msrp need use cells_body supply target columns columns argument.","code":"# Center-align three columns in the gt table and # modify the text size of a few columns of data tab <-    tab |>   cols_align(     align = \"center\",     columns = c(mpg_c, hp, trq)   ) |>   tab_style(     style = cell_text(size = px(12)),     locations = cells_body(       columns = c(trim, trsmn, mpg_c, hp, trq)     )   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"text-transforms","dir":"Articles","previous_headings":"","what":"Text Transforms","title":"Case Study: gtcars","text":"Transforming text text_transform() great way manipulate text data cells (even ’ve formatted fmt*() function). targeting data cells cells_body() location helper function, supply function fn argument processes vector text (vector x formatted text targeted cells). intend render HTML table, can directly apply HTML tags transformation function. function provide bit complicated build strings trsmn column read better display table.","code":"# Transform the column of text in `trsmn` using # a custom function within `text_transform()`; # here `x` represents a character vector defined # in the `cells_body()` function tab <-    tab |>   text_transform(     locations = cells_body(columns = trsmn),     fn = function(x) {              # The first character of `x` always       # indicates the number of transmission speeds       speed <- substr(x, 1, 1)              # We can carefully determine which transmission       # type we have in `x` with a `dplyr::case_when()`       # statement       type <-         dplyr::case_when(           substr(x, 2, 3) == \"am\" ~ \"Automatic/Manual\",           substr(x, 2, 2) == \"m\" ~ \"Manual\",           substr(x, 2, 2) == \"a\" ~ \"Automatic\",           substr(x, 2, 3) == \"dd\" ~ \"Direct Drive\"         )              # Let's paste together the `speed` and `type`       # vectors to create HTML text replacing `x`       paste(speed, \" Speed<br><em>\", type, \"<\/em>\")     }   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"table-header-title-and-subtitle","dir":"Articles","previous_headings":"","what":"Table Header: Title and Subtitle","title":"Case Study: gtcars","text":"tab_header() allows us place table title , optionally, subtitle top display table. ’s generally good idea table, subtitle provides additional information (though isn’t quite case example ).","code":"# Add a table title and subtitle; we can use # markdown with the `md()` helper function tab <-    tab |>   tab_header(     title = md(\"The Cars of **gtcars**\"),     subtitle = \"These are some fine automobiles\"   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"adding-a-source-citation","dir":"Articles","previous_headings":"","what":"Adding a Source Citation","title":"Case Study: gtcars","text":"source note can added display table tab_source_note(). can even add multiple source notes multiple calls function. , supply web URL using Markdown (md()) ’s easy create link source data.","code":"# Add a source note to the bottom of the table; this # appears below the footnotes tab <-    tab |>   tab_source_note(     source_note = md(       \"Source: Various pages within the Edmonds website.\"     )   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/case-study-gtcars.html","id":"using-the-complete-gtcars-table-and-adding-footnotes","dir":"Articles","previous_headings":"","what":"Using the Complete gtcars table and Adding Footnotes","title":"Case Study: gtcars","text":"Let’s bring together putting together statements developed gtcars_8, applying complete gtcars dataset. time, ’ll add interesting footnotes specific requirements footnoting : tab_footnote() expects note text footnote argument, locations footnote mark attached. handle placement footnote mark also place footnote footnotes area. , ’ll use cells_body() location helper function. several location helper functions targeting parts table (e.g,. cells_body(), cells_stub(), etc.). location helper interface targeting cells refer documentation examples work practice (e.g., use ?cells_body). cells_body() expects columns (column names, can conveniently provided c()) rows (can vector row names row indices). cells_stub() location helper expects vector rows. cells_column_labels(), provide column labels columns argument. , targeting footnote msrp column label use columns = msrp. terms structuring code, ’re taking previous statements putting first. noted order statements matter end result, also put tab_footnote() statements first (, order) expect output table. . final table looks pretty good conveys additional information planned . table can used lot different places like R Markdown, Shiny, email messages… wherever HTML accepted.","code":"a. identifying the car with the best gas mileage (city) b. identifying the car with the highest horsepower c. stating the currency of the MSRP # Use dplyr functions to get the car with the best city gas mileage; # this will be used to target the correct cell for a footnote best_gas_mileage_city <-    gtcars |>    arrange(desc(mpg_c)) |>   slice(1) |>   mutate(car = paste(mfr, model)) |>   pull(car)  # Use dplyr functions to get the car with the highest horsepower # this will be used to target the correct cell for a footnote highest_horsepower <-    gtcars |>    arrange(desc(hp)) |>   slice(1) |>   mutate(car = paste(mfr, model)) |>   pull(car)  # Define our preferred order for `ctry_origin` order_countries <- c(\"Germany\", \"Italy\", \"United States\", \"Japan\")  # Create a display table with `gtcars`, using all of the previous # statements piped together + additional `tab_footnote()` stmts tab <-   gtcars |>   arrange(     factor(ctry_origin, levels = order_countries),     mfr, desc(msrp)   ) |>   mutate(car = paste(mfr, model)) |>   select(-mfr, -model) |>   group_by(ctry_origin) |>   gt(rowname_col = \"car\") |>   cols_hide(columns = c(drivetrain, bdy_style)) |>   cols_move(     columns = c(trsmn, mpg_c, mpg_h),     after = trim   ) |>   tab_spanner(     label = \"Performance\",     columns = c(mpg_c, mpg_h, hp, hp_rpm, trq, trq_rpm)   ) |>   cols_merge(     columns = c(mpg_c, mpg_h),     pattern = \"<<{1}c<br>{2}h>>\"   ) |>   cols_merge(     columns = c(hp, hp_rpm),     pattern = \"{1}<br>@{2}rpm\"   ) |>   cols_merge(     columns = c(trq, trq_rpm),     pattern = \"{1}<br>@{2}rpm\"   ) |>   cols_label(     mpg_c = \"MPG\",     hp = \"HP\",     trq = \"Torque\",     year = \"Year\",     trim = \"Trim\",     trsmn = \"Transmission\",     msrp = \"MSRP\"   ) |>   fmt_currency(columns = msrp, decimals = 0) |>   cols_align(     align = \"center\",     columns = c(mpg_c, hp, trq)   ) |>   tab_style(     style = cell_text(size = px(12)),     locations = cells_body(       columns = c(trim, trsmn, mpg_c, hp, trq)     )   ) |>   text_transform(     locations = cells_body(columns = trsmn),     fn = function(x) {              speed <- substr(x, 1, 1)              type <-         dplyr::case_when(           substr(x, 2, 3) == \"am\" ~ \"Automatic/Manual\",           substr(x, 2, 2) == \"m\" ~ \"Manual\",           substr(x, 2, 2) == \"a\" ~ \"Automatic\",           substr(x, 2, 3) == \"dd\" ~ \"Direct Drive\"         )              paste(speed, \" Speed<br><em>\", type, \"<\/em>\")     }   ) |>   tab_header(     title = md(\"The Cars of **gtcars**\"),     subtitle = \"These are some fine automobiles\"   ) |>   tab_source_note(     source_note = md(       \"Source: Various pages within the Edmonds website.\"     )   ) |>   tab_footnote(     footnote = md(\"Best gas mileage (city) of all the **gtcars**.\"),     locations = cells_body(       columns = mpg_c,       rows = best_gas_mileage_city     )   ) |>   tab_footnote(     footnote = md(\"The highest horsepower of all the **gtcars**.\"),     locations = cells_body(       columns = hp,       rows = highest_horsepower     )   ) |>   tab_footnote(     footnote = \"All prices in U.S. dollars (USD).\",     locations = cells_column_labels(columns = msrp)   )  # Show the table tab"},{"path":"https://gt.rstudio.com/articles/creating-summary-lines.html","id":"preparing-the-input-data-table","dir":"Articles","previous_headings":"","what":"Preparing the Input Data Table","title":"Creating Summary Lines","text":"Let’s use exibble dataset (included gt package) demonstrate summary rows can added. table contains categorical columns named row group, along several columns varying data types. preview exibble dataset using solely gt() function options: ’ll create table stub row labels (using row column) row groups (using group column). end result table organized labeled rows grouped together (row group labels identify row groups). make examples bit easier follow, columns exibble first dropped dplyr::select() statement. two groups data table: grp_a grp_b. gives us flexibility create grand summary group-wise summary rows.","code":"exibble |> gt() # Create a gt table using the `exibble` dataset exibble_a <-   exibble |>   select(-c(fctr, date, time, datetime)) |>   gt(rowname_col = \"row\", groupname_col = \"group\") |>   sub_missing()  exibble_a"},{"path":"https://gt.rstudio.com/articles/creating-summary-lines.html","id":"generating-group-wise-summary-rows","dir":"Articles","previous_headings":"","what":"Generating Group-wise Summary Rows","title":"Creating Summary Lines","text":"Group-wise summary rows can generated using summary_rows() , importantly, specifying groups receive summary rows. can provide vector group names, c(\"grp_a\", \"grp_b\"), , use everything() signify groups receive summary rows. Aside selection groups, control columns used summary. Since call summary_rows() performs one set aggregation functions, may want specific aggregations different subsets columns. make sort summary, need use functions perform aggregation. can provide base functions mean(), sum(), min(), max(), , within list(). function provided result summary row group. function yield row, need able label row. , summary row receive summary row label. can provide preferred names naming functions within list (e.g, list(average = \"mean\", total = \"sum\", SD = \"sd\")). can specify aggregation functions use function names quotes (e.g., \"sum\"), bare functions (e.g., sum), one-sided R formulas using leading ~. formula representation, . serves data summarized, can use sum(., na.rm = TRUE). use named arguments recommended names serve summary row labels (labels can derived function names providing bare function names). Now summary_rows() somewhat explained, let’s look can create group-wise summary rows exibble_a table. ’ll create summaries available groups (groups = everything()) use mean(), sum(), sd() functions function-name--quotes method (pertain num column). previous example NA value num/row_6 cell, get NA outputs mean(), sum(), sd() grp_b’s summary rows (replaced em dashes, controllable missing_text option). avoid , let’s rewrite using names--formulae method. see summary rows created groups. However, output summary row data quite different cell data. formatter argument (extra ... arguments) allows use fmt_*() functions ’d normally use format cell data. example (another rewrite ), cell data num column formatted scientific notation resulting summary cell data also formatted way (including options decimals = 3). input fns permissive regard functions defined. entirely valid provide functions various forms shown earlier list(\"sum\", avg = ~mean(., na.rm = TRUE), SD = \"sd\") correctly interpreted. recommended use formula notation. default formatter set fmt_number sensible default many scenarios. setting argument values particular formatter can done ... area function call (done decimals argument).","code":"# Create group-wise summary rows for both # groups (using `groups = everything()`); use the # `mean()`, `sum()`, and `sd()` functions # (only for the `num` column) exibble_b <-    exibble_a |>   summary_rows(     groups = everything(),     columns = num,     fns = list(       average = \"mean\",       total = \"sum\",       SD = \"sd\"     )   )  exibble_b # Create group-wise summary rows for both # groups (using `groups = everything()`); we will # use names and formulas this time in `fns` exibble_c <-    exibble_a |>   summary_rows(     groups = everything(),     columns = num,     fns = list(       avg = ~ mean(., na.rm = TRUE),       total = ~ sum(., na.rm = TRUE),       s.d. = ~ sd(., na.rm = TRUE)     )   )  exibble_c # Define a named list of aggregation # functions and summary row labels fns_labels <-    list(     avg = ~mean(., na.rm = TRUE),     total = ~sum(., na.rm = TRUE),     s.d. = ~sd(., na.rm = TRUE)   )  # Create group-wise summary rows as # before, supply `fns_labels` to `fns`, # and format the cell summary data exibble_d <-    exibble_a |>   fmt_scientific(     columns = num,     decimals = 3   ) |>   summary_rows(     groups = everything(),     columns = num,     fns = fns_labels,     fmt = list(~ fmt_scientific(., decimals = 3))   )  exibble_d"},{"path":"https://gt.rstudio.com/articles/creating-summary-lines.html","id":"using-multiple-calls-of-summary_rows","dir":"Articles","previous_headings":"","what":"Using Multiple Calls of summary_rows()","title":"Creating Summary Lines","text":"can re-use summary row labels fill otherwise empty summary cells similar aggregations perhaps different formatting options. ’s example currency column contains aggregate values share summary rows num column, adds two rows, uses currency formatting: thing note example even though two independent calls summary_rows() made, summary data within common summary row names ‘squashed’ together, thus avoiding fragmentation summary rows. Put another way, don’t create additional summary rows across separate calls referencing summary row labels. summary row labels provided fns different across columns however, additional summary rows produced even types data aggregations functionally equivalent. can also store argument values local variables pass separate fmt_*number*() calls also arguments within summary_rows() calls. useful standardizing formatting parameters across different table cell types. ’s example , additional passes fr_BE locale functions take locale value. Passing parameters like useful, especially larger numbers columns. store formatting parameters outside gt() pipeline, separate concerns data structuring data formatting. Putting styles options objects becomes important intend centralize formatting options reuse.","code":"# Create group-wise summary rows as # before, supply `fns_labels` to `fns`, # and format the cell summary data exibble_e <-    exibble_a |>   fmt_scientific(     columns = num,     decimals = 3   ) |>   fmt_currency(     columns = currency,     currency = \"EUR\"   ) |>   summary_rows(     groups = everything(),     columns = num,     fns = fns_labels,     fmt = list(~ fmt_scientific(., decimals = 3))   ) |>   summary_rows(     groups = \"grp_a\",     columns = currency,     fns = c(       fns_labels,       min = ~ min(.),       max = ~ max(.)     ),     fmt = list(~ fmt_currency(., currency = \"EUR\"))   )  exibble_e # Provide common formatting parameters to a list # object named `formats`; the number of decimal # places will be `2` and the locale is \"fr_BE\" formats <-    list(     decimals = 3,     locale = \"fr_BE\",     currency = \"EUR\"   )  # Format the `num` and `currency` columns # (using the values stored in `formats`); # when generating summary rows we can also # supply formatter options from this list exibble_f <-    exibble_a |>   fmt_scientific(     columns = num,     decimals = formats$decimals,     locale = formats$locale   ) |>   fmt_currency(     columns = currency,     currency = formats$currency,     locale = formats$locale   ) |>   summary_rows(     groups = everything(),     columns = num,     fns = fns_labels,     fmt = list(~ fmt_scientific(.,       decimals = formats$decimals,       locale = formats$locale     ))   ) |>   summary_rows(     groups = \"grp_a\",     columns = currency,     fns = c(       fns_labels,       min = ~min(.),       max = ~max(.)     ),     fmt = list(~ fmt_currency(.,       currency = formats$currency,       locale = formats$locale     ))   )  exibble_f"},{"path":"https://gt.rstudio.com/articles/creating-summary-lines.html","id":"creating-a-grand-summary","dir":"Articles","previous_headings":"","what":"Creating a Grand Summary","title":"Creating Summary Lines","text":"grand summary aggregates column data regardless groups within data. Grand summaries can also created gt tables don’t row groups, , don’t stub. Finally, can create table group-wise summaries grand summary. Let’s keep simple create grand summary rows table without stub. ’ll use exibble dataset . exibble columns select()ed, passed gt(), grand_summary_rows(). Notice , resulting table, stub created just summary row labels (go somewhere). grand summary can used conjunction group-wise summaries. ’s table types summaries present: Note grand summary double line separating group-wise summary ’s part grp_b. default styling appears subtle, can elect add styling group-wise summaries grand summary using tab_options().","code":"# Create a simple grand summary on a gt # table that contains no stub exibble_g <-   exibble |>   select(num, char, currency) |>   gt() |>   grand_summary_rows(     columns = c(num, currency),     fns = fns_labels   )  exibble_g # Using the table in `exibble_f`, create # grand summary rows (using two separate # calls of `grand_summary_rows()` since # the formatting will be different) exibble_h <-    exibble_f |>   grand_summary_rows(     columns = num,     fns = fns_labels,     fmt = list(~ fmt_number(.,       suffixing = TRUE,       locale = formats$locale     ))   ) |>   grand_summary_rows(     columns = currency,     fns = fns_labels,     fmt = list(~ fmt_currency(.,       suffixing = TRUE,       locale = formats$locale     ))   )  exibble_h"},{"path":"https://gt.rstudio.com/articles/creating-summary-lines.html","id":"adding-some-style-to-the-summary-cells","dir":"Articles","previous_headings":"","what":"Adding Some Style to the Summary Cells","title":"Creating Summary Lines","text":"summary cells (group-wise grand) distinct appearance sets apart data cells, ’s always option modify appearance. can use tab_options() perform customizations. options specific summary cells (group-wise summaries) grand summary cells: summary_row.background.color & grand_summary_row.background.color summary_row.padding & grand_summary_row.padding summary_row.text_transform & grand_summary_row.text_transform can also target summary cells grand summary cells location helper functions cells_summary() cells_grand_summary(). important adding footnotes tab_footnote() setting styles tab_style() (locations argument). example uses multiple calls tab_options() tab_footnote(). cell background color types summary cells modified two footnotes added.","code":"# Using the gt table of `exibble_h` as a # starting point, style summary cells with # `tab_options()` and add two footnotes exibble_i <-    exibble_h |>   tab_options(     summary_row.background.color = \"lightblue\",     grand_summary_row.background.color = \"lightgreen\"   ) |>   tab_footnote(     footnote = md(\"Mean of all *num* values.\"),     locations = cells_grand_summary(       columns = \"num\", rows = \"avg\"     )   ) |>   tab_footnote(     footnote = md(\"Highest `currency` value in **grp_a**\"),     locations = cells_summary(       groups = \"grp_a\",       columns = \"currency\",       rows = \"max\"     )   )  exibble_i"},{"path":"https://gt.rstudio.com/articles/creating-summary-lines.html","id":"extracting-the-summary-data-from-the-gt-table-object","dir":"Articles","previous_headings":"","what":"Extracting the Summary Data from the gt Table Object","title":"Creating Summary Lines","text":"reproducible workflow, want situations data created modified accessed. summarized values created gt pipeline presents advantages readability intent analysis, recognized output table essentially ‘read ’, input data undergoes processing movement entirely different format. However, object created still contains data can obtain summary data gt table object extract_summary(). Taking gt_summary object, get list tibbles containing summary data preserving correct data types: output tibbles within list always contain groupname rowname columns. groupname column filled name row group given summary_rows(). rowname column contains descriptive stub labels summary rows (recall values either supplied explicitly summary_rows(), , generated function names). remaining columns original dataset. output data extract_summary() can reintroduced reproducible workflow serve downstream inputs undergo validation. Perhaps interestingly, output tibbles structured way facilitates direct input back gt() (.e., magic groupname rowname columns). can produce new, standalone summary table summary rows now data rows:","code":"# Extract the summary data from `exibble_d` # to a list  object summary_list <- exibble_d |> extract_summary() # Print out the summary for the `grp_a` group summary_list$summary_df_data_list$grp_a #> # A tibble: 3 × 8 #>   group_id row_id rowname   num  char currency   row group #>   <chr>    <chr>  <chr>   <dbl> <dbl>    <dbl> <dbl> <dbl> #> 1 grp_a    avg    avg      120.    NA       NA    NA    NA #> 2 grp_a    total  total    480.    NA       NA    NA    NA #> 3 grp_a    s.d.   s.d.     217.    NA       NA    NA    NA # Print out the summary for the `grp_b` group summary_list$summary_df_data_list$grp_b #> # A tibble: 3 × 8 #>   group_id row_id rowname      num  char currency   row group #>   <chr>    <chr>  <chr>      <dbl> <dbl>    <dbl> <dbl> <dbl> #> 1 grp_b    avg    avg     3220850     NA       NA    NA    NA #> 2 grp_b    total  total   9662550     NA       NA    NA    NA #> 3 grp_b    s.d.   s.d.    4916123.    NA       NA    NA    NA # Take `exibble_d`, which internally has a list # of summary data frames, extract the summaries, # and then combine them; input that into `gt()`, # and format the `num` column with `fmt_number()` exibble_d |>   extract_summary() |>   unlist(recursive = FALSE) |>   bind_rows() |>   gt() |>   fmt_number(     columns = num,     decimals = 1   ) |>   sub_missing(columns = c(char, currency, row, group))"},{"path":"https://gt.rstudio.com/articles/creating-summary-lines.html","id":"providing-our-own-aggregation-functions-to-generate-summary-rows","dir":"Articles","previous_headings":"","what":"Providing Our Own Aggregation Functions to Generate Summary Rows","title":"Creating Summary Lines","text":"many functions available base R within packages useful aggregate functions, may occasionally need create custom functions. taking approach main things keep mind vector values main input, , single value returned. return value can pretty much class (e.g., numeric, character, logical) ’s formatter function handle custom formatting also converting character. , ’ll define function takes vector numeric values outputs two highest values (sorted low high) threshold value. output function always formatted character string. character value ’s returned, don’t need formatting functions like fmt_number(), fmt_percent(), etc. However, useful formatter (need formatter) fmt_passthrough(). Like name suggests, great extent passes values formats character (like fmt_*() function ) provides option decorate output pattern. Let’s look agg_highest_two_above_value() can used fmt_passthrough(). can extract grand summary data exibble_j object. Note columns num currency classed character since character outputs generated agg_highest_two_above_value() function.","code":"# Define a function that gives the # highest two values above a threshold agg_highest_two_above_value <- function(x, threshold) {      # Get sorted values above threshold value   values <- sort(round(x[x >= threshold], 2))      # Return character string with 2 highest values above threshold   if (length(values) == 0) {     return(paste0(\"No values above \", threshold))   } else {     return(       paste(         formatC(           tail(             sort(round(x[x > threshold], 2)), 2),           format = \"f\", digits = 2), collapse = \", \"))   } }  # Let's test this function with some values agg_highest_two_above_value(   x = c(0.73, 0.93, 0.75, 0.86, 0.23, 0.81),   threshold = 0.8 ) #> [1] \"0.86, 0.93\" # Create a gt table with `exibble_a` and use # the custom function with a threshold of `20`; # `fmt_passthrough()` allows for minimal formatting # of the aggregate values exibble_j <-    exibble_a |>   grand_summary_rows(     columns = c(num, currency),     fns = list(high = ~ agg_highest_two_above_value(., 20)),     fmt = list(~ fmt_passthrough(., pattern = \"({x})\"))   )  exibble_j # Extract the summary list from `exibble_j` # and inspect using `str()` exibble_j |>   extract_summary() |>   str() #> List of 1 #>  $ summary_df_data_list:List of 1 #>   ..$ ::GRAND_SUMMARY: tibble [1 × 8] (S3: tbl_df/tbl/data.frame) #>   .. ..$ group_id: chr \"::GRAND_SUMMARY\" #>   .. ..$ row_id  : chr \"high\" #>   .. ..$ rowname : chr \"high\" #>   .. ..$ num     : chr \"777000.00, 8880000.00\" #>   .. ..$ char    : num NA #>   .. ..$ currency: chr \"1325.81, 65100.00\" #>   .. ..$ row     : num NA #>   .. ..$ group   : num NA"},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"countrypops","dir":"Articles","previous_headings":"","what":"countrypops","title":"gt Datasets","text":"dataset provides total populations 215 countries yearly basis, 1960 2021. source data comes World Bank, cleaned tidied inclusion package. row contains population value country given year, NA values population indicate country exist particular year. countrypops dataset tibble 13,330 rows 5 variables. explanations variables:","code":""},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"a-countrypops-example","dir":"Articles","previous_headings":"countrypops","what":"A countrypops Example","title":"gt Datasets","text":"table ’ll create countrypops meet requirements: use countries Oceania countries different regions Oceania grouped together provide populations 2000, 2010, 2020 years ; appear separate columns spanner group column stating columns refer population values format population figures contain commas provide descriptive title","code":"# Get vectors of 2-letter country codes for each region of Oceania Australasia <- c(\"AU\", \"NZ\") Melanesia <- c(\"NC\", \"PG\", \"SB\", \"VU\") Micronesia <- c(\"FM\", \"GU\", \"KI\", \"MH\", \"MP\", \"NR\", \"PW\") Polynesia <- c(\"PF\", \"WS\", \"TO\", \"TV\")  # Create a gt table based on a preprocessed `countrypops` countrypops |>   filter(country_code_2 %in% c(     Australasia, Melanesia, Micronesia, Polynesia)   ) |>   filter(year %in% c(2000, 2010, 2020)) |>   mutate(region = case_when(     country_code_2 %in% Australasia ~ \"Australasia\",     country_code_2 %in% Melanesia ~ \"Melanesia\",     country_code_2 %in% Micronesia ~ \"Micronesia\",     country_code_2 %in% Polynesia ~ \"Polynesia\",   )) |>   pivot_wider(names_from = year, values_from = population) |>   arrange(region, desc(`2020`)) |>   select(-starts_with(\"country_code\")) |>   gt(     rowname_col = \"country_name\",     groupname_col = \"region\"   ) |>   tab_header(title = \"Populations of Oceania's Countries in 2000, 2010, and 2020\") |>   tab_spanner(     label = \"Total Population\",     columns = everything()   ) |>   fmt_integer()"},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"sza","dir":"Articles","previous_headings":"","what":"sza","title":"gt Datasets","text":"solar zenith angle one measure solar position. can thought ‘height’ sun relation observer. solar zenith angle 0° indicates sun directly overhead (different solar angle, solar altitude angle, 90° instance). sun horizontal (e.g., sunrise/sunset) observe solar zenith angle around 90° (matter atmospheric refraction). nighttime, solar zenith angles range 90–180 possible (, depending location observer). sza dataset calculated values solar zenith angles every 30 minutes 04:00 12:00 (true solar time). Temporally, calculations 1st every month year. Spatially, observer located somewhere along latitudes 20°N, 30°N, 40°N, 50°N (using true solar time, longitude unimportant). quite extensive topic, information can found using ?sza R console visiting page. sza dataset tibble 816 rows 4 variables. explanations variables:","code":""},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"an-sza-example","dir":"Articles","previous_headings":"sza","what":"An sza Example","title":"gt Datasets","text":"table ’ll create sza meet requirements: filter data just use 20°N data remove latitude column NA values sza column removed reshape table columns tst (true solar time) contain angles degrees (sza column) gt output table months row labels stub missing values replaced empty string (cells blank) stubhead label state ’s inside stubs (months, 20°N) table heading decorated HTML Black Sun Rays (&#x2600;) symbol fit large amount data small area, use table options reduce text size row padding","code":"# Create a gt table based on a preprocessed `sza` sza |>   filter(latitude == 20) |>   select(-latitude) |>   filter(!is.na(sza)) |>   pivot_wider(names_from = \"tst\", values_from = sza) |>   gt(rowname_col = \"month\") |>   sub_missing(missing_text = \"\") |>   tab_stubhead(label = md(\"month<br>(20&deg;N)\")) |>   tab_header(title = md(\"&#x2600; Solar Zenith Angles &#x2600;\")) |>   tab_options(     column_labels.font.size = \"smaller\",     table.font.size = \"smaller\",     data_row.padding = px(3)   )"},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"gtcars","dir":"Articles","previous_headings":"","what":"gtcars","title":"gt Datasets","text":"gtcars dataset takes mtcars left . contains 47 cars 2014-2017 model years. Many gtcars vehicles grand tourers. Indeed, many provide ability cross entire continent speed comfort yet, ’s called , allow experience driving thrills. chassis suspension cases top-notch supply superb handling roadholding routes one conceivably encounter grand touring experience. two plus two (2 + 2) seating configuration smartly designed deliver comfort driver passenger, adequate space luggage, room spare. gtcars dataset tibble 47 rows 15 variables. explanations variables:","code":""},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"a-gtcars-example","dir":"Articles","previous_headings":"gtcars","what":"A gtcars Example","title":"gt Datasets","text":"table ’ll create gtcars meet requirements: include German cars limit dataset top two expensive offerings German manufacturer information included manufacturer (mfr), car model (model), drivetrain, price (msrp) add table title combine car make model single column capitalize drivetrain text format prices USD currency commas decimal places shown relabel column headings provide nicer labels add two footnotes explain drivetrain abbreviations specify currency msrp prices; ensure footnote marks lowercase letters","code":"# Create a gt table based on a preprocessed `gtcars` gtcars |>   filter(ctry_origin == \"Germany\") |>   slice_max(n = 2, msrp, by = mfr) |>   select(mfr, model, drivetrain, msrp) |>   gt() |>   tab_header(title = \"Select German Automobiles\") |>   cols_merge(columns = c(mfr, model)) |>   text_transform(     locations = cells_body(columns = drivetrain),     fn = function(x) toupper(x)   ) |>   fmt_currency(decimals = 0) |>   cols_label(     mfr = \"Car\",     drivetrain = \"Drivetrain\",     msrp = \"MSRP\"   ) |>   tab_footnote(     footnote = \"Prices in USD.\",     locations = cells_column_labels(columns = msrp)   ) |>   tab_footnote(     footnote = \"AWD = All Wheel Drive, RWD = Rear Wheel Drive.\",     locations = cells_column_labels(columns = drivetrain)   ) |>   opt_footnote_marks(marks = \"letters\")"},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"sp500","dir":"Articles","previous_headings":"","what":"sp500","title":"gt Datasets","text":"S&P 500 capitalization-weighted index 500 leading companies (bigger companies influence within index) common stock listed either NYSE NASDAQ markets. companies chosen intended provide representation U.S. economy. index managed list (managed S&P Dow Jones Indices LLC) occasional changes constituent companies based performance changes economy. daily S&P 500 data available sp500 dataset, daily indicators (price statistics, volume, etc.) 1950 2015, inclusive. 16,607 rows dataset, 7 variables:","code":""},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"an-sp500-example","dir":"Articles","previous_headings":"sp500","what":"An sp500 Example","title":"gt Datasets","text":"table ’ll create sp500 meet requirements: use data period 2010-06-02 2010-06-15 adjusted close adj_close column won’t included title subtitle added describe contents table put column labels title case format date column appear ‘2 Jun 2010’ price columns (open, high, low, close) appear USD large numbers volume shown billions (B suffix) - -pointing triangles (green red) added alongside close price appropriate","code":"# Define the start and end dates for the data range start_date <- \"2010-06-02\" end_date <- \"2010-06-15\"  # The HTML decimal references for the black # up- and down-pointing triangles are: #9650 and #9660; # use an in-line style to apply color up_arrow <- \"<span style=\\\"color:green\\\">&#9650;<\/span>\" down_arrow <- \"<span style=\\\"color:red\\\">&#9660;<\/span>\"  # Create a gt table based on a preprocessed `sp500` sp500 |>   filter(date >= start_date, date <= end_date) |>   select(-adj_close) |>   gt() |>   tab_header(     title = \"S&P 500\",     subtitle = glue::glue(\"{start_date} to {end_date}\")   ) |>   fmt_date(     columns = date,     date_style = \"day_m_year\"   ) |>   fmt_currency(columns = c(open, high, low, close)) |>   fmt_number(columns = volume, suffixing = TRUE) |>   text_transform(     locations = cells_body(       columns = close,       rows = close > open     ),     fn = function(x) paste(x, up_arrow)   ) |>   text_transform(     locations = cells_body(       columns = close,       rows = close < open     ),     fn = function(x) paste(x, down_arrow)   ) |>   cols_label_with(     columns = everything(),     fn = ~ paste0(toupper(substr(., 1, 1)), substr(., 2, nchar(.)))   )"},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"pizzaplace","dir":"Articles","previous_headings":"","what":"pizzaplace","title":"gt Datasets","text":"pizzaplace dataset unusual say least. brings questions answers. ‘Greek’ pizza (the_greek) comes XL XXL sizes whilst (almost) pizzas adhere S-M-L paradigm? ‘Brie Carre’ pizza (brie_carre) small? Also, real (?), , nature reality? (questions quite complicated… however, can doubt existence material world, doubt existence someone thinking delicious pizzas offer pizzaplace.) somehow obtained 2015 sales pizzaplace, row pizza sold. 32 different types pizza 4 different categories: classic, chicken, supreme, veggie. great year sales, personal problems notwithstanding. kitchen fire late September help morale situation. Nevertheless, $817,860 sales year! indeed something cheerful . Let’s learn fascinating dataset structured:","code":""},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"a-pizzaplace-example","dir":"Articles","previous_headings":"pizzaplace","what":"A pizzaplace Example","title":"gt Datasets","text":"Let’s make reporting table pizzaplace dataset requirements: obtain total sale numbers revenue size pizza category (type) create gt table row represents combination size-type (size provides row labels type forms row groups) add title explain contents table format numeric sold column use commas decimal places format currency values (income) USD currency add summary grouping provides total sell counts revenue amounts color row groups summary cells add little pizzazz","code":"# Create a gt table based on a preprocessed `pizzaplace` pizzaplace |>   dplyr::group_by(type, size) |>   dplyr::summarize(     sold = n(),     income = sum(price),     .groups = \"drop_last\"   ) |>   gt(rowname_col = \"size\") |>   tab_header(title = \"Pizzas Sold in 2015\") |>   fmt_integer(columns = sold) |>   fmt_currency(columns = income) |>   summary_rows(     columns = sold,     fns = list(TOTAL = \"sum\"),     fmt = list(~ fmt_integer(.))   ) |>   summary_rows(     columns = income,     fns = list(TOTAL = \"sum\"),     fmt = list(~ fmt_currency(.))   ) |>   tab_options(     summary_row.background.color = \"#ACEACE\",     row_group.background.color = \"#FFEFDB\"   )"},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"exibble","dir":"Articles","previous_headings":"","what":"exibble","title":"gt Datasets","text":"example tibble ’s useful gt called exibble. ’s 8 rows, clear ordering data, columns contain data can tested various gt formatter functions (fmt*()). table describing columns exibble:","code":""},{"path":"https://gt.rstudio.com/articles/gt-datasets.html","id":"an-exibble-example","dir":"Articles","previous_headings":"exibble","what":"An exibble Example","title":"gt Datasets","text":"Let’s test many formatter functions possible exibble also using row labels row groups (furnished row group columns). ’ll format num display numbers 2 decimal places. dates date formatted date_style 6 (m_day_year style, use info_date_style() learn ). 24-h time values time use time_style 4 (hm_p, info info_time_style()). Datetimes datetime column can formatted fmt_datetime() function (uses date_style time_style arguments). column currency formatted currency fmt_currency ’ll consider values euros (currency = \"EUR\").","code":"# Create a gt table based on `exibble` exibble |>   gt(     rowname_col = \"row\",     groupname_col = \"group\"   ) |>   fmt_number(     columns = num,     decimals = 2   ) |>   fmt_date(     columns = date,     date_style = \"m_day_year\"   ) |>   fmt_time(     columns = time,     time_style = \"h_m_p\"   ) |>   fmt_datetime(     columns = datetime,     date_style = \"m_day_year\",     time_style = \"h_m_p\"   ) |>   fmt_currency(     columns = currency,     currency = \"EUR\"   ) |>   tab_options(     column_labels.font.size = \"small\",     table.font.size = \"small\",     row_group.font.size = \"small\",     data_row.padding = px(3)   )"},{"path":"https://gt.rstudio.com/articles/gt-interactive.html","id":"current-limitations","dir":"Articles","previous_headings":"","what":"Current limitations","title":"gt interactive tables","text":"features like tab_style() may fully supported. summary_rows() grand_summary_rows() yet implemented. interactive table may visually different non-interactive table.","code":""},{"path":"https://gt.rstudio.com/articles/gt-visual.html","id":"sec-background-color","dir":"Articles","previous_headings":"","what":"Background color","title":"gt visual tests","text":"html interactive plot #njlmifxdek table {   font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';   -webkit-font-smoothing: antialiased;   -moz-osx-font-smoothing: grayscale; }  #njlmifxdek thead, #njlmifxdek tbody, #njlmifxdek tfoot, #njlmifxdek tr, #njlmifxdek td, #njlmifxdek th {   border-style: none; }  #njlmifxdek p {   margin: 0;   padding: 0; }  #njlmifxdek .gt_table {   display: table;   border-collapse: collapse;   line-height: normal;   margin-left: auto;   margin-right: auto;   color: #333333;   font-size: 16px;   font-weight: normal;   font-style: normal;   background-color: #FFFFFF;   width: auto;   border-top-style: solid;   border-top-width: 2px;   border-top-color: #A8A8A8;   border-right-style: none;   border-right-width: 2px;   border-right-color: #D3D3D3;   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #A8A8A8;   border-left-style: none;   border-left-width: 2px;   border-left-color: #D3D3D3; }  #njlmifxdek .gt_caption {   padding-top: 4px;   padding-bottom: 4px; }  #njlmifxdek .gt_title {   color: #333333;   font-size: 125%;   font-weight: initial;   padding-top: 4px;   padding-bottom: 4px;   padding-left: 5px;   padding-right: 5px;   border-bottom-color: #FFFFFF;   border-bottom-width: 0; }  #njlmifxdek .gt_subtitle {   color: #333333;   font-size: 85%;   font-weight: initial;   padding-top: 3px;   padding-bottom: 5px;   padding-left: 5px;   padding-right: 5px;   border-top-color: #FFFFFF;   border-top-width: 0; }  #njlmifxdek .gt_heading {   background-color: #FFFFFF;   text-align: center;   border-bottom-color: #FFFFFF;   border-left-style: none;   border-left-width: 1px;   border-left-color: #D3D3D3;   border-right-style: none;   border-right-width: 1px;   border-right-color: #D3D3D3; }  #njlmifxdek .gt_bottom_border {   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3; }  #njlmifxdek .gt_col_headings {   border-top-style: solid;   border-top-width: 2px;   border-top-color: #D3D3D3;   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3;   border-left-style: none;   border-left-width: 1px;   border-left-color: #D3D3D3;   border-right-style: none;   border-right-width: 1px;   border-right-color: #D3D3D3; }  #njlmifxdek .gt_col_heading {   color: #333333;   background-color: #BEBEBE;   font-size: 100%;   font-weight: normal;   text-transform: inherit;   border-left-style: none;   border-left-width: 1px;   border-left-color: #D3D3D3;   border-right-style: none;   border-right-width: 1px;   border-right-color: #D3D3D3;   vertical-align: bottom;   padding-top: 5px;   padding-bottom: 6px;   padding-left: 5px;   padding-right: 5px;   overflow-x: hidden; }  #njlmifxdek .gt_column_spanner_outer {   color: #333333;   background-color: #BEBEBE;   font-size: 100%;   font-weight: normal;   text-transform: inherit;   padding-top: 0;   padding-bottom: 0;   padding-left: 4px;   padding-right: 4px; }  #njlmifxdek .gt_column_spanner_outer:first-child {   padding-left: 0; }  #njlmifxdek .gt_column_spanner_outer:last-child {   padding-right: 0; }  #njlmifxdek .gt_column_spanner {   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3;   vertical-align: bottom;   padding-top: 5px;   padding-bottom: 5px;   overflow-x: hidden;   display: inline-block;   width: 100%; }  #njlmifxdek .gt_spanner_row {   border-bottom-style: hidden; }  #njlmifxdek .gt_group_heading {   padding-top: 8px;   padding-bottom: 8px;   padding-left: 5px;   padding-right: 5px;   color: #333333;   background-color: #FFFFFF;   font-size: 100%;   font-weight: initial;   text-transform: inherit;   border-top-style: solid;   border-top-width: 2px;   border-top-color: #D3D3D3;   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3;   border-left-style: none;   border-left-width: 1px;   border-left-color: #D3D3D3;   border-right-style: none;   border-right-width: 1px;   border-right-color: #D3D3D3;   vertical-align: middle;   text-align: left; }  #njlmifxdek .gt_empty_group_heading {   padding: 0.5px;   color: #333333;   background-color: #FFFFFF;   font-size: 100%;   font-weight: initial;   border-top-style: solid;   border-top-width: 2px;   border-top-color: #D3D3D3;   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3;   vertical-align: middle; }  #njlmifxdek .gt_from_md > :first-child {   margin-top: 0; }  #njlmifxdek .gt_from_md > :last-child {   margin-bottom: 0; }  #njlmifxdek .gt_row {   padding-top: 8px;   padding-bottom: 8px;   padding-left: 5px;   padding-right: 5px;   margin: 10px;   border-top-style: solid;   border-top-width: 1px;   border-top-color: #D3D3D3;   border-left-style: none;   border-left-width: 1px;   border-left-color: #D3D3D3;   border-right-style: none;   border-right-width: 1px;   border-right-color: #D3D3D3;   vertical-align: middle;   overflow-x: hidden; }  #njlmifxdek .gt_stub {   color: #333333;   background-color: #FFFFFF;   font-size: 100%;   font-weight: initial;   text-transform: inherit;   border-right-style: solid;   border-right-width: 2px;   border-right-color: #D3D3D3;   padding-left: 5px;   padding-right: 5px; }  #njlmifxdek .gt_stub_row_group {   color: #333333;   background-color: #FFFFFF;   font-size: 100%;   font-weight: initial;   text-transform: inherit;   border-right-style: solid;   border-right-width: 2px;   border-right-color: #D3D3D3;   padding-left: 5px;   padding-right: 5px;   vertical-align: top; }  #njlmifxdek .gt_row_group_first td {   border-top-width: 2px; }  #njlmifxdek .gt_row_group_first th {   border-top-width: 2px; }  #njlmifxdek .gt_summary_row {   color: #333333;   background-color: #FFFFFF;   text-transform: inherit;   padding-top: 8px;   padding-bottom: 8px;   padding-left: 5px;   padding-right: 5px; }  #njlmifxdek .gt_first_summary_row {   border-top-style: solid;   border-top-color: #D3D3D3; }  #njlmifxdek .gt_first_summary_row.thick {   border-top-width: 2px; }  #njlmifxdek .gt_last_summary_row {   padding-top: 8px;   padding-bottom: 8px;   padding-left: 5px;   padding-right: 5px;   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3; }  #njlmifxdek .gt_grand_summary_row {   color: #333333;   background-color: #FFFFFF;   text-transform: inherit;   padding-top: 8px;   padding-bottom: 8px;   padding-left: 5px;   padding-right: 5px; }  #njlmifxdek .gt_first_grand_summary_row {   padding-top: 8px;   padding-bottom: 8px;   padding-left: 5px;   padding-right: 5px;   border-top-style: double;   border-top-width: 6px;   border-top-color: #D3D3D3; }  #njlmifxdek .gt_last_grand_summary_row_top {   padding-top: 8px;   padding-bottom: 8px;   padding-left: 5px;   padding-right: 5px;   border-bottom-style: double;   border-bottom-width: 6px;   border-bottom-color: #D3D3D3; }  #njlmifxdek .gt_striped {   background-color: rgba(128, 128, 128, 0.05); }  #njlmifxdek .gt_table_body {   border-top-style: solid;   border-top-width: 2px;   border-top-color: #D3D3D3;   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3; }  #njlmifxdek .gt_footnotes {   color: #333333;   background-color: #FFFFFF;   border-bottom-style: none;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3;   border-left-style: none;   border-left-width: 2px;   border-left-color: #D3D3D3;   border-right-style: none;   border-right-width: 2px;   border-right-color: #D3D3D3; }  #njlmifxdek .gt_footnote {   margin: 0px;   font-size: 90%;   padding-top: 4px;   padding-bottom: 4px;   padding-left: 5px;   padding-right: 5px; }  #njlmifxdek .gt_sourcenotes {   color: #333333;   background-color: #FFFFFF;   border-bottom-style: none;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3;   border-left-style: none;   border-left-width: 2px;   border-left-color: #D3D3D3;   border-right-style: none;   border-right-width: 2px;   border-right-color: #D3D3D3; }  #njlmifxdek .gt_sourcenote {   font-size: 90%;   padding-top: 4px;   padding-bottom: 4px;   padding-left: 5px;   padding-right: 5px; }  #njlmifxdek .gt_left {   text-align: left; }  #njlmifxdek .gt_center {   text-align: center; }  #njlmifxdek .gt_right {   text-align: right;   font-variant-numeric: tabular-nums; }  #njlmifxdek .gt_font_normal {   font-weight: normal; }  #njlmifxdek .gt_font_bold {   font-weight: bold; }  #njlmifxdek .gt_font_italic {   font-style: italic; }  #njlmifxdek .gt_super {   font-size: 65%; }  #njlmifxdek .gt_footnote_marks {   font-size: 75%;   vertical-align: 0.4em;   position: initial; }  #njlmifxdek .gt_asterisk {   font-size: 100%;   vertical-align: 0; }  #njlmifxdek .gt_indent_1 {   text-indent: 5px; }  #njlmifxdek .gt_indent_2 {   text-indent: 10px; }  #njlmifxdek .gt_indent_3 {   text-indent: 15px; }  #njlmifxdek .gt_indent_4 {   text-indent: 20px; }  #njlmifxdek .gt_indent_5 {   text-indent: 25px; }  #njlmifxdek .katex-display {   display: inline-flex !important;   margin-bottom: 0.75em !important; }  #njlmifxdek div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:{   height: 0px !important; } background color              spanner              fctr       date       time       datetime       currency       row       group     num       char     1.111e-01 apricot one 2015-01-15 13:35 2018-01-01 02:22 49.950 row_1 grp_a 2.222e+00 banana two 2015-02-15 14:40 2018-02-02 14:33 17.950 row_2 grp_a 3.333e+01 coconut three 2015-03-15 15:45 2018-03-03 03:44 1.390 row_3 grp_a 4.444e+02 durian four 2015-04-15 16:50 2018-04-04 15:55 65100.000 row_4 grp_a 5.550e+03 NA five 2015-05-15 17:55 2018-05-05 04:00 1325.810 row_5 grp_b NA fig six 2015-06-15 NA 2018-06-06 16:11 13.255 row_6 grp_b 7.770e+05 grapefruit seven NA 19:10 2018-07-07 05:22 NA row_7 grp_b 8.880e+06 honeydew eight 2015-08-15 20:20 NA 0.440 row_8 grp_b","code":"tab <- exibble |>   gt() |>   tab_options(     column_labels.background.color = \"gray\"   ) |>   tab_spanner(c(num, char), label = \"A spanner\") |>   tab_header(title = \"background color\")"},{"path":"https://gt.rstudio.com/articles/gt-visual.html","id":"sec-spanners-stub","dir":"Articles","previous_headings":"","what":"Spanner and Stubhead","title":"gt visual tests","text":"html interactive plot #oogogixask table {   font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';   -webkit-font-smoothing: antialiased;   -moz-osx-font-smoothing: grayscale; }  #oogogixask thead, #oogogixask tbody, #oogogixask tfoot, #oogogixask tr, #oogogixask td, #oogogixask th {   border-style: none; }  #oogogixask p {   margin: 0;   padding: 0; }  #oogogixask .gt_table {   display: table;   border-collapse: collapse;   line-height: normal;   margin-left: auto;   margin-right: auto;   color: #333333;   font-size: 16px;   font-weight: normal;   font-style: normal;   background-color: #FFFFFF;   width: auto;   border-top-style: solid;   border-top-width: 2px;   border-top-color: #A8A8A8;   border-right-style: none;   border-right-width: 2px;   border-right-color: #D3D3D3;   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #A8A8A8;   border-left-style: none;   border-left-width: 2px;   border-left-color: #D3D3D3; }  #oogogixask .gt_caption {   padding-top: 4px;   padding-bottom: 4px; }  #oogogixask .gt_title {   color: #333333;   font-size: 125%;   font-weight: initial;   padding-top: 4px;   padding-bottom: 4px;   padding-left: 5px;   padding-right: 5px;   border-bottom-color: #FFFFFF;   border-bottom-width: 0; }  #oogogixask .gt_subtitle {   color: #333333;   font-size: 85%;   font-weight: initial;   padding-top: 3px;   padding-bottom: 5px;   padding-left: 5px;   padding-right: 5px;   border-top-color: #FFFFFF;   border-top-width: 0; }  #oogogixask .gt_heading {   background-color: #FFFFFF;   text-align: center;   border-bottom-color: #FFFFFF;   border-left-style: none;   border-left-width: 1px;   border-left-color: #D3D3D3;   border-right-style: none;   border-right-width: 1px;   border-right-color: #D3D3D3; }  #oogogixask .gt_bottom_border {   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3; }  #oogogixask .gt_col_headings {   border-top-style: solid;   border-top-width: 2px;   border-top-color: #D3D3D3;   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3;   border-left-style: none;   border-left-width: 1px;   border-left-color: #D3D3D3;   border-right-style: none;   border-right-width: 1px;   border-right-color: #D3D3D3; }  #oogogixask .gt_col_heading {   color: #333333;   background-color: #FFFFFF;   font-size: 100%;   font-weight: normal;   text-transform: inherit;   border-left-style: none;   border-left-width: 1px;   border-left-color: #D3D3D3;   border-right-style: none;   border-right-width: 1px;   border-right-color: #D3D3D3;   vertical-align: bottom;   padding-top: 5px;   padding-bottom: 6px;   padding-left: 5px;   padding-right: 5px;   overflow-x: hidden; }  #oogogixask .gt_column_spanner_outer {   color: #333333;   background-color: #FFFFFF;   font-size: 100%;   font-weight: normal;   text-transform: inherit;   padding-top: 0;   padding-bottom: 0;   padding-left: 4px;   padding-right: 4px; }  #oogogixask .gt_column_spanner_outer:first-child {   padding-left: 0; }  #oogogixask .gt_column_spanner_outer:last-child {   padding-right: 0; }  #oogogixask .gt_column_spanner {   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3;   vertical-align: bottom;   padding-top: 5px;   padding-bottom: 5px;   overflow-x: hidden;   display: inline-block;   width: 100%; }  #oogogixask .gt_spanner_row {   border-bottom-style: hidden; }  #oogogixask .gt_group_heading {   padding-top: 8px;   padding-bottom: 8px;   padding-left: 5px;   padding-right: 5px;   color: #333333;   background-color: #FFFFFF;   font-size: 100%;   font-weight: initial;   text-transform: inherit;   border-top-style: solid;   border-top-width: 2px;   border-top-color: #D3D3D3;   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3;   border-left-style: none;   border-left-width: 1px;   border-left-color: #D3D3D3;   border-right-style: none;   border-right-width: 1px;   border-right-color: #D3D3D3;   vertical-align: middle;   text-align: left; }  #oogogixask .gt_empty_group_heading {   padding: 0.5px;   color: #333333;   background-color: #FFFFFF;   font-size: 100%;   font-weight: initial;   border-top-style: solid;   border-top-width: 2px;   border-top-color: #D3D3D3;   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3;   vertical-align: middle; }  #oogogixask .gt_from_md > :first-child {   margin-top: 0; }  #oogogixask .gt_from_md > :last-child {   margin-bottom: 0; }  #oogogixask .gt_row {   padding-top: 8px;   padding-bottom: 8px;   padding-left: 5px;   padding-right: 5px;   margin: 10px;   border-top-style: solid;   border-top-width: 1px;   border-top-color: #D3D3D3;   border-left-style: none;   border-left-width: 1px;   border-left-color: #D3D3D3;   border-right-style: none;   border-right-width: 1px;   border-right-color: #D3D3D3;   vertical-align: middle;   overflow-x: hidden; }  #oogogixask .gt_stub {   color: #333333;   background-color: #FFFFFF;   font-size: 100%;   font-weight: initial;   text-transform: inherit;   border-right-style: solid;   border-right-width: 2px;   border-right-color: #D3D3D3;   padding-left: 5px;   padding-right: 5px; }  #oogogixask .gt_stub_row_group {   color: #333333;   background-color: #FFFFFF;   font-size: 100%;   font-weight: initial;   text-transform: inherit;   border-right-style: solid;   border-right-width: 2px;   border-right-color: #D3D3D3;   padding-left: 5px;   padding-right: 5px;   vertical-align: top; }  #oogogixask .gt_row_group_first td {   border-top-width: 2px; }  #oogogixask .gt_row_group_first th {   border-top-width: 2px; }  #oogogixask .gt_summary_row {   color: #333333;   background-color: #FFFFFF;   text-transform: inherit;   padding-top: 8px;   padding-bottom: 8px;   padding-left: 5px;   padding-right: 5px; }  #oogogixask .gt_first_summary_row {   border-top-style: solid;   border-top-color: #D3D3D3; }  #oogogixask .gt_first_summary_row.thick {   border-top-width: 2px; }  #oogogixask .gt_last_summary_row {   padding-top: 8px;   padding-bottom: 8px;   padding-left: 5px;   padding-right: 5px;   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3; }  #oogogixask .gt_grand_summary_row {   color: #333333;   background-color: #FFFFFF;   text-transform: inherit;   padding-top: 8px;   padding-bottom: 8px;   padding-left: 5px;   padding-right: 5px; }  #oogogixask .gt_first_grand_summary_row {   padding-top: 8px;   padding-bottom: 8px;   padding-left: 5px;   padding-right: 5px;   border-top-style: double;   border-top-width: 6px;   border-top-color: #D3D3D3; }  #oogogixask .gt_last_grand_summary_row_top {   padding-top: 8px;   padding-bottom: 8px;   padding-left: 5px;   padding-right: 5px;   border-bottom-style: double;   border-bottom-width: 6px;   border-bottom-color: #D3D3D3; }  #oogogixask .gt_striped {   background-color: rgba(128, 128, 128, 0.05); }  #oogogixask .gt_table_body {   border-top-style: solid;   border-top-width: 2px;   border-top-color: #D3D3D3;   border-bottom-style: solid;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3; }  #oogogixask .gt_footnotes {   color: #333333;   background-color: #FFFFFF;   border-bottom-style: none;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3;   border-left-style: none;   border-left-width: 2px;   border-left-color: #D3D3D3;   border-right-style: none;   border-right-width: 2px;   border-right-color: #D3D3D3; }  #oogogixask .gt_footnote {   margin: 0px;   font-size: 90%;   padding-top: 4px;   padding-bottom: 4px;   padding-left: 5px;   padding-right: 5px; }  #oogogixask .gt_sourcenotes {   color: #333333;   background-color: #FFFFFF;   border-bottom-style: none;   border-bottom-width: 2px;   border-bottom-color: #D3D3D3;   border-left-style: none;   border-left-width: 2px;   border-left-color: #D3D3D3;   border-right-style: none;   border-right-width: 2px;   border-right-color: #D3D3D3; }  #oogogixask .gt_sourcenote {   font-size: 90%;   padding-top: 4px;   padding-bottom: 4px;   padding-left: 5px;   padding-right: 5px; }  #oogogixask .gt_left {   text-align: left; }  #oogogixask .gt_center {   text-align: center; }  #oogogixask .gt_right {   text-align: right;   font-variant-numeric: tabular-nums; }  #oogogixask .gt_font_normal {   font-weight: normal; }  #oogogixask .gt_font_bold {   font-weight: bold; }  #oogogixask .gt_font_italic {   font-style: italic; }  #oogogixask .gt_super {   font-size: 65%; }  #oogogixask .gt_footnote_marks {   font-size: 75%;   vertical-align: 0.4em;   position: initial; }  #oogogixask .gt_asterisk {   font-size: 100%;   vertical-align: 0; }  #oogogixask .gt_indent_1 {   text-indent: 5px; }  #oogogixask .gt_indent_2 {   text-indent: 10px; }  #oogogixask .gt_indent_3 {   text-indent: 15px; }  #oogogixask .gt_indent_4 {   text-indent: 20px; }  #oogogixask .gt_indent_5 {   text-indent: 25px; }  #oogogixask .katex-display {   display: inline-flex !important;   margin-bottom: 0.75em !important; }  #oogogixask div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:{   height: 0px !important; } Stubhead styling multiple spanner levels                     Second level spanners                   Stubhead label                spanners              fctr       date       time       datetime       currency     char       num     grp_a row_1 apricot 1.111e-01 one 2015-01-15 13:35 2018-01-01 02:22 49.950 row_2 banana 2.222e+00 two 2015-02-15 14:40 2018-02-02 14:33 17.950 row_3 coconut 3.333e+01 three 2015-03-15 15:45 2018-03-03 03:44 1.390 row_4 durian 4.444e+02 four 2015-04-15 16:50 2018-04-04 15:55 65100.000 grp_b row_5 NA 5.550e+03 five 2015-05-15 17:55 2018-05-05 04:00 1325.810 row_6 fig NA six 2015-06-15 NA 2018-06-06 16:11 13.255 row_7 grapefruit 7.770e+05 seven NA 19:10 2018-07-07 05:22 NA row_8 honeydew 8.880e+06 eight 2015-08-15 20:20 NA 0.440","code":"tab <- exibble %>%   gt(rowname_col = \"row\", groupname_col = \"group\", row_group_as_column = TRUE) |>   tab_spanner(\"spanners\", c(char, num)) %>%   tab_spanner(\"Second level spanners\", c(char, num, fctr)) %>%   tab_stubhead(\"Stubhead label\") %>%   tab_style(     style = list(cell_fill(\"#f0f0f0\"), cell_text(weight = \"bold\", size = \"small\", color = \"blue\")),     cells_stubhead()   ) %>%    tab_header(title = \"Stubhead styling and multiple spanner levels\")"},{"path":"https://gt.rstudio.com/articles/gt-visual.html","id":"sec-complete-output","dir":"Articles","previous_headings":"","what":"Complete output","title":"gt visual tests","text":"html interactive plot caption text","code":"tab <- pizzaplace %>%   dplyr::filter(type %in% c(\"classic\", \"veggie\")) %>%   dplyr::group_by(type, size) %>%   dplyr::summarize(     sold = dplyr::n(),     income = sum(price),     .groups = \"drop\"   ) %>%   gt(rowname_col = \"size\", groupname_col = \"type\") %>%   tab_header(title = \"Complete output\") %>%   fmt_integer(columns = sold) %>%   fmt_currency(columns = income) %>%   summary_rows(     fns = list(label = \"All Sizes\", fn = \"sum\"),     side = c(\"top\"),     fmt = list(       ~ fmt_integer(., columns = sold),       ~ fmt_currency(., columns = income)     )   ) %>%   tab_options(     summary_row.background.color = \"gray95\",     row_group.as_column = TRUE   ) %>%   tab_stub_indent(     rows = everything(),     indent = 2   ) %>%   grand_summary_rows(     columns = c(\"sold\", \"income\"),     fns = list(Sum ~ sum(.)),     fmt = ~ fmt_number(.)   ) %>%   tab_caption(\"Here be caption text\") %>%   tab_spanner(     label = \"Spanner\",     columns = c(\"sold\", \"income\")   ) %>%   tab_stubhead(\"Stubhead label\") %>%   tab_source_note(\"Source: the pizzaria\") %>%   tab_footnote(\"Pineapples not included\")"},{"path":"https://gt.rstudio.com/articles/gt.html","id":"a-walkthrough-of-the-gt-basics-with-a-simple-table","dir":"Articles","previous_headings":"","what":"A Walkthrough of the gt Basics with a Simple Table","title":"Introduction to Creating gt Tables","text":"Let’s use less common dataset available R datasets package: islands. ’s actually data frame named vector. ’s okay though, can use use dplyr prepare tibble : Given islands_tbl tibble, now suitable input gt. main entry point gt API gt() function. pass islands_tbl function gt(), ’ll get gt Table output. aside, easily used data frame instead valid Table Data gt. doesn’t look bad. Sure, ’s basic really didn’t really ask much. receive proper table column labels data. Also, default striping nice touch. Oftentimes however, ’ll want bit : Table header, Stub, sometimes footnotes source notes Table Footer part.","code":"# Take the `islands` dataset and use some # dplyr functionality to obtain the ten # biggest islands in the world islands_tbl <-    tibble(     name = names(islands),     size = islands   ) |>   arrange(desc(size)) |>   slice(1:10)  # Display the table islands_tbl #> # A tibble: 10 × 2 #>    name           size #>    <chr>         <dbl> #>  1 Asia          16988 #>  2 Africa        11506 #>  3 North America  9390 #>  4 South America  6795 #>  5 Antarctica     5500 #>  6 Europe         3745 #>  7 Australia      2968 #>  8 Greenland       840 #>  9 New Guinea      306 #> 10 Borneo          280 # Create a display table showing ten of # the largest islands in the world gt_tbl <- gt(islands_tbl)  # Show the gt Table gt_tbl"},{"path":"https://gt.rstudio.com/articles/gt.html","id":"adding-parts-to-this-simple-table","dir":"Articles","previous_headings":"","what":"Adding Parts to this Simple Table","title":"Introduction to Creating gt Tables","text":"gt package makes relatively easy add parts resulting gt Table better conveys information want present. table parts work well together possible variations arrangement can handle tabular presentation needs. previous gt Table demonstrated two parts, Column Labels Table Body. next examples show table parts available. way main parts table (subparts) fit together:  parts (roughly top bottom) : Table Header (optional; title possibly subtitle) Stub Stub Head (optional; contains row labels, optionally within row groups row group labels possibly summary labels summary present) Column Labels (contains column labels, optionally spanner column labels) Table Body (contains columns rows cells) Table Footer (optional; possibly footnotes source notes) way add parts like Table Header footnotes Table Footer use tab_*() family functions. Table Header easy add let’s see previous table looks title subtitle. can add part using tab_header() function: Header table part provides opportunity describe data ’s presented. subtitle, functions subtitle, optional part Header. may also style title subtitle using Markdown! wrapping values passed title subtitle md() function. example table data truncated brevity: source note can added table’s footer use tab_source_note(). works way tab_header() (also allows Markdown inputs) except can called multiple times—invocation results addition source note. Footnotes live inside Footer part footnote marks attached cell data. Footnotes added tab_footnote(). helper function cells_body() can used location argument specify data cells target footnote. cells_body() two arguments columns rows. , can supply (1) vector colnames rownames, (2) vector column/row indices, (3) bare column names wrapped c() row labels within c(), (4) select helper function (starts_with(), ends_with(), contains(), matches(), all_of(), everything()). rows specifically, can use conditional statement column names variables (e.g., size > 15000). simple example footnotes can added table cell. Let’s add footnote references North America South America cells name column: slightly complex example adding footnotes use expressions rows help target cells column underlying data islands_tbl. First, set dplyr statements obtains name ‘island’ largest landmass. assigned largest object used first tab_footnote() call targets cell size column next name value stored largest (‘Asia’). second tab_footnote() similar except supplying conditional statement gets lowest population. able supply reference locations table using cells_body() helper function supplying necessary targeting columns rows arguments. cells_*() functions similar interfaces allow us target cells different parts table.","code":"# Make a display table with the `islands_tbl` # table; put a heading just above the column labels gt_tbl <-    gt_tbl |>   tab_header(     title = \"Large Landmasses of the World\",     subtitle = \"The top ten largest are presented\"   )  # Show the gt Table gt_tbl # Use markdown for the heading's `title` and `subtitle` to # add bold and italicized characters gt(islands_tbl[1:2,]) |>   tab_header(     title = md(\"**Large Landmasses of the World**\"),     subtitle = md(\"The *top two* largest are presented\")   ) # Display the `islands_tbl` data with a heading and # two source notes gt_tbl <-    gt_tbl |>   tab_source_note(     source_note = \"Source: The World Almanac and Book of Facts, 1975, page 406.\"   ) |>   tab_source_note(     source_note = md(\"Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.\")   )  # Show the gt table gt_tbl # Add footnotes (the same text) to two different # cell; data cells are targeted with `data_cells()` gt_tbl <-    gt_tbl |>   tab_footnote(     footnote = \"The Americas.\",     locations = cells_body(columns = name, rows = 3:4)   )  # Show the gt table gt_tbl # Determine the row that contains the # largest landmass ('Asia') largest <-    islands_tbl |>    arrange(desc(size)) |>   slice(1) |>   pull(name)  # Create two additional footnotes, using the # `columns` and `where` arguments of `data_cells()` gt_tbl <-    gt_tbl |>   tab_footnote(     footnote = md(\"The **largest** by area.\"),     locations = cells_body(       columns = size,       rows = name == largest     )   ) |>   tab_footnote(     footnote = \"The lowest by area.\",     locations = cells_body(       columns = size,       rows = size == min(size)     )   )  # Show the gt table gt_tbl"},{"path":"https://gt.rstudio.com/articles/gt.html","id":"the-stub","dir":"Articles","previous_headings":"","what":"The Stub","title":"Introduction to Creating gt Tables","text":"Stub area left table contains row labels, may contain row group labels, summary labels. subparts can grouped sequence row groups. Stub Head provides location label describes Stub. Stub optional since cases Stub wouldn’t useful (e.g., display tables presented just fine without Stub). easy way generate Stub part specifying stub column gt() function rowname_col argument. signal gt named column used stub, making row labels. Let’s add stub islands_tbl dataset modifying call gt(): Notice landmass names left unstriped area? ’s stub. can apply ’s known stubhead label. label can added tab_stubhead(): important thing note table now one column. , stub, two columns present (column labels name size) now column number 1 (column) size. apply table parts (including footnotes) use following statements: Let’s incorporate row groups display table. divides rows groups, creating row groups, results display row group labels right group. can easily done table containing row labels. can make new row group tab_row_group() call. inputs row group names label argument, row references rows argument. can use strategies reference rows footnotes (e.g., vectors names/indices, select helpers, etc.). create three row groups (row group labels continent, country, subregion) grouping rows. Three row groups made since three unique categories groupname. Across top row group row group label contained separate row (cut across field contain nothing row group label). rearrangement rows carried ensure rows collected within appropriate row groups. groups rows row groups great way present information. Including data summaries particular group natural extension idea. process adding summary rows summary labels covered separate article (Creating Summary Lines). Another way make row groups column group names present input data table. example islands_tbl, groupname column categories continent, country, subregion appropriate rows produce row groups using gt() function’s groupname_col argument (e.g., gt(islands_tbl, rowname_col = \"name\", groupname_col = \"groupname\") |> ...). , need use tab_row_group(). strategy supplying group names column can sometimes advantageous since can rely functions available dplyr generate categories (e.g., using case_when() if_else()).","code":"# Create a gt table showing ten of the # largest islands in the world; this # time with a stub gt_tbl <-    islands_tbl |>   gt(rowname_col = \"name\")  # Show the gt table gt_tbl # Generate a simple table with a stub # and add a stubhead label gt_tbl <-    gt_tbl |>   tab_stubhead(label = \"landmass\")  # Show the gt table gt_tbl # Display the `islands_tbl` data with a stub, # a heading, source notes, and footnotes gt_tbl <-    gt_tbl |>   tab_header(     title = \"Large Landmasses of the World\",     subtitle = \"The top ten largest are presented\"   ) |>   tab_source_note(     source_note = \"Source: The World Almanac and Book of Facts, 1975, page 406.\"   ) |>   tab_source_note(     source_note = md(\"Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.\")   ) |>   tab_footnote(     footnote = md(\"The **largest** by area.\"),     locations = cells_body(       columns = size, rows = largest     )   ) |>   tab_footnote(     footnote = \"The lowest by population.\",     locations = cells_body(       columns = size, rows = contains(\"arc\")     )   )  # Show the gt table gt_tbl # Create three row groups with the # `tab_row_group()` function gt_tbl <-    gt_tbl |>    tab_row_group(     label = \"continent\",     rows = 1:6   ) |>   tab_row_group(     label = \"country\",     rows = c(\"Australia\", \"Greenland\")   ) |>   tab_row_group(     label = \"subregion\",     rows = c(\"New Guinea\", \"Borneo\")   )  # Show the gt table gt_tbl"},{"path":"https://gt.rstudio.com/articles/gt.html","id":"the-column-labels","dir":"Articles","previous_headings":"","what":"The Column Labels","title":"Introduction to Creating gt Tables","text":"table’s Column Labels part contains, minimum, columns column labels. last example single column: size. Just Stub, can create groupings called spanner columns encompass one columns. better demonstrate Column Labels work displayed, let’s use input data table columns. case, input table airquality. following columns: Ozone: mean ground-level ozone parts per billion volume (ppbV), measured 13:00 15:00 Solar.R: solar radiation Langley units (cal/m2), measured 08:00 noon Wind: mean wind speed miles per hour (mph) Temp: maximum daily air temperature degrees Fahrenheit (°F) Month, Day: numeric month day month record know measurements took place 1973, year column added dataset passed gt(). Let’s organize time information Time spanner column label, put columns Measurement spanner column label. can tab_spanner(). can two things make presentable: move Time columns beginning series (using cols_move_to_start()) customize column labels descriptive (using cols_label()) Let’s things next example. Note even though columns moved using cols_move_to_start(), spanner column labels still spanned correct column labels. number functions gt provides move columns, including cols_move(), cols_move_to_end(); ’s even function hide columns: cols_hide(). Multiple columns can renamed single use cols_label(). , helper functions md() html() can used create column labels additional styling. example, provided column labels HTML can insert linebreaks <br>, insert superscripted 2 (<sup>2<\/sup>), insert degree symbol HTML entity (&deg;).","code":"# Modify the `airquality` dataset by adding the year # of the measurements (1973) and limiting to 10 rows airquality_m <-    airquality |>   mutate(Year = 1973L) |>   slice(1:10)    # Create a display table using the `airquality` # dataset; arrange columns into groups gt_tbl <-    gt(airquality_m) |>   tab_header(     title = \"New York Air Quality Measurements\",     subtitle = \"Daily measurements in New York City (May 1-10, 1973)\"   ) |>   tab_spanner(     label = \"Time\",     columns = c(Year, Month, Day)   ) |>   tab_spanner(     label = \"Measurement\",     columns = c(Ozone, Solar.R, Wind, Temp)   )  # Show the gt table gt_tbl # Move the time-based columns to the start of # the column series; modify the column labels of # the measurement-based columns gt_tbl <-    gt_tbl |>   cols_move_to_start(     columns = c(Year, Month, Day)   ) |>   cols_label(     Ozone = html(\"Ozone,<br>ppbV\"),     Solar.R = html(\"Solar R.,<br>cal/m<sup>2<\/sup>\"),     Wind = html(\"Wind,<br>mph\"),     Temp = html(\"Temp,<br>&deg;F\")   )  # Show the gt table gt_tbl"},{"path":"https://gt.rstudio.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Richard Iannone. Author, maintainer. Joe Cheng. Author. Barret Schloerke. Author. Ellis Hughes. Author. Alexandra Lauer. Author. JooYoung Seo. Author. Ken Brevoort. Author. Olivier Roy. Author. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"https://gt.rstudio.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Iannone R, Cheng J, Schloerke B, Hughes E, Lauer , Seo J, Brevoort K, Roy O (2024). gt: Easily Create Presentation-Ready Display Tables. R package version 0.11.1.9000, https://github.com/rstudio/gt, https://gt.rstudio.com.","code":"@Manual{,   title = {gt: Easily Create Presentation-Ready Display Tables},   author = {Richard Iannone and Joe Cheng and Barret Schloerke and Ellis Hughes and Alexandra Lauer and JooYoung Seo and Ken Brevoort and Olivier Roy},   year = {2024},   note = {R package version 0.11.1.9000, https://github.com/rstudio/gt},   url = {https://gt.rstudio.com}, }"},{"path":"https://gt.rstudio.com/index.html","id":"installation","dir":"","previous_headings":"","what":"INSTALLATION","title":"Easily Create Presentation-Ready Display Tables","text":"gt package can installed CRAN : can also choose install development version gt GitHub: encounter bug, usage questions, want share ideas make package better, please feel free file issue.","code":"install.packages(\"gt\") devtools::install_github(\"rstudio/gt\")"},{"path":"https://gt.rstudio.com/index.html","id":"packages-that-use-or-extend-gt","dir":"","previous_headings":"","what":"Packages that use or extend gt","title":"Easily Create Presentation-Ready Display Tables","text":"several R packages either use gt generate tabular outputs extend gt amazing ways. short list great packages: gtsummary (GITHUB, WEBSITE) gtExtras (GITHUB, WEBSITE) pointblank (GITHUB, WEBSITE) tfrmt (GITHUB, WEBSITE) gto (GITHUB)","code":""},{"path":"https://gt.rstudio.com/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Easily Create Presentation-Ready Display Tables","text":"Please note gt project released contributor code conduct.participating project agree abide terms.","code":""},{"path":"https://gt.rstudio.com/index.html","id":"id_-license","dir":"","previous_headings":"","what":"📄 License","title":"Easily Create Presentation-Ready Display Tables","text":"gt licensed MIT license. See LICENSE.md file details. © Posit Software, PBC.","code":""},{"path":"https://gt.rstudio.com/index.html","id":"id_️-governance","dir":"","previous_headings":"","what":"🏛️ Governance","title":"Easily Create Presentation-Ready Display Tables","text":"project primarily maintained Rich Iannone. authors may occasionally assist duties.","code":""},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust the luminance for a palette of colors — adjust_luminance","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"adjust_luminance() function can brighten darken palette colors arbitrary number steps, defined real number -2.0 2.0. transformation palette fixed step function tend apply greater darkening lightening colors midrange compared dark light colors input palette.","code":""},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"","code":"adjust_luminance(colors, steps)"},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"colors Color vector vector<character> // required vector colors undergo adjustment luminance. color value provided must either color name (set colors provided grDevices::colors()) hexadecimal string form \"#RRGGBB\" \"#RRGGBBAA\". steps Adjustment level scalar<numeric|integer>(-2>=val>=2) // required positive negative factor luminance colors colors vector adjusted. Must number -2.0 2.0.","code":""},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"vector color values.","code":""},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"function can useful combined data_color() function's palette argument, can use vector colors col_* functions scales package (palette argument).","code":""},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"Get palette 8 pastel colors RColorBrewer package.   Create lighter darker variants base palette (one step lower, one step higher).   Create tibble make gt table . Color column order increasingly darker palettes (data_color()).","code":"pal <- RColorBrewer::brewer.pal(8, \"Pastel2\") pal_darker  <- pal |> adjust_luminance(-1.0) pal_lighter <- pal |> adjust_luminance(+1.0) dplyr::tibble(a = 1:8, b = 1:8, c = 1:8) |>   gt() |>   data_color(     columns = a,     colors = scales::col_numeric(       palette = pal_lighter,       domain = c(1, 8)     )   ) |>   data_color(     columns = b,     colors = scales::col_numeric(       palette = pal,       domain = c(1, 8)     )   ) |>   data_color(     columns = c,     colors = scales::col_numeric(       palette = pal_darker,       domain = c(1, 8)     )   )"},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"8-9","code":""},{"path":"https://gt.rstudio.com/reference/adjust_luminance.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Adjust the luminance for a palette of colors — adjust_luminance","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/as.data.frame.gt_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a gt object to a data frame — as.data.frame.gt_tbl","title":"Transform a gt object to a data frame — as.data.frame.gt_tbl","text":"facilitates conversion gt_tbl object data frame.","code":""},{"path":"https://gt.rstudio.com/reference/as.data.frame.gt_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a gt object to a data frame — as.data.frame.gt_tbl","text":"","code":"# S3 method for class 'gt_tbl' as.data.frame(x, ...)"},{"path":"https://gt.rstudio.com/reference/as.data.frame.gt_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a gt object to a data frame — as.data.frame.gt_tbl","text":"x gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. ... Optional parameters <multiple expressions> // (optional) Anything provided ... passed internal function calls can consume .","code":""},{"path":"https://gt.rstudio.com/reference/as_gtable.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a gt table to a gtable object — as_gtable","title":"Transform a gt table to a gtable object — as_gtable","text":"as_gtable() performs transformation gt_tbl object gtable object.","code":""},{"path":"https://gt.rstudio.com/reference/as_gtable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a gt table to a gtable object — as_gtable","text":"","code":"as_gtable(data, plot = FALSE, text_grob = grid::textGrob)"},{"path":"https://gt.rstudio.com/reference/as_gtable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a gt table to a gtable object — as_gtable","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. plot Render graphics device? scalar<logical> // default: FALSE plot option determines whether gtable object rendered graphics device. text_grob Function drawing text function // default: grid::textGrob function used draw text. Defaults grid::textGrob() can swapped gridtext::richtext_grob() better render HTML content.","code":""},{"path":"https://gt.rstudio.com/reference/as_gtable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a gt table to a gtable object — as_gtable","text":"gtable object.","code":""},{"path":"https://gt.rstudio.com/reference/as_gtable.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Transform a gt table to a gtable object — as_gtable","text":"13-6","code":""},{"path":"https://gt.rstudio.com/reference/as_gtable.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Transform a gt table to a gtable object — as_gtable","text":"v0.11.0 (July 9, 2024)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/as_latex.html","id":null,"dir":"Reference","previous_headings":"","what":"Output a gt object as LaTeX — as_latex","title":"Output a gt object as LaTeX — as_latex","text":"Get LaTeX content gt_tbl object knit_asis object. object contains LaTeX code attributes serve LaTeX dependencies (.e., LaTeX packages required table). Using .character() created object result single-element vector containing LaTeX code.","code":""},{"path":"https://gt.rstudio.com/reference/as_latex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output a gt object as LaTeX — as_latex","text":"","code":"as_latex(data)"},{"path":"https://gt.rstudio.com/reference/as_latex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output a gt object as LaTeX — as_latex","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function.","code":""},{"path":"https://gt.rstudio.com/reference/as_latex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Output a gt object as LaTeX — as_latex","text":"LaTeX packages required generate tables : booktabs, caption, longtable, colortbl, array, anyfontsize, multirow. event packages automatically added render phase document, please create include style file load . Inside document's YAML metadata, please include: gt_packages.sty file contain listed dependencies :","code":"output:   pdf_document: # Change to appropriate LaTeX template     includes:       in_header: 'gt_packages.sty' \\usepackage{booktabs, caption, longtable, colortbl, array}"},{"path":"https://gt.rstudio.com/reference/as_latex.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output a gt object as LaTeX — as_latex","text":"Use subset gtcars dataset create gt table. Add header tab_header() export table LaTeX code using as_latex() function.   returned knit_asis object, makes easy include R Markdown documents knit PDF. can use .character() get just LaTeX code single-element vector.","code":"tab_latex <-   gtcars |>   dplyr::select(mfr, model, msrp) |>   dplyr::slice(1:5) |>   gt() |>   tab_header(     title = md(\"Data listing from **gtcars**\"),     subtitle = md(\"`gtcars` is an R dataset\")   ) |>   as_latex()"},{"path":"https://gt.rstudio.com/reference/as_latex.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Output a gt object as LaTeX — as_latex","text":"13-3","code":""},{"path":"https://gt.rstudio.com/reference/as_latex.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Output a gt object as LaTeX — as_latex","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/as_raw_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the HTML content of a gt table — as_raw_html","title":"Get the HTML content of a gt table — as_raw_html","text":"Get HTML content gt_tbl object single-element character vector. default, generated HTML inlined styles, CSS styles (previously contained CSS rule sets external <table> element) included style attributes HTML table's tags. option preferable using output HTML table emailing context.","code":""},{"path":"https://gt.rstudio.com/reference/as_raw_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the HTML content of a gt table — as_raw_html","text":"","code":"as_raw_html(data, inline_css = TRUE)"},{"path":"https://gt.rstudio.com/reference/as_raw_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the HTML content of a gt table — as_raw_html","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. inline_css Use inline CSS scalar<logical> // default: TRUE option supply styles table elements inlined CSS styles. useful including table HTML part HTML email message body, since inlined styles largely supported email clients using CSS <style> block.","code":""},{"path":"https://gt.rstudio.com/reference/as_raw_html.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the HTML content of a gt table — as_raw_html","text":"Use subset gtcars dataset create gt table. Add header tab_header() export table HTML code inlined CSS styles using as_raw_html().   returned single-element vector containing HTML table. <table>...<\/table> part complete HTML document rather HTML fragment.","code":"tab_html <-   gtcars |>   dplyr::select(mfr, model, msrp) |>   dplyr::slice_head(n = 5) |>   gt() |>   tab_header(     title = md(\"Data listing from **gtcars**\"),     subtitle = md(\"`gtcars` is an R dataset\")   ) |>   as_raw_html()"},{"path":"https://gt.rstudio.com/reference/as_raw_html.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Get the HTML content of a gt table — as_raw_html","text":"13-2","code":""},{"path":"https://gt.rstudio.com/reference/as_raw_html.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Get the HTML content of a gt table — as_raw_html","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/as_rtf.html","id":null,"dir":"Reference","previous_headings":"","what":"Output a gt object as RTF — as_rtf","title":"Output a gt object as RTF — as_rtf","text":"Get RTF content gt_tbl object single-element character vector. object can used writeLines() generate valid .rtf file can opened RTF readers.","code":""},{"path":"https://gt.rstudio.com/reference/as_rtf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output a gt object as RTF — as_rtf","text":"","code":"as_rtf(   data,   incl_open = TRUE,   incl_header = TRUE,   incl_page_info = TRUE,   incl_body = TRUE,   incl_close = TRUE )"},{"path":"https://gt.rstudio.com/reference/as_rtf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output a gt object as RTF — as_rtf","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. incl_open, incl_close Include opening/closing braces scalar<logical> // default: TRUE Options govern whether opening closing \"{\" \"}\" included. default, options TRUE. incl_header Include RTF header scalar<logical> // default: TRUE RTF header included output? default, TRUE. incl_page_info Include RTF page information scalar<logical> // default: TRUE RTF output include directives document pages? TRUE default. incl_body Include RTF body scalar<logical> // default: TRUE option include body RTF document. default, TRUE.","code":""},{"path":"https://gt.rstudio.com/reference/as_rtf.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output a gt object as RTF — as_rtf","text":"Use subset gtcars dataset create gt table. Add header tab_header() export table RTF code using as_rtf() function.","code":"tab_rtf <-   gtcars |>   dplyr::select(mfr, model) |>   dplyr::slice(1:2) |>   gt() |>   tab_header(     title = md(\"Data listing from **gtcars**\"),     subtitle = md(\"`gtcars` is an R dataset\")   ) |>   as_rtf()"},{"path":"https://gt.rstudio.com/reference/as_rtf.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Output a gt object as RTF — as_rtf","text":"13-4","code":""},{"path":"https://gt.rstudio.com/reference/as_rtf.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Output a gt object as RTF — as_rtf","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/as_word.html","id":null,"dir":"Reference","previous_headings":"","what":"Output a gt object as Word — as_word","title":"Output a gt object as Word — as_word","text":"Get Open Office XML table tag content gt_tbl object single-element character vector.","code":""},{"path":"https://gt.rstudio.com/reference/as_word.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output a gt object as Word — as_word","text":"","code":"as_word(   data,   align = \"center\",   caption_location = c(\"top\", \"bottom\", \"embed\"),   caption_align = \"left\",   split = FALSE,   keep_with_next = TRUE )"},{"path":"https://gt.rstudio.com/reference/as_word.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output a gt object as Word — as_word","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. align Table alignment scalar<character> // default: \"center\" option table alignment. Can either \"center\", \"left\", \"right\". caption_location Caption location singl-kw:[top|bottom|embed] // default: \"top\" Determines caption positioned. can either \"top\", \"bottom\", \"embed\". caption_align Caption alignment Determines alignment caption. either \"left\" (default), \"center\", \"right\". option used caption_location set \"embed\". split Allow splitting table row across pages scalar<logical> // default: FALSE logical value indicates whether activate Word option Allow row break across pages. keep_with_next Keeping rows together scalar<logical> // default: TRUE logical value indicates whether table use Word option Keep rows together.","code":""},{"path":"https://gt.rstudio.com/reference/as_word.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output a gt object as Word — as_word","text":"Use subset gtcars dataset create gt table. Add header tab_header() export table OOXML code Word using as_word()","code":"tab_rtf <-   gtcars |>   dplyr::select(mfr, model) |>   dplyr::slice(1:2) |>   gt() |>   tab_header(     title = md(\"Data listing from **gtcars**\"),     subtitle = md(\"`gtcars` is an R dataset\")   ) |>   as_word()"},{"path":"https://gt.rstudio.com/reference/as_word.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Output a gt object as Word — as_word","text":"13-5","code":""},{"path":"https://gt.rstudio.com/reference/as_word.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Output a gt object as Word — as_word","text":"v0.7.0 (August 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cell_borders.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for defining custom borders for table cells — cell_borders","title":"Helper for defining custom borders for table cells — cell_borders","text":"cell_borders() used tab_style(), allows setting custom styles one cells. Specifically, call cell_borders() bound styles argument tab_style(). sides argument define borders modified (e.g., \"left\", \"right\", etc.). selection, color, style, weight selected borders can modified.","code":""},{"path":"https://gt.rstudio.com/reference/cell_borders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for defining custom borders for table cells — cell_borders","text":"","code":"cell_borders(sides = \"all\", color = \"#000000\", style = \"solid\", weight = px(1))"},{"path":"https://gt.rstudio.com/reference/cell_borders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for defining custom borders for table cells — cell_borders","text":"sides Border sides vector<character> // default: \"\" border sides modified. Options include \"left\", \"right\", \"top\", \"bottom\". borders surrounding selected cells, can use \"\" option. color Border color scalar<character>|NULL // default: \"#000000\" border color can defined color name hexadecimal color code. default color value \"#000000\" (black). Borders defined sides can removed supplying NULL . style Border line style scalar<character>|NULL // default: \"solid\" border style can one either \"solid\" (default), \"dashed\", \"dotted\", \"hidden\", \"double\". Borders defined sides can removed supplying NULL . weight Border weight scalar<character>|NULL // default: px(1) default value weight \"1px\" higher values become visually prominent. Borders defined sides can removed supplying NULL color, style, weight.","code":""},{"path":"https://gt.rstudio.com/reference/cell_borders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for defining custom borders for table cells — cell_borders","text":"list object class cell_styles.","code":""},{"path":"https://gt.rstudio.com/reference/cell_borders.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper for defining custom borders for table cells — cell_borders","text":"can add horizontal border lines table body rows gt table based exibble dataset. , need use tab_style() (targeting cells table body cells_body()) conjunction cell_borders() style argument. top bottom borders added \"solid\" \"red\" lines line width 1.5 px.    possible incorporate different horizontal vertical (\"left\" \"right\") borders several different locations. uses multiple cell_borders() cells_body() calls within respective lists.","code":"exibble |>   gt() |>   tab_style(     style = cell_borders(       sides = c(\"top\", \"bottom\"),       color = \"red\",       weight = px(1.5),       style = \"solid\"     ),     locations = cells_body()   ) exibble |>   gt() |>   tab_style(     style = list(       cell_borders(         sides = c(\"top\", \"bottom\"),         color = \"#FF0000\",         weight = px(2)       ),       cell_borders(         sides = c(\"left\", \"right\"),         color = \"#0000FF\",         weight = px(2)       )     ),     locations = list(       cells_body(         columns = num,         rows = is.na(num)       ),       cells_body(         columns = currency,         rows = is.na(currency)       )     )   )"},{"path":"https://gt.rstudio.com/reference/cell_borders.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper for defining custom borders for table cells — cell_borders","text":"8-27","code":""},{"path":"https://gt.rstudio.com/reference/cell_borders.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Helper for defining custom borders for table cells — cell_borders","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cell_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for defining custom fills for table cells — cell_fill","title":"Helper for defining custom fills for table cells — cell_fill","text":"cell_fill() used tab_style(), allows setting custom styles one cells. Specifically, call cell_fill() bound styles argument tab_style().","code":""},{"path":"https://gt.rstudio.com/reference/cell_fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for defining custom fills for table cells — cell_fill","text":"","code":"cell_fill(color = \"#D3D3D3\", alpha = NULL)"},{"path":"https://gt.rstudio.com/reference/cell_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for defining custom fills for table cells — cell_fill","text":"color Cell fill color scalar<character> // default: \"#D3D3D3\" nothing provided color \"#D3D3D3\" (light gray) used default. alpha Transparency value scalar<numeric|integer>(0>=val>=1) // default: NULL (optional) optional alpha transparency value color single value range 0 (fully transparent) 1 (fully opaque). provided fill color either fully opaque use alpha information color value supplied #RRGGBBAA format.","code":""},{"path":"https://gt.rstudio.com/reference/cell_fill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for defining custom fills for table cells — cell_fill","text":"list object class cell_styles.","code":""},{"path":"https://gt.rstudio.com/reference/cell_fill.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper for defining custom fills for table cells — cell_fill","text":"use exibble dataset create simple, two-column gt table (keeping num currency columns). Styles added tab_style() two separate calls (targeting different body cells cells_body() helper function). cell_fill() helper function define cells \"lightblue\" background one instance, \"gray85\" .","code":"exibble |>   dplyr::select(num, currency) |>   gt() |>   fmt_number(decimals = 1) |>   tab_style(     style = cell_fill(color = \"lightblue\"),     locations = cells_body(       columns = num,       rows = num >= 5000     )   ) |>   tab_style(     style = cell_fill(color = \"gray85\"),     locations = cells_body(       columns = currency,       rows = currency < 100     )   )"},{"path":"https://gt.rstudio.com/reference/cell_fill.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper for defining custom fills for table cells — cell_fill","text":"8-26","code":""},{"path":"https://gt.rstudio.com/reference/cell_fill.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Helper for defining custom fills for table cells — cell_fill","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cell_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for defining custom text styles for table cells — cell_text","title":"Helper for defining custom text styles for table cells — cell_text","text":"helper function can used tab_style(), allows setting custom styles one cells. can also define several styles within single call cell_text() tab_style() reliably apply styles targeted element.","code":""},{"path":"https://gt.rstudio.com/reference/cell_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for defining custom text styles for table cells — cell_text","text":"","code":"cell_text(   color = NULL,   font = NULL,   size = NULL,   align = NULL,   v_align = NULL,   style = NULL,   weight = NULL,   stretch = NULL,   decorate = NULL,   transform = NULL,   whitespace = NULL,   indent = NULL )"},{"path":"https://gt.rstudio.com/reference/cell_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for defining custom text styles for table cells — cell_text","text":"color Text color scalar<character> // default: NULL (optional) text color can modified color argument. font Font (collection fonts) used text vector<character> // default: NULL (optional) font collection fonts (subsequent font names ) used fallbacks. size Text size scalar<numeric|integer|character> // default: NULL (optional) size font. Can provided number assumed represent px values (wrapped px() helper function). can also use one following absolute size keywords: \"xx-small\", \"x-small\", \"small\", \"medium\", \"large\", \"x-large\", \"xx-large\". align Text alignment scalar<character> // default: NULL (optional) text cell can horizontally aligned though one following options: \"center\", \"left\", \"right\", \"justify\". v_align Vertical alignment scalar<character> // default: NULL (optional) vertical alignment text cell can modified options \"middle\", \"top\", \"bottom\". style Text style scalar<character> // default: NULL (optional) Can one either \"normal\", \"italic\", \"oblique\". weight Font weight scalar<character|numeric|integer> // default: NULL (optional) weight font can modified thorough text-based option \"normal\", \"bold\", \"lighter\", \"bolder\", , numeric value 1 1000, inclusive. Note variable fonts may support numeric mapping weight. stretch Stretch text scalar<character> // default: NULL (optional) Allows text either condensed expanded. can use one following text-based keywords describe degree condensation/expansion: \"ultra-condensed\", \"extra-condensed\", \"condensed\", \"semi-condensed\", \"normal\", \"semi-expanded\", \"expanded\", \"extra-expanded\", \"ultra-expanded\". Alternatively, can supply percentage values 0\\% 200\\%, inclusive. Negative percentage values allowed. decorate Decorate text scalar<character> // default: NULL (optional) Allows text decoration effect applied. , can use \"overline\", \"line-\", \"underline\". transform Transform text scalar<character> // default: NULL (optional) Allows transformation text. Options \"uppercase\", \"lowercase\", \"capitalize\". whitespace White-space options scalar<character> // default: NULL (optional) white-space preservation option. default, runs white-space collapsed single spaces several options exist govern white-space collapsed lines might wrap soft-wrap opportunities. options \"normal\", \"nowrap\", \"pre\", \"pre-wrap\", \"pre-line\", \"break-spaces\". indent Text indentation scalar<numeric|integer|character> // default: NULL (optional) indentation text. Can provided number assumed represent px values (wrapped px() helper function). Alternatively, can given percentage (easily constructed pct()).","code":""},{"path":"https://gt.rstudio.com/reference/cell_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for defining custom text styles for table cells — cell_text","text":"list object class cell_styles.","code":""},{"path":"https://gt.rstudio.com/reference/cell_text.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper for defining custom text styles for table cells — cell_text","text":"use exibble dataset create simple, two-column gt table (keeping num currency columns). tab_style() (called twice), selectively add style values formatted fmt_number(). using cell_text() style argument tab_style().","code":"exibble |>   dplyr::select(num, currency) |>   gt() |>   fmt_number(decimals = 1) |>   tab_style(     style = cell_text(weight = \"bold\"),     locations = cells_body(       columns = num,       rows = num >= 5000     )   ) |>   tab_style(     style = cell_text(style = \"italic\"),     locations = cells_body(       columns = currency,       rows = currency < 100     )   )"},{"path":"https://gt.rstudio.com/reference/cell_text.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper for defining custom text styles for table cells — cell_text","text":"8-25","code":""},{"path":"https://gt.rstudio.com/reference/cell_text.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Helper for defining custom text styles for table cells — cell_text","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting data cells in the table body — cells_body","title":"Location helper for targeting data cells in the table body — cells_body","text":"cells_body() used target data cells table body. function can used apply footnote tab_footnote(), add custom styling tab_style(), transform targeted cells text_transform(). function expressly used functions' locations argument. 'body' location present default every gt table.","code":""},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting data cells in the table body — cells_body","text":"","code":"cells_body(columns = everything(), rows = everything())"},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting data cells in the table body — cells_body","text":"columns Columns target <column-targeting expression> // default: everything() columns targeting operations constrained. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows form constraint targeting operations. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50).","code":""},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting data cells in the table body — cells_body","text":"list object classes cells_body location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":"targeting-cells-with-columns-and-rows","dir":"Reference","previous_headings":"","what":"Targeting cells with columns and rows","title":"Location helper for targeting data cells in the table body — cells_body","text":"Targeting values done columns additionally rows (nothing provided rows entire columns selected). columns argument allows us target subset cells contained resolved columns. say resolved aside declaring column names c() (bare column names names quotes) can use tidyselect-style expressions. can basic supplying select helper like starts_with(), , providing complex incantation like (~ .numeric(.x) & max(.x, na.rm = TRUE) > 1E6) targets numeric columns maximum value greater 1,000,000 (excluding NAs consideration). columns targeted, may also target rows within columns. can done variety ways. stub present, potentially row identifiers. can used much like column names columns-targeting scenario. can use simpler tidyselect-style expressions (select helpers work well ) can use quoted row identifiers c(). also possible use row indices (e.g., c(3, 5, 6)) though index values must correspond row numbers input data (indices necessarily match rearranged rows row groups present). One type expression possible, expression takes column values (can involve available columns table) returns logical vector.","code":""},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting data cells in the table body — cells_body","text":"use subset gtcars dataset create gt table. Add footnote (tab_footnote()) targets single data cell via use cells_body() locations (rows = hp == max(hp) target single row hp column).","code":"gtcars |>   dplyr::filter(ctry_origin == \"United Kingdom\") |>   dplyr::select(mfr, model, year, hp) |>   gt() |>   tab_footnote(     footnote = \"Highest horsepower.\",     locations = cells_body(       columns = hp,       rows = hp == max(hp)     ),     placement = \"right\"   ) |>   opt_footnote_marks(marks = c(\"*\", \"+\"))"},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting data cells in the table body — cells_body","text":"8-18","code":""},{"path":"https://gt.rstudio.com/reference/cells_body.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Location helper for targeting data cells in the table body — cells_body","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the column labels — cells_column_labels","title":"Location helper for targeting the column labels — cells_column_labels","text":"cells_column_labels() used target table's column labels applying footnote tab_footnote() adding custom style tab_style(). function expressly used functions' locations argument. 'column_labels' location present default every gt table.","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the column labels — cells_column_labels","text":"","code":"cells_column_labels(columns = everything())"},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting the column labels — cells_column_labels","text":"columns Columns target <column-targeting expression> // default: everything() columns targeting operations constrained. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()).","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the column labels — cells_column_labels","text":"list object classes cells_column_labels location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":"targeting-columns-with-the-columns-argument","dir":"Reference","previous_headings":"","what":"Targeting columns with the columns argument","title":"Location helper for targeting the column labels — cells_column_labels","text":"columns argument allows us target subset columns contained table. can declare column names c() (bare column names names quotes) can use tidyselect-style expressions. can basic supplying select helper like starts_with(), , providing complex incantation like (~ .numeric(.x) & max(.x, na.rm = TRUE) > 1E6) targets numeric columns maximum value greater 1,000,000 (excluding NAs consideration).","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the column labels — cells_column_labels","text":"use small portion sza dataset create gt table. Add footnotes column labels tab_footnote() cells_column_labels() locations.","code":"sza |>   dplyr::filter(     latitude == 20 & month == \"jan\" &       !is.na(sza)   ) |>   dplyr::select(-latitude, -month) |>   gt() |>   tab_footnote(     footnote = \"True solar time.\",     locations = cells_column_labels(       columns = tst     )   ) |>   tab_footnote(     footnote = \"Solar zenith angle.\",     locations = cells_column_labels(       columns = sza     )   )"},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the column labels — cells_column_labels","text":"8-15","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_labels.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Location helper for targeting the column labels — cells_column_labels","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_column_spanners.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the column spanners — cells_column_spanners","title":"Location helper for targeting the column spanners — cells_column_spanners","text":"cells_column_spanners() used target cells contain table column spanners. useful applying footnote tab_footnote() adding custom style tab_style(). function expressly used functions' locations argument. 'column_spanners' location generated one uses tab_spanner() tab_spanner_delim().","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_spanners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the column spanners — cells_column_spanners","text":"","code":"cells_column_spanners(spanners = everything(), levels = NULL)"},{"path":"https://gt.rstudio.com/reference/cells_column_spanners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting the column spanners — cells_column_spanners","text":"spanners Specification spanner IDs <spanner-targeting expression> // default: everything() spanners targeting operations constrained. Can either series spanner ID values provided c() select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). levels *Specification spanner levels * scalar|vector<numerical> // default: NULL existing spanner levels (1, 2, ...) targeting operations constrained. Use NULL refer existing levels.","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_spanners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the column spanners — cells_column_spanners","text":"list object classes cells_column_spanners location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_spanners.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the column spanners — cells_column_spanners","text":"Use exibble dataset create gt table. add spanner column label three columns (date, time, datetime) tab_spanner(). spanner column label can styled tab_style() using cells_column_spanners() function locations. example, making text column spanner label appear bold.    Use exibble dataset create gt table. add two spanners column combinations (num, char) time related columns (time datetime). Furthermore add another level spanners column label date- time related  columns (date, time, datetime). want spanner labels \"time\" name bold. Additionally want text red spanner time- related level 1.","code":"exibble |>   dplyr::select(-fctr, -currency, -group) |>   gt(rowname_col = \"row\") |>   tab_spanner(     label = \"dates and times\",     columns = c(date, time, datetime),     id = \"dt\"   ) |>   tab_style(     style = cell_text(weight = \"bold\"),     locations = cells_column_spanners(spanners = \"dt\")   ) exibble |>   dplyr::select(-fctr, -currency, -group) |>   gt(rowname_col = \"row\") |>   tab_spanner(     label = \"time related cols\",     columns = c(datetime, time)   ) |>   tab_spanner(     label = \"num and char\",     columns = c(num, char)   ) |>   tab_spanner(     label = \"date and time cols\",     columns = c(date, time, datetime)   ) |>   tab_style(     style = cell_text(weight = \"bold\"),     locations = cells_column_spanners(spanners = tidyselect::contains(\"time\"))   ) |>   tab_style(     style = cell_text(color = \"red\"),     locations = cells_column_spanners(       spanners = tidyselect::contains(\"time\"),       levels = 1     )   )"},{"path":"https://gt.rstudio.com/reference/cells_column_spanners.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the column spanners — cells_column_spanners","text":"8-14","code":""},{"path":"https://gt.rstudio.com/reference/cells_column_spanners.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Location helper for targeting the column spanners — cells_column_spanners","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_footnotes.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the footnotes — cells_footnotes","title":"Location helper for targeting the footnotes — cells_footnotes","text":"cells_footnotes() used target footnotes footer section table. useful adding custom styles footnotes tab_style() (using locations argument). 'footnotes' location generated one uses tab_footnote(). location helper function used locations argument tab_footnote() result warning (change made table).","code":""},{"path":"https://gt.rstudio.com/reference/cells_footnotes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the footnotes — cells_footnotes","text":"","code":"cells_footnotes()"},{"path":"https://gt.rstudio.com/reference/cells_footnotes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the footnotes — cells_footnotes","text":"list object classes cells_footnotes location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_footnotes.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the footnotes — cells_footnotes","text":"Using subset sza dataset, create gt table. like color sza column done data_color() function. can add footnote tab_footnote() can also style footnotes section. styling done tab_style() locations = cells_footnotes().","code":"sza |>   dplyr::filter(     latitude == 20 &       month == \"jan\" &       !is.na(sza)   ) |>   dplyr::select(-latitude, -month) |>   gt() |>   data_color(     columns = sza,     palette = c(\"white\", \"yellow\", \"navyblue\"),     domain = c(0, 90)   ) |>   tab_footnote(     footnote = \"Color indicates height of sun.\",     locations = cells_column_labels(columns = sza)   ) |>   tab_options(table.width = px(320)) |>   tab_style(     style = list(       cell_text(size = \"smaller\"),       cell_fill(color = \"gray90\")       ),     locations = cells_footnotes()   )"},{"path":"https://gt.rstudio.com/reference/cells_footnotes.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the footnotes — cells_footnotes","text":"8-23","code":""},{"path":"https://gt.rstudio.com/reference/cells_footnotes.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Location helper for targeting the footnotes — cells_footnotes","text":"v0.3.0 (May 12, 2021)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting cells in a grand summary — cells_grand_summary","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"cells_grand_summary() used target cells grand summary useful applying footnote tab_footnote() adding custom styles tab_style(). function expressly used functions' locations argument. 'grand_summary' location generated grand_summary_rows().","code":""},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"","code":"cells_grand_summary(columns = everything(), rows = everything())"},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"columns Columns target <column-targeting expression> // default: everything() columns targeting operations constrained. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows form constraint targeting operations. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50).","code":""},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"list object classes cells_grand_summary location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":"targeting-cells-with-columns-and-rows","dir":"Reference","previous_headings":"","what":"Targeting cells with columns and rows","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"Targeting grand summary cells done columns rows arguments. columns argument allows us target subset grand summary cells contained resolved columns. say resolved aside declaring column names c() (bare column names names quotes) can use tidyselect-style expressions. can basic supplying select helper like starts_with(), , providing complex incantation like (~ .numeric(.x) & max(.x, na.rm = TRUE) > 1E6) targets numeric columns maximum value greater 1,000,000 (excluding NAs consideration). columns targeted, may also target rows grand summary. Grand summary cells stub ID values can used much like column names columns-targeting scenario. can use simpler tidyselect-style expressions (select helpers work well ) can use quoted row identifiers c(). also possible use row indices (e.g., c(3, 5, 6)) correspond row number grand summary row.","code":""},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"Use portion countrypops dataset create gt table. Add styling grand summary cells tab_style() cells_grand_summary() locations argument.","code":"countrypops |>   dplyr::filter(country_name == \"Spain\", year < 1970) |>   dplyr::select(-contains(\"country\")) |>   gt(rowname_col = \"year\") |>   fmt_number(     columns = population,     decimals = 0   ) |>   grand_summary_rows(     columns = population,     fns = change ~ max(.) - min(.),     fmt = ~ fmt_integer(.)   ) |>   tab_style(     style = list(       cell_text(style = \"italic\"),       cell_fill(color = \"lightblue\")     ),     locations = cells_grand_summary(       columns = population,       rows = 1     )   )"},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"8-20","code":""},{"path":"https://gt.rstudio.com/reference/cells_grand_summary.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Location helper for targeting cells in a grand summary — cells_grand_summary","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting row groups (deprecated) — cells_group","title":"Location helper for targeting row groups (deprecated) — cells_group","text":"Location helper targeting row groups (deprecated)","code":""},{"path":"https://gt.rstudio.com/reference/cells_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting row groups (deprecated) — cells_group","text":"","code":"cells_group(groups = everything())"},{"path":"https://gt.rstudio.com/reference/cells_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting row groups (deprecated) — cells_group","text":"groups Specification row group IDs <row-group-targeting expression> // default: everything() row groups targeting operations constrained. Can either series row group ID values provided c() select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()).","code":""},{"path":"https://gt.rstudio.com/reference/cells_group.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Location helper for targeting row groups (deprecated) — cells_group","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting row groups — cells_row_groups","title":"Location helper for targeting row groups — cells_row_groups","text":"cells_row_groups() used target table's row groups applying footnote tab_footnote() adding custom style tab_style(). function expressly used functions' locations argument. 'row_groups' location can generated specifying groupname_col gt(), introducing grouped data gt() (via dplyr::group_by()), , specifying groups tab_row_group().","code":""},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting row groups — cells_row_groups","text":"","code":"cells_row_groups(groups = everything())"},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting row groups — cells_row_groups","text":"groups Specification row group IDs <row-group-targeting expression> // default: everything() row groups targeting operations constrained. Can either series row group ID values provided c() select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()).","code":""},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting row groups — cells_row_groups","text":"list object classes cells_row_groups location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":"targeting-cells-with-groups","dir":"Reference","previous_headings":"","what":"Targeting cells with groups","title":"Location helper for targeting row groups — cells_row_groups","text":"default groups set everything(), means available groups considered. Providing ID values (quotes) row groups c() serve constrain targeting subset groups.","code":""},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting row groups — cells_row_groups","text":"use summarized version pizzaplace dataset create gt table grouped data. Add summary summary_rows() add footnote \"peppr_salami\" row group label tab_footnote(); targeting done cells_row_groups() locations argument.","code":"pizzaplace |>   dplyr::filter(name %in% c(\"soppressata\", \"peppr_salami\")) |>   dplyr::group_by(name, size) |>   dplyr::summarize(`Pizzas Sold` = dplyr::n(), .groups = \"drop\") |>   gt(rowname_col = \"size\", groupname_col = \"name\") |>   summary_rows(     columns = `Pizzas Sold`,     fns = list(label = \"TOTAL\", fn = \"sum\"),     fmt = ~ fmt_integer(.)   ) |>   tab_footnote(     footnote = \"The Pepper-Salami.\",     cells_row_groups(groups = \"peppr_salami\")   )"},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting row groups — cells_row_groups","text":"8-16","code":""},{"path":"https://gt.rstudio.com/reference/cells_row_groups.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Location helper for targeting row groups — cells_row_groups","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_source_notes.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the source notes — cells_source_notes","title":"Location helper for targeting the source notes — cells_source_notes","text":"cells_source_notes() used target source notes footer section table. useful adding custom styles source notes tab_style() (using locations argument). 'source_notes' location generated tab_source_note().","code":""},{"path":"https://gt.rstudio.com/reference/cells_source_notes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the source notes — cells_source_notes","text":"","code":"cells_source_notes()"},{"path":"https://gt.rstudio.com/reference/cells_source_notes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the source notes — cells_source_notes","text":"list object classes cells_source_notes location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_source_notes.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the source notes — cells_source_notes","text":"use subset gtcars dataset create gt table. Add source note (tab_source_note()) style source notes section inside tab_style() locations = cells_source_notes().","code":"gtcars |>   dplyr::select(mfr, model, msrp) |>   dplyr::slice(1:5) |>   gt() |>   tab_source_note(source_note = \"From edmunds.com\") |>   tab_style(     style = cell_text(       color = \"#A9A9A9\",       size = \"small\"     ),     locations = cells_source_notes()   )"},{"path":"https://gt.rstudio.com/reference/cells_source_notes.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the source notes — cells_source_notes","text":"8-24","code":""},{"path":"https://gt.rstudio.com/reference/cells_source_notes.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Location helper for targeting the source notes — cells_source_notes","text":"v0.3.0 (May 12, 2021)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_stub.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting cells in the table stub — cells_stub","title":"Location helper for targeting cells in the table stub — cells_stub","text":"cells_stub() used target table's stub cells useful applying footnote tab_footnote() adding custom style tab_style(). function expressly used functions' locations argument. several ways stub location might available gt table: (1) specification rowname_col gt(), (2) introducing data frame row names gt() rownames_to_stub = TRUE, (3) using summary_rows() grand_summary_rows() neither previous two conditions true.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting cells in the table stub — cells_stub","text":"","code":"cells_stub(rows = everything())"},{"path":"https://gt.rstudio.com/reference/cells_stub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting cells in the table stub — cells_stub","text":"rows Rows target <row-targeting expression> // default: everything() rows targeting operations constrained. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50).","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting cells in the table stub — cells_stub","text":"list object classes cells_stub location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting cells in the table stub — cells_stub","text":"Using transformed version sza dataset, create gt table. Color month values table stub tab_style(), using cells_stub() locations.","code":"sza |>   dplyr::filter(latitude == 20 & tst <= \"1000\") |>   dplyr::select(-latitude) |>   dplyr::filter(!is.na(sza)) |>   tidyr::spread(key = \"tst\", value = sza) |>   gt(rowname_col = \"month\") |>   sub_missing(missing_text = \"\") |>   tab_style(     style = list(       cell_fill(color = \"darkblue\"),       cell_text(color = \"white\")       ),     locations = cells_stub()   )"},{"path":"https://gt.rstudio.com/reference/cells_stub.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting cells in the table stub — cells_stub","text":"8-17","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Location helper for targeting cells in the table stub — cells_stub","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"cells_stub_grand_summary() used target stub cells grand summary useful applying footnote tab_footnote() adding custom styles tab_style(). function expressly used functions' locations argument. 'stub_grand_summary' location generated grand_summary_rows().","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"","code":"cells_stub_grand_summary(rows = everything())"},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"rows Rows target <row-targeting expression> // default: everything() can specify rows targeted. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50).","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"list object classes cells_stub_grand_summary location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":"targeting-grand-summary-stub-cells-with-rows","dir":"Reference","previous_headings":"","what":"Targeting grand summary stub cells with rows","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"Targeting stub cells grand summary row done rows argument. Grand summary cells stub ID values can used much like column names columns-targeting scenario. can use simpler tidyselect-style expressions (select helpers work well ) can use quoted row identifiers c(). also possible use row indices (e.g., c(3, 5, 6)) correspond row number grand summary row.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"Use portion countrypops dataset create gt table. Add styling grand summary stub cell tab_style() using cells_stub_grand_summary() locations argument.","code":"countrypops |>   dplyr::filter(country_name == \"Spain\", year < 1970) |>   dplyr::select(-contains(\"country\")) |>   gt(rowname_col = \"year\") |>   fmt_number(     columns = population,     decimals = 0   ) |>   grand_summary_rows(     columns = population,     fns = list(change = ~max(.) - min(.)),     fmt = ~ fmt_integer(.)   ) |>   tab_style(     style = cell_text(weight = \"bold\", transform = \"uppercase\"),     locations = cells_stub_grand_summary(rows = \"change\")   )"},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"8-22","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_grand_summary.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Location helper for targeting the stub cells in a grand summary — cells_stub_grand_summary","text":"v0.3.0 (May 12, 2021)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the stub cells in a summary — cells_stub_summary","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"cells_stub_summary() used target stub cells summary useful applying footnote tab_footnote() adding custom styles tab_style(). function expressly used functions' locations argument. 'stub_summary' location generated summary_rows().","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"","code":"cells_stub_summary(groups = everything(), rows = everything())"},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"groups Specification row group IDs <row-group-targeting expression> // default: everything() row groups targeting operations constrained. Can either series row group ID values provided c() select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). rows Rows target <row-targeting expression> // default: everything() conjunction groups, can specify rows form constraint targeting operations. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50).","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"list object classes cells_stub_summary location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":"targeting-summary-stub-cells-with-groups-and-rows","dir":"Reference","previous_headings":"","what":"Targeting summary stub cells with groups and rows","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"Targeting stub cells group summary rows done groups rows arguments. default groups set everything(), means available groups considered. Providing ID values (quotes) row groups c() serve constrain targeting subset groups. groups targeted, may also target rows summary. Summary cells stub ID values can used much like column names columns-targeting scenario. can use simpler tidyselect-style expressions (select helpers work well ) can use quoted row identifiers c(). also possible use row indices (e.g., c(3, 5, 6)) correspond row number summary row row group (numbering restarts every row group).","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"Use portion countrypops dataset create gt table. Add styling summary data stub cells tab_style() cells_stub_summary() locations argument.","code":"countrypops |>   dplyr::filter(country_name == \"Japan\", year < 1970) |>   dplyr::select(-contains(\"country\")) |>   dplyr::mutate(decade = paste0(substr(year, 1, 3), \"0s\")) |>   gt(     rowname_col = \"year\",     groupname_col = \"decade\"   ) |>   fmt_integer(columns = population) |>   summary_rows(     groups = \"1960s\",     columns = population,     fns = list(\"min\", \"max\"),     fmt = ~ fmt_integer(.)   ) |>   tab_style(     style = list(       cell_text(         weight = \"bold\",         transform = \"capitalize\"       ),       cell_fill(         color = \"lightblue\",         alpha = 0.5       )     ),     locations = cells_stub_summary(       groups = \"1960s\"     )   )"},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"8-21","code":""},{"path":"https://gt.rstudio.com/reference/cells_stub_summary.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Location helper for targeting the stub cells in a summary — cells_stub_summary","text":"v0.3.0 (May 12, 2021)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_stubhead.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the table stubhead cell — cells_stubhead","title":"Location helper for targeting the table stubhead cell — cells_stubhead","text":"cells_stubhead() used target table stubhead location applying footnote tab_footnote() adding custom style tab_style(). function expressly used functions' locations argument. 'stubhead' location always present alongside 'stub' location.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stubhead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the table stubhead cell — cells_stubhead","text":"","code":"cells_stubhead()"},{"path":"https://gt.rstudio.com/reference/cells_stubhead.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the table stubhead cell — cells_stubhead","text":"list object classes cells_stubhead location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_stubhead.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the table stubhead cell — cells_stubhead","text":"Using summarized version pizzaplace dataset, create gt table. Add stubhead label tab_stubhead() style tab_style() conjunction use cells_stubhead() locations argument.","code":"pizzaplace |>   dplyr::mutate(month = as.numeric(substr(date, 6, 7))) |>   dplyr::group_by(month, type) |>   dplyr::summarize(sold = dplyr::n(), .groups = \"drop\") |>   dplyr::filter(month %in% 1:2) |>   gt(rowname_col = \"type\") |>   tab_stubhead(label = \"type\") |>   tab_style(     style = cell_fill(color = \"lightblue\"),     locations = cells_stubhead()   )"},{"path":"https://gt.rstudio.com/reference/cells_stubhead.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the table stubhead cell — cells_stubhead","text":"8-13","code":""},{"path":"https://gt.rstudio.com/reference/cells_stubhead.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Location helper for targeting the table stubhead cell — cells_stubhead","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting group summary cells — cells_summary","title":"Location helper for targeting group summary cells — cells_summary","text":"cells_summary() used target cells group summary useful applying footnote tab_footnote() adding custom style tab_style(). function expressly used functions' locations argument. 'summary' location generated summary_rows().","code":""},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting group summary cells — cells_summary","text":"","code":"cells_summary(   groups = everything(),   columns = everything(),   rows = everything() )"},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting group summary cells — cells_summary","text":"groups Specification row group IDs <row-group-targeting expression> // default: everything() row groups targeting operations constrained. aids targeting summary rows reside certain row groups. Can either series row group ID values provided c() select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything(). columns Columns target <column-targeting expression> // default: everything() columns targeting operations constrained. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows form constraint targeting operations. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50).","code":""},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting group summary cells — cells_summary","text":"list object classes cells_summary location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":"targeting-cells-with-columns-rows-and-groups","dir":"Reference","previous_headings":"","what":"Targeting cells with columns, rows, and groups","title":"Location helper for targeting group summary cells — cells_summary","text":"Targeting summary cells done groups, columns, rows arguments. default groups set everything(), means available groups considered. Providing ID values (quotes) row groups c() serve constrain targeting subset groups. columns argument allows us target subset summary cells contained resolved columns. say resolved aside declaring column names c() (bare column names names quotes) can use tidyselect-style expressions. can basic supplying select helper like starts_with(), , providing complex incantation like (~ .numeric(.x) & max(.x, na.rm = TRUE) > 1E6) targets numeric columns maximum value greater 1,000,000 (excluding NAs consideration). groups columns targeted, may also target rows summary. Summary cells stub ID values can used much like column names columns-targeting scenario. can use simpler tidyselect-style expressions (select helpers work well ) can use quoted row identifiers c(). also possible use row indices (e.g., c(3, 5, 6)) correspond row number summary row row group (numbering restarts every row group).","code":""},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting group summary cells — cells_summary","text":"Use portion countrypops dataset create gt table. Add styling summary data cells tab_style(), using cells_summary() locations argument.","code":"countrypops |>   dplyr::filter(country_name == \"Japan\", year < 1970) |>   dplyr::select(-contains(\"country\")) |>   dplyr::mutate(decade = paste0(substr(year, 1, 3), \"0s\")) |>   gt(     rowname_col = \"year\",     groupname_col = \"decade\"   ) |>   fmt_number(     columns = population,     decimals = 0   ) |>   summary_rows(     groups = \"1960s\",     columns = population,     fns = list(\"min\", \"max\"),     fmt = ~ fmt_integer(.)   ) |>   tab_style(     style = list(       cell_text(style = \"italic\"),       cell_fill(color = \"lightblue\")     ),     locations = cells_summary(       groups = \"1960s\",       columns = population,       rows = 1     )   ) |>   tab_style(     style = list(       cell_text(style = \"italic\"),       cell_fill(color = \"lightgreen\")     ),     locations = cells_summary(       groups = \"1960s\",       columns = population,       rows = 2     )   )"},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting group summary cells — cells_summary","text":"8-19","code":""},{"path":"https://gt.rstudio.com/reference/cells_summary.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Location helper for targeting group summary cells — cells_summary","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cells_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Location helper for targeting the table title and subtitle — cells_title","title":"Location helper for targeting the table title and subtitle — cells_title","text":"cells_title() used target table title subtitle applying footnote tab_footnote() adding custom style tab_style(). function expressly used functions' locations argument. header location title optionally subtitle reside generated tab_header() function.","code":""},{"path":"https://gt.rstudio.com/reference/cells_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location helper for targeting the table title and subtitle — cells_title","text":"","code":"cells_title(groups = c(\"title\", \"subtitle\"))"},{"path":"https://gt.rstudio.com/reference/cells_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Location helper for targeting the table title and subtitle — cells_title","text":"groups Specification groups mult-kw:[title|subtitle] // default: c(\"title\", \"subtitle\") can either specify \"title\", \"subtitle\", (default) vector target title element, subtitle element, elements.","code":""},{"path":"https://gt.rstudio.com/reference/cells_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Location helper for targeting the table title and subtitle — cells_title","text":"list object classes cells_title location_cells.","code":""},{"path":"https://gt.rstudio.com/reference/cells_title.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location helper for targeting the table title and subtitle — cells_title","text":"Use subset sp500 dataset create small gt table. Add header title, add footnote title tab_footnote() cells_title() (locations).","code":"sp500 |>   dplyr::filter(date >= \"2015-01-05\" & date <= \"2015-01-10\") |>   dplyr::select(-c(adj_close, volume, high, low)) |>   gt() |>   tab_header(title = \"S&P 500\") |>   tab_footnote(     footnote = \"All values in USD.\",     locations = cells_title(groups = \"title\")   )"},{"path":"https://gt.rstudio.com/reference/cells_title.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Location helper for targeting the table title and subtitle — cells_title","text":"8-12","code":""},{"path":"https://gt.rstudio.com/reference/cells_title.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Location helper for targeting the table title and subtitle — cells_title","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add one or more columns to a gt table — cols_add","title":"Add one or more columns to a gt table — cols_add","text":"can add new columns table cols_add() works quite bit like dplyr::mutate() . idea supply name-value pairs name new column name value part describes data go column. latter can: (1) vector length number rows data table, (2) single value (repeated way ), (3) involve columns table (represent vectors correct length). new columns added end column series default can instead added internally using either ..arguments. entirely empty (.e., NA) columns need added, can use NA types (e.g., NA, NA_character_, NA_real_, etc.) columns.","code":""},{"path":"https://gt.rstudio.com/reference/cols_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add one or more columns to a gt table — cols_add","text":"","code":"cols_add(.data, ..., .before = NULL, .after = NULL)"},{"path":"https://gt.rstudio.com/reference/cols_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add one or more columns to a gt table — cols_add","text":".data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. ... Cell data assignments <multiple expressions> // (, use .list) Expressions assignment cell values new columns. Name-value pairs, form <column> = <value vector> work, long <column> value already exist table. <value vector> may expression uses one column names table generate vector values. Single values <value vector> repeated new column. vector length exactly number rows table can also used. ., .Column used anchor <column-targeting expression> // default: NULL (optional) single column-resolving expression column index can given either ... column specifies new columns positioned among existing columns input data table. select helper functions starts_with() ends_with() can used column targeting, recommended single column name index used. ensure exactly one column provided either arguments (otherwise, function stopped). nothing provided either argument new column placed end column series.","code":""},{"path":"https://gt.rstudio.com/reference/cols_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add one or more columns to a gt table — cols_add","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_add.html","id":"targeting-the-column-for-insertion-with-before-or-after","dir":"Reference","previous_headings":"","what":"Targeting the column for insertion with .before or .after","title":"Add one or more columns to a gt table — cols_add","text":"targeting column insertion done ..arguments (one options used). tidyselect-style expressions indices can used target column, advised single column name used. avoid possibility inadvertently resolving multiple columns (since requirement single column).","code":""},{"path":"https://gt.rstudio.com/reference/cols_add.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add one or more columns to a gt table — cols_add","text":"take subset exibble dataset make simple gt table (using row column labels stub). add single column right existing columns call country. new column needs eight values supplied using cols_add().    can add multiple columns single use cols_add(). columns generated can formatted otherwise manipulated just column gt table. following example extends first one adding columns immediately using various function calls like fmt_flag() fmt_units().    table generated portion towny dataset, add two new columns (land_area density) single use cols_add(). new land_area column conversion land area square kilometers square miles density column calculated division population_2021 new land_area column. hide now unneeded land_area_km2 cols_hide() also perform column labeling adjustments column widths cols_label() cols_width().    possible start empty table (.e., columns rows) add one columns . can, example, use dplyr::tibble() data.frame() create completely empty table. first cols_add() call empty table can columns arbitrary length subsequent uses cols_add() must adhere rule new columns length existing.    Tables can contain rows, yet columns. following example, create zero-row table three columns (num, chr, ext) perform cols_add()-based addition two columns data. another case function allows arbitrary-length columns (since always adding zero-length columns impractical). Furthermore, can reference columns already exist (num chr) add values .    note ext column receive values cols_add() table expanded five rows nonetheless. , cell ext necessity filled NA value.","code":"exibble |>   dplyr::select(num, char, datetime, currency, group) |>   gt(rowname_col = \"row\") |>   cols_add(     country = c(\"TL\", \"PY\", \"GL\", \"PA\", \"MO\", \"EE\", \"CO\", \"AU\")   ) exibble |>   dplyr::select(num, char, datetime, currency, group) |>   gt(rowname_col = \"row\") |>   cols_add(     country = c(\"TL\", \"PY\", \"GL\", \"PA\", \"MO\", \"EE\", \"CO\", \"AU\"),     empty = NA_character_,     units = c(       \"k m s^-2\", \"N m^-2\", \"degC\", \"m^2 kg s^-2\",       \"m^2 kg s^-3\", \"/s\", \"A s\", \"m^2 kg s^-3 A^-1\"     ),     big_num = num ^ 3   ) |>   fmt_flag(columns = country) |>   sub_missing(columns = empty, missing_text = \"\") |>   fmt_units(columns = units) |>   fmt_scientific(columns = big_num) towny |>   dplyr::select(name, population_2021, land_area_km2) |>   dplyr::filter(population_2021 > 100000) |>   dplyr::slice_max(population_2021, n = 10) |>   gt() |>   cols_add(     land_area = land_area_km2 / 2.58998811,     density = population_2021 / land_area   ) |>   fmt_integer() |>   cols_hide(columns = land_area_km2) |>   cols_label(     population_2021 = \"Population\",     density = \"Density, {{*persons* / sq mi}}\",     land_area ~ \"Area, {{mi^2}}\"   ) |>   cols_width(everything() ~ px(120)) dplyr::tibble() |>   gt() |>   cols_add(     num = 1:5,     chr = vec_fmt_spelled_num(1:5)   ) dplyr::tibble(   num = numeric(0),   chr = character(0),   ext = character(0) ) |>   gt() |>   cols_add(     num = 1:5,     chr = vec_fmt_spelled_num(1:5)   )"},{"path":"https://gt.rstudio.com/reference/cols_add.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add one or more columns to a gt table — cols_add","text":"5-7","code":""},{"path":"https://gt.rstudio.com/reference/cols_add.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Add one or more columns to a gt table — cols_add","text":"v0.10.0 (October 7, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the alignment of columns — cols_align","title":"Set the alignment of columns — cols_align","text":"individual alignments columns (includes column labels data cells) can modified. option align text left, center, right. less explicit manner, can allow gt automatically choose alignment column based data type (auto option).","code":""},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the alignment of columns — cols_align","text":"","code":"cols_align(   data,   align = c(\"auto\", \"left\", \"center\", \"right\"),   columns = everything() )"},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the alignment of columns — cols_align","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. align Alignment type singl-kw:[auto|left|center|right] // default: \"auto\" can \"center\", \"left\", \"right\" center-, left-, right-alignment. Alternatively, \"auto\" option (default), automatically align values columns according data type (see Details section specifics alignments applied). columns Columns target <column-targeting expression> // default: everything() columns alignment applied. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). default set everything() means chosen alignment affects columns.","code":""},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the alignment of columns — cols_align","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the alignment of columns — cols_align","text":"create gt table object using gt(), automatic alignment column labels data cells performed. default, left-alignment applied columns class character, Date, POSIXct; center-alignment columns class logical, factor, list; right-alignment used numeric integer columns.","code":""},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the alignment of columns — cols_align","text":"use countrypops create small gt table. can change alignment population column cols_align(). example, label body cells population aligned left.","code":"countrypops |>   dplyr::select(-contains(\"code\")) |>   dplyr::filter(     country_name == \"San Marino\",     year %in% 2017:2021   ) |>   gt(     rowname_col = \"year\",     groupname_col = \"country_name\"   ) |>   cols_align(     align = \"left\",     columns = population   )"},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Set the alignment of columns — cols_align","text":"5-1","code":""},{"path":"https://gt.rstudio.com/reference/cols_align.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Set the alignment of columns — cols_align","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_align_decimal.html","id":null,"dir":"Reference","previous_headings":"","what":"Align all numeric values in a column along the decimal mark — cols_align_decimal","title":"Align all numeric values in a column along the decimal mark — cols_align_decimal","text":"numeric columns contain values decimal portions, sometimes useful lined along decimal mark easier readability. can cols_align_decimal() provide number columns (function skip columns require type alignment).","code":""},{"path":"https://gt.rstudio.com/reference/cols_align_decimal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align all numeric values in a column along the decimal mark — cols_align_decimal","text":"","code":"cols_align_decimal(data, columns = everything(), dec_mark = \".\", locale = NULL)"},{"path":"https://gt.rstudio.com/reference/cols_align_decimal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align all numeric values in a column along the decimal mark — cols_align_decimal","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() columns decimal alignment applied. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). default set everything() means decimal alignment affects columns. dec_mark Decimal mark scalar<character> // default: \".\" character used decimal mark numeric values aligned. locale value used formatting numeric values locale better use override value dec_mark. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used obtain type decimal mark used numeric values aligned (according locale's formatting rules). Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/cols_align_decimal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align all numeric values in a column along the decimal mark — cols_align_decimal","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_align_decimal.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align all numeric values in a column along the decimal mark — cols_align_decimal","text":"put together two-column table create gt table. first column char just contains letters whereas second column, num, collection numbers NA values. format numbers fmt_number() elect drop trailing zeros past decimal mark drop_trailing_zeros = TRUE. can leave formatted numbers hard scan decimal mark fixed horizontally. remedy align numbers decimal mark cols_align_decimal().","code":"dplyr::tibble(   char = LETTERS[1:9],   num = c(1.2, -33.52, 9023.2, -283.527, NA, 0.401, -123.1, NA, 41) ) |>   gt() |>   fmt_number(     columns = num,     decimals = 3,     drop_trailing_zeros = TRUE   ) |>   cols_align_decimal()"},{"path":"https://gt.rstudio.com/reference/cols_align_decimal.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Align all numeric values in a column along the decimal mark — cols_align_decimal","text":"5-2","code":""},{"path":"https://gt.rstudio.com/reference/cols_align_decimal.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Align all numeric values in a column along the decimal mark — cols_align_decimal","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":null,"dir":"Reference","previous_headings":"","what":"Hide one or more columns — cols_hide","title":"Hide one or more columns — cols_hide","text":"cols_hide() allows us hide one columns appearing final output table. possible often desirable omit columns input table data introduction gt(), can cases data certain columns useful (column reference formatting columns) final display columns necessary.","code":""},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hide one or more columns — cols_hide","text":"","code":"cols_hide(data, columns)"},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hide one or more columns — cols_hide","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // required columns hide output display table. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()).","code":""},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hide one or more columns — cols_hide","text":"object class gt_tbl. data unaltered columns supplied.","code":""},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hide one or more columns — cols_hide","text":"hiding columns internally rendering directive, , columns 'hidden' still accessible useful expression provided rows argument. Furthermore, cols_hide() (many gt functions) can placed anywhere pipeline gt function calls (acting promise hide columns timing right). However, perhaps greater readability placing call closer end pipeline. cols_hide() quietly changes visible state column (much like cols_unhide()) yield warnings messages changing state already-invisible columns.","code":""},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hide one or more columns — cols_hide","text":"use small portion countrypops dataset create gt table. can hide country_code_2 country_code_3 columns cols_hide() function.    Using another countrypops-based gt table, can use population column provide conditional placement footnotes. , hide column along country_code_3 column. Note order cols_hide() tab_footnote() effect final display table.","code":"countrypops |>   dplyr::filter(     country_name == \"Egypt\",     year %in% 2017:2021   ) |>   gt() |>   cols_hide(columns = c(country_code_2, country_code_3)) countrypops |>   dplyr::filter(     country_name == \"Pakistan\",     year %in% 2017:2021   ) |>   gt() |>   cols_hide(columns = c(country_code_3, population)) |>   tab_footnote(     footnote = \"Population above 220,000,000.\",     locations = cells_body(       columns = year,       rows = population > 220E6     )   )"},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Hide one or more columns — cols_hide","text":"5-12","code":""},{"path":"https://gt.rstudio.com/reference/cols_hide.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Hide one or more columns — cols_hide","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Relabel one or more columns — cols_label","title":"Relabel one or more columns — cols_label","text":"Column labels can modified default values (names columns input table data). create gt table object using gt(), column names effectively become column labels. serves good first approximation, column names label defaults often appealing gt table option custom column labels. cols_label() provides flexibility relabel one columns even option use md() html() rendering column labels Markdown using HTML.","code":""},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relabel one or more columns — cols_label","text":"","code":"cols_label(.data, ..., .list = list2(...), .fn = NULL, .process_units = NULL)"},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relabel one or more columns — cols_label","text":".data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. ... Column label assignments <multiple expressions> // required (, use .list) Expressions assignment column labels table columns .data. Two-sided formulas (e.g., <LHS> ~ <RHS>) can used, left-hand side corresponds selections columns right-hand side evaluates single-length values label apply. Column names enclosed c(). Select helpers like starts_with(), ends_with(), contains(), matches(), everything() can used LHS. Named arguments also valid input simple mappings column name label text; form <column name> = <label>. Subsequent expressions operate columns assigned previously result overwriting column label values. .list Alternative ... <list multiple expressions> // required (, use ...) Allows use list input alternative .... .fn Function apply function // default: NULL (optional) option specify function applied provided label values. .process_units Option process available units throughout scalar<logical> // default: NULL (optional) column text contain text already gt's units notation (, importantly, surrounded \"{{\"/\"}}\"), using TRUE reprocesses column units properly registered column labels. ignores column label assignments ... .list.","code":""},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relabel one or more columns — cols_label","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":"a-note-on-column-names-and-column-labels","dir":"Reference","previous_headings":"","what":"A note on column names and column labels","title":"Relabel one or more columns — cols_label","text":"important note columns can freely relabeled, continue refer columns original column names. Column names tibble data frame must unique whereas column labels gt requirement uniqueness (useful labeling columns , say, measurement units may repeated several times—usually different spanner labels). Thus, can still easily distinguish columns gt function calls (e.g., fmt*() functions) even though may lose distinguishability column labels undergone relabeling.","code":""},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":"incorporating-units-with-gt-s-units-notation","dir":"Reference","previous_headings":"","what":"Incorporating units with gt's units notation","title":"Relabel one or more columns — cols_label","text":"Measurement units often seen part column labels indeed can much straightforward include rather using devices make readers aware units specific columns. gt package offers function cols_units() apply units various columns interface similar function. However, also possible define units along column label, obviating need pattern syntax joins two text components. , surround portion text label corresponds units definition \"{{\"/\"}}\". Now know mark text units definition, know need know write proper units notation. notation uses succinct method writing units feel somewhat familiar though particular task hand. unit treated separate entity (parentheses symbols included) addition subscript text exponents flexible relatively easy formulate. best shown examples: \"m/s\" \"m / s\" render \"m/s\" \"m s^-1\" appear \"-1\" exponent intact \"m /s\" gives result, \"/<unit>\" equivalent \"<unit>^-1\" \"E_h\" render \"E\" \"h\" subscript \"t_i^2.5\" provides t \"\" subscript \"2.5\" exponent \"m[_0^2]\" use overstriking set scripts vertically \"g/L %C6H12O6%\" uses chemical formula (enclosed pair \"%\" characters) unit partial, formula render correctly subscripted numbers Common units difficult write using ASCII text may implicitly converted correct characters (e.g., \"u\" \"ug\", \"um\", \"uL\", \"umol\" converted Greek mu symbol; \"degC\" \"degF\" render degree sign temperature unit) can transform shorthand symbol/unit names enclosed \":\" (e.g., \":angstrom:\", \":ohm:\", etc.) proper symbols Greek letters can added enclosing letter name \":\"; can use lowercase letters (e.g., \":beta:\", \":sigma:\", etc.) uppercase letters (e.g., \":Alpha:\", \":Zeta:\", etc.) components unit (unit name, subscript, exponent) can fully partially italicized/emboldened surrounding text \"*\" \"**\"","code":""},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relabel one or more columns — cols_label","text":"use portion countrypops dataset create gt table. can relabel table's columns cols_label() function improve presentation. simple case supplying name column left-hand side, label text right-hand side.    Using countrypops dataset , label columns similarly time making column labels bold Markdown formatting (md() helper function). possible use either = ~ column name label text.    select portion metro dataset, create small gt table three columns. Within cols_label() like provide column labels contain line breaks. , can use <br> indicate line breaks . also need use md() helper function signal gt text interpreted Markdown. Instead calling md() labels , can conveniently use .fn argument provide bare function (applied label defined cols_label() call).    Using subset towny dataset, can create interesting gt table. First, certain columns selected dataset, filtering rows done, rows sorted, first 10 rows kept. data introduced gt(), apply spanner labels using two calls tab_spanner(). spanners, want label columns years interest. Using cols_label() select expressions left side formulas, can easily relabel multiple columns common label text. Note use = sign expressions within cols_label(); left-hand side single column name, must use formula syntax (.e., ~).    another table uses towny dataset. big difference compared previous gt table cols_label() used incorporates unit notation text (within \"{{\"/\"}}\").    illness dataset units within units column. formatted just right way gt . text manipulation dplyr::mutate() pivoting tidyr::pivot_longer() tidyr::pivot_wider() order include units part column names reworked table. column names format units included within \"{{\"/\"}}\", , can use cols_label() .process_units = TRUE option register measurement units. addition , <br> included (line break), use .fn option provide md() helper function (bare function name). ensures line breaks materialize.","code":"countrypops |>   dplyr::select(-contains(\"code\")) |>   dplyr::filter(     country_name == \"Uganda\",     year %in% 2017:2021   ) |>   gt() |>   cols_label(     country_name = \"Name\",     year = \"Year\",     population = \"Population\"   ) countrypops |>   dplyr::select(-contains(\"code\")) |>   dplyr::filter(     country_name == \"Uganda\",     year %in% 2017:2021   ) |>   gt() |>   cols_label(     country_name = md(\"**Name**\"),     year = md(\"**Year**\"),     population ~ md(\"**Population**\")   ) metro |>   dplyr::select(name, lines, passengers, connect_other) |>   dplyr::slice_max(passengers, n = 10) |>   gt() |>   cols_hide(columns = passengers) |>   cols_label(     name = \"Name of<br>Metro Station\",     lines = \"Metro<br>Lines\",     connect_other = \"Train<br>Services\",     .fn = md   ) towny |>   dplyr::select(     name, ends_with(\"2001\"), ends_with(\"2006\"), matches(\"2001_2006\")   ) |>   dplyr::filter(population_2001 > 100000) |>   dplyr::arrange(desc(pop_change_2001_2006_pct)) |>   dplyr::slice_head(n = 10) |>   gt() |>   fmt_integer() |>   fmt_percent(columns = matches(\"change\"), decimals = 1) |>   tab_spanner(label = \"Population\", columns = starts_with(\"population\")) |>   tab_spanner(label = \"Density\", columns = starts_with(\"density\")) |>   cols_label(     ends_with(\"01\") ~ \"2001\",     ends_with(\"06\") ~ \"2006\",     matches(\"change\") ~ md(\"Population Change,<br>2001 to 2006\")   ) |>   cols_width(everything() ~ px(120)) towny |>   dplyr::select(     name, population_2021, density_2021, land_area_km2, latitude, longitude   ) |>   dplyr::filter(population_2021 > 100000) |>   dplyr::arrange(desc(population_2021)) |>   dplyr::slice_head(n = 10) |>   gt() |>   fmt_integer(columns = population_2021) |>   fmt_number(     columns = c(density_2021, land_area_km2),     decimals = 1   ) |>   fmt_number(columns = latitude, decimals = 2) |>   fmt_number(columns = longitude, decimals = 2, scale_by = -1) |>   cols_label(     starts_with(\"population\") ~ \"Population\",     starts_with(\"density\") ~ \"Density, {{*persons* km^-2}}\",     land_area_km2 ~ \"Area, {{km^2}}\",     latitude ~ \"Latitude, {{:degrees:N}}\",     longitude ~ \"Longitude, {{:degrees:W}}\"   ) |>   cols_width(everything() ~ px(120)) illness |>   dplyr::mutate(test = paste0(test, \",<br>{{\", units, \"}}\")) |>   dplyr::slice_head(n = 8) |>   dplyr::select(-c(starts_with(\"norm\"), units)) |>   tidyr::pivot_longer(     cols = starts_with(\"day\"),     names_to = \"day\",     names_prefix = \"day_\",     values_to = \"value\"   ) |>   tidyr::pivot_wider(     names_from = test,     values_from = value   ) |>   gt(rowname_col = \"day\") |>   tab_stubhead(label = \"Day\") |>   cols_label(     .fn = md,     .process_units = TRUE   ) |>   cols_width(     stub() ~ px(50),     everything() ~ px(120)   )"},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Relabel one or more columns — cols_label","text":"5-4","code":""},{"path":"https://gt.rstudio.com/reference/cols_label.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Relabel one or more columns — cols_label","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_label_with.html","id":null,"dir":"Reference","previous_headings":"","what":"Relabel columns with a function — cols_label_with","title":"Relabel columns with a function — cols_label_with","text":"Column labels can modified default values (names columns input table data). create gt table object using gt(), column names effectively become column labels. serves good first approximation, may want make adjustments columns names present better gt output table. cols_label_with() function allows modification column labels supplied function. default, function invoked column labels can limited subset via columns argument. fn argument, provide either bare function name, RHS formula (. representing vector column labels), , anonymous function (e.g., function(x) tools::toTitleCase(x)).","code":""},{"path":"https://gt.rstudio.com/reference/cols_label_with.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relabel columns with a function — cols_label_with","text":"","code":"cols_label_with(data, columns = everything(), fn)"},{"path":"https://gt.rstudio.com/reference/cols_label_with.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relabel columns with a function — cols_label_with","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() columns column-labeling operations applied. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). fn Function apply function|formula // required function function call applied column labels. can take form bare function (e.g., tools::toTitleCase), function call RHS formula (e.g., ~ tools::toTitleCase(.)), anonymous function function(x) tools::toTitleCase(x).","code":""},{"path":"https://gt.rstudio.com/reference/cols_label_with.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relabel columns with a function — cols_label_with","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_label_with.html","id":"a-note-on-column-names-and-column-labels","dir":"Reference","previous_headings":"","what":"A note on column names and column labels","title":"Relabel columns with a function — cols_label_with","text":"important note columns can freely relabeled, continue refer columns original column names. Column names tibble data frame must unique whereas column labels gt requirement uniqueness (useful labeling columns , say, measurement units may repeated several times—usually different spanner labels). Thus, can still easily distinguish columns gt function calls (e.g., fmt*() functions) even though may lose distinguishability column labels relabeled.","code":""},{"path":"https://gt.rstudio.com/reference/cols_label_with.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relabel columns with a function — cols_label_with","text":"Use subset sp500 dataset create gt table. want column labels entirely capitalized versions default labels , instead using cols_label() rewriting label manually capital letters can use cols_label_with() instruct apply toupper() function column labels.    Use countrypops dataset create gt table. improve presentation table, going change default column labels via function calls supplied within cols_label_with(). can, prefer, apply multiple types column label changes sequence multiple calls cols_label_with(). , use make_clean_names() functions janitor package follow removal numeral gsub().    can make svelte gt table pizzaplace dataset. ways use one instance cols_label_with() multiple functions called column labels. example, use anonymous function call (function(x) { ... } construction) perform multiple mutations x (vector column labels). can even use md() helper function signal gt column label interpreted Markdown text.","code":"sp500 |>   dplyr::filter(     date >= \"2015-12-01\" &       date <= \"2015-12-15\"   ) |>   dplyr::select(-c(adj_close, volume)) |>   gt() |>   cols_label_with(fn = toupper) countrypops |>   dplyr::filter(year == 2021) |>   dplyr::filter(grepl(\"^C\", country_code_3)) |>   dplyr::select(-country_code_2, -year) |>   head(8) |>   gt() |>   cols_move_to_start(columns = country_code_3) |>   fmt_integer(columns = population) |>   cols_label_with(     fn = ~ janitor::make_clean_names(., case = \"title\")   ) |>   cols_label_with(     fn = ~ gsub(\"[0-9]\", \"\", .)   ) pizzaplace |>   dplyr::mutate(month = substr(date, 6, 7)) |>   dplyr::count(month, name = \"pizze_vendute\") |>   dplyr::mutate(frazione_della_quota = pizze_vendute / 4000) |>   dplyr::mutate(date = paste0(\"2015/\", month, \"/01\")) |>   dplyr::select(-month) |>   gt(rowname_col = \"date\") |>   fmt_date(date, date_style = \"month\", locale = \"it\") |>   fmt_percent(columns = frazione_della_quota) |>   fmt_integer(columns = pizze_vendute) |>   cols_width(everything() ~ px(100)) |>   cols_label_with(     fn = function(x) {       janitor::make_clean_names(x, case = \"title\") |>         toupper() |>         stringr::str_replace_all(\"^|$\", \"**\") |>         md()     }   )"},{"path":"https://gt.rstudio.com/reference/cols_label_with.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Relabel columns with a function — cols_label_with","text":"5-5","code":""},{"path":"https://gt.rstudio.com/reference/cols_label_with.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Relabel columns with a function — cols_label_with","text":"v0.9.0 (March 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge data from two or more columns to a single column — cols_merge","title":"Merge data from two or more columns to a single column — cols_merge","text":"function takes input two columns allows contents merged single column using pattern specifies arrangement. can specify columns merge together columns argument. string-combining pattern provided pattern argument. first column columns series operates target column (.e., column undergo mutation) whereas following columns untouched. option hide non-target columns (.e., second subsequent columns given columns). formatting values different columns preserved upon merging.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge data from two or more columns to a single column — cols_merge","text":"","code":"cols_merge(   data,   columns,   hide_columns = columns[-1],   rows = everything(),   pattern = NULL )"},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge data from two or more columns to a single column — cols_merge","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // required columns merging operations applied. first column resolved target column (.e., undergo mutation) columns serve provide input. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). vector recommended case absolutely certain order columns, , order information needed arguments. hide_columns Subset columns hide <column-targeting expression>|FALSE // default: columns[-1] column names provided state changed hidden (via internal use cols_hide()) already hidden. convenient shared purpose specified columns provide string input target column. suppress hiding columns, FALSE can used . rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows participate merging process. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). pattern Formatting pattern scalar<character> // default: NULL (optional) formatting pattern specifies arrangement columns values string literals. pattern uses numbers (within { }) correspond indices columns provided columns. two columns provided columns like combine cell data onto first column, \"{1} {2}\" used. pattern provided space-separated pattern includes columns generated automatically. details provided pattern works section.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge data from two or more columns to a single column — cols_merge","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":"how-the-pattern-works","dir":"Reference","previous_headings":"","what":"How the pattern works","title":"Merge data from two or more columns to a single column — cols_merge","text":"two types templating pattern string: { } arranging single column values row-wise fashion << >> surround spans text removed contained { } yields missing value Integer values placed { } values correspond columns involved merge, order provided columns argument. pattern \"{1} ({2}-{3})\" corresponds target column value listed first columns second third columns cited (formatted range parentheses). hypothetical values, might result merged string \"38.2 (3-8)\". values involved merging may missing, likely something like \"38.2 (3-NA)\" undesirable. cases, placing sections text << >> results entire span eliminated NA value (arising { } values). instead opt pattern like \"{1}<< ({2}-{3})>>\", results \"38.2\" either columns {2} {3} NA value. can even use complex nesting pattern like \"{1}<< ({2}-<<{3}>>)>>\" retain lower limit parentheses ({3} NA) remove range altogether {2} NA. One thing note sub_missing() used values column, specific values affected considered truly missing cols_merge() (since handled substitute text). , complex pattern \"{1}<< ({2}-<<{3}>>)>>\" might result something like \"38.2 (3-limit)\" sub_missing(..., missing_text = \"limit\") used third column supplied columns.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":"comparison-with-other-column-merging-functions","dir":"Reference","previous_headings":"","what":"Comparison with other column-merging functions","title":"Merge data from two or more columns to a single column — cols_merge","text":"three column-merging functions offer specialized behavior optimized common table tasks: cols_merge_range(), cols_merge_uncert(), cols_merge_n_pct(). functions operate similarly, non-target columns can optionally hidden output table autohide option.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge data from two or more columns to a single column — cols_merge","text":"Use subset sp500 dataset create gt table. Use cols_merge() function merge open & close columns together, , low & high columns (putting em dash ). Relabel columns cols_label().    Use portion gtcars create gt table. Use cols_merge() function merge trq & trq_rpm columns together, , mpg_c & mpg_h columns. Given presence NA values, can use patterns drop parts output text whenever missing values encountered.","code":"sp500 |>   dplyr::slice(50:55) |>   dplyr::select(-volume, -adj_close) |>   gt() |>   cols_merge(     columns = c(open, close),     pattern = \"{1}&mdash;{2}\"   ) |>   cols_merge(     columns = c(low, high),     pattern = \"{1}&mdash;{2}\"   ) |>   cols_label(     open = \"open/close\",     low = \"low/high\"   ) gtcars |>   dplyr::filter(year == 2017) |>   dplyr::select(mfr, model, starts_with(c(\"trq\", \"mpg\"))) |>   gt() |>   fmt_integer(columns = trq_rpm) |>   cols_merge(     columns = starts_with(\"trq\"),     pattern = \"{1}<< ({2} rpm)>>\"   ) |>   cols_merge(     columns = starts_with(\"mpg\"),     pattern = \"<<{1} city<<\/{2} hwy>>>>\"   ) |>   cols_label(     mfr = \"Manufacturer\",     model = \"Car Model\",     trq = \"Torque\",     mpg_c = \"MPG\"   )"},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Merge data from two or more columns to a single column — cols_merge","text":"5-14","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Merge data from two or more columns to a single column — cols_merge","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two columns to combine counts and percentages — cols_merge_n_pct","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"cols_merge_n_pct() specialized variant cols_merge(), operates taking two columns constitute count (col_n) fraction total population (col_pct) merges single column. results column containing counts associated percentages (e.g., 12 (23.2%)). column specified col_pct dropped output table.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"","code":"cols_merge_n_pct(data, col_n, col_pct, rows = everything(), autohide = TRUE)"},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. col_n Column target counts <column-targeting expression> // required column contains values count component. select helper functions starts_with() ends_with() can used column targeting, recommended single column name used. ensure exactly one column provided . col_pct Column target percentages <column-targeting expression> // required column contains values percentage component. select helper functions starts_with() ends_with() can used column targeting, recommended single column name used. ensure exactly one column provided . column formatted percentages displayed (e.g., fmt_percent()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows participate merging process. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). autohide Automatic hiding col_pct column scalar<logical> // default: TRUE option automatically hide column specified col_pct. columns state changed hidden behave , just displayed finalized table.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":"comparison-with-other-column-merging-functions","dir":"Reference","previous_headings":"","what":"Comparison with other column-merging functions","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"function somewhat replicated using cols_merge(), however, cols_merge_n_pct() employs following specialized semantics NA zero-value handling: NAs col_n result missing values merged column (e.g., NA + 10.2% = NA) NAs col_pct (col_n) result base values merged column (e.g., 13 + NA = 13) NAs col_n col_pct result missing values merged column (e.g., NA + NA = NA) zero (0) value col_n formatted output \"0\" (.e., percentage shown) resulting NA values col_n column following merge operation can easily formatted using sub_missing(). Separate calls sub_missing() can used col_n col_pct columns finer control replacement values. responsibility user ensure values correct col_n col_pct columns (function neither generates recalculates values either). Formatting column can done independently separate fmt_number() fmt_percent() calls. function part set four column-merging functions. three general cols_merge() function specialized cols_merge_uncert() cols_merge_range() functions. functions operate similarly, non-target columns can optionally hidden output table hide_columns autohide options.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"Using summarized version pizzaplace dataset, create gt table displays counts percentages top 3 pizzas sold pizza category 2015. cols_merge_n_pct() function used merge n frac columns (frac column formatted using fmt_percent()).","code":"pizzaplace |>   dplyr::count(name, type, price, sort = TRUE) |>   dplyr::mutate(frac = prop.table(n)) |>   dplyr::slice_max(n, n = 3, by = type) |>   dplyr::arrange(type) |>   gt(     rowname_col = \"name\",     groupname_col = \"type\"   ) |>   fmt_currency(price) |>   fmt_percent(frac) |>   cols_merge_n_pct(     col_n = n,     col_pct = frac   ) |>   cols_label(     n = md(\"*N* (%)\"),     price = \"Price\"   ) |>   tab_style(     style = cell_text(font = \"monospace\"),     locations = cells_stub()   ) |>   tab_stubhead(md(\"Cat. and  \\nPizza Code\")) |>   tab_header(title = \"Top 3 Pizzas Sold by Category in 2015\") |>   tab_options(table.width = px(512))"},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"5-17","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_n_pct.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Merge two columns to combine counts and percentages — cols_merge_n_pct","text":"v0.3.0 (May 12, 2021)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two columns to a value range column — cols_merge_range","title":"Merge two columns to a value range column — cols_merge_range","text":"cols_merge_range() specialized variant cols_merge(). operates taking two columns constitute range values (col_begin col_end) merges single column. results column containing values separated em dash. column specified col_end dropped output table.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two columns to a value range column — cols_merge_range","text":"","code":"cols_merge_range(   data,   col_begin,   col_end,   rows = everything(),   autohide = TRUE,   sep = NULL,   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two columns to a value range column — cols_merge_range","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. col_begin Column target beginning range <column-targeting expression> // required column contains values start range. select helper functions starts_with() ends_with() can used column targeting, recommended single column name used. ensure exactly one column provided . col_end Column target end range <column-targeting expression> // required column contains values end range. select helper functions starts_with() ends_with() can used column targeting, recommended single column name used. ensure exactly one column provided . rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows participate merging process. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). autohide Automatic hiding col_end column scalar<logical> // default: TRUE option automatically hide column specified col_end. columns state changed hidden behave , just displayed finalized table. sep Separator text ranges scalar<character> // default: NULL (optional) separator text indicates values ranged. sep value provided range separator specific locale provided used (locale specified en dash used). can specify use en dash \"--\"; triple-hyphen sequence (\"---\") transformed em dash. want hyphens taken literally, sep value can supplied within base () function. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used applying sep pattern specific locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two columns to a value range column — cols_merge_range","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":"comparison-with-other-column-merging-functions","dir":"Reference","previous_headings":"","what":"Comparison with other column-merging functions","title":"Merge two columns to a value range column — cols_merge_range","text":"function somewhat replicated using cols_merge(), however, cols_merge_range() employs following specialized operations NA handling: NAs col_begin (col_end) result display NAs col_end (col_begin) result display col_begin values merged column (converse previous) NAs col_begin col_end result missing values merged column resulting NA values col_begin column following merge operation can easily formatted using sub_missing(). Separate calls sub_missing() can used col_begin col_end columns finer control replacement values. function part set four column-merging functions. three general cols_merge() function specialized cols_merge_uncert() cols_merge_n_pct() functions. functions operate similarly, non-target columns can optionally hidden output table hide_columns autohide options.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two columns to a value range column — cols_merge_range","text":"use subset gtcars dataset create gt table, keeping model, mpg_c, mpg_h columns. Merge \"mpg*\" columns together single range column (labeled MPG, italics) using cols_merge_range() function. merging process, column label mpg_c column updated cols_label() better describe content.","code":"gtcars |>   dplyr::select(model, starts_with(\"mpg\")) |>   dplyr::slice(1:8) |>   gt() |>   cols_merge_range(     col_begin = mpg_c,     col_end = mpg_h   ) |>   cols_label(mpg_c = md(\"*MPG*\"))"},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Merge two columns to a value range column — cols_merge_range","text":"5-16","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_range.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Merge two columns to a value range column — cols_merge_range","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"cols_merge_uncert() specialized variant cols_merge(). takes input base value column (col_val) either: (1) single uncertainty column, (2) two columns representing lower upper uncertainty bounds. columns essentially merged single column (col_val). results column values associated uncertainties, columns specified col_uncert hidden appearing output table.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"","code":"cols_merge_uncert(   data,   col_val,   col_uncert,   rows = everything(),   sep = \" +/- \",   autohide = TRUE )"},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. col_val Column target base values <column-targeting expression> // required column contains values start range. select helper functions starts_with() ends_with() can used column targeting, recommended single column name used. ensure exactly one column provided . col_uncert Column columns target uncertainty values <column-targeting expression> // required common case involves supplying single column uncertainties; values combined col_val. Less commonly, lower upper uncertainty bounds may different. case, two columns representing lower upper uncertainty values away col_val, respectively, provided. select helper functions starts_with() ends_with() can used column targeting, recommended one two column names explicitly provided vector. rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows participate merging process. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). sep Separator text uncertainties scalar<character> // default: \" +/- \" separator text contains uncertainty mark single uncertainty value. default value \" +/- \" indicates appropriate plus/minus mark used depending output context. want special symbol taken literally, can supplied within () function. autohide Automatic hiding col_uncert column(s) scalar<logical> // default: TRUE option automatically hide columns specified col_uncert. columns state changed 'hidden' behave , just displayed finalized table.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":"comparison-with-other-column-merging-functions","dir":"Reference","previous_headings":"","what":"Comparison with other column-merging functions","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"function somewhat replicated using cols_merge() case single column supplied col_uncert, however, cols_merge_uncert() employs following specialized semantics NA handling: NAs col_val result missing values merged column (e.g., NA + 0.1 = NA) NAs col_uncert (col_val) result base values merged column (e.g., 12.0 + NA = 12.0) NAs col_val col_uncert result missing values merged column (e.g., NA + NA = NA) resulting NA values col_val column following merge operation can easily formatted using sub_missing(). function part set four column-merging functions. three general cols_merge() function specialized cols_merge_range() cols_merge_n_pct() functions. functions operate similarly, non-target columns can optionally hidden output table hide_columns autohide options.","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"use exibble dataset create simple, two-column gt table (keeping num currency columns). format num column fmt_number() function. Next merge currency num columns currency column; contain base value uncertainty done using cols_merge_uncert() function. merging process, column label currency column updated cols_label() better describe content.","code":"exibble |>   dplyr::select(num, currency) |>   dplyr::slice(1:7) |>   gt() |>   fmt_number(     columns = num,     decimals = 3,     use_seps = FALSE   ) |>   cols_merge_uncert(     col_val = currency,     col_uncert = num   ) |>   cols_label(currency = \"value + uncert.\")"},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"5-15","code":""},{"path":"https://gt.rstudio.com/reference/cols_merge_uncert.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Merge columns to a value-with-uncertainty column — cols_merge_uncert","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":null,"dir":"Reference","previous_headings":"","what":"Move one or more columns — cols_move","title":"Move one or more columns — cols_move","text":"occasions need move columns way way, can make use cols_move() function. true movement columns can done upstream gt, much easier less error prone use function provided . movement procedure takes one specified columns (columns argument) places right different column (argument). ordering columns moved preserved, ordering columns table.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move one or more columns — cols_move","text":"","code":"cols_move(data, columns, after)"},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move one or more columns — cols_move","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // required columns moving operations applied. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything(). columns move group different position. order remaining columns preserved. Column used anchor <column-targeting expression> // required column used anchor insertion moved columns. moved columns placed right column. select helper functions starts_with() ends_with() can used column targeting, recommended single column name used. ensure exactly one column provided .","code":""},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move one or more columns — cols_move","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Move one or more columns — cols_move","text":"columns supplied columns must exist table none can argument. column must also exist one column provided . need place one columns beginning column series, cols_move_to_start() function used. Similarly, columns move placed end column series use cols_move_to_end().","code":""},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move one or more columns — cols_move","text":"Use countrypops dataset create gt table. choose position population column country_name column using cols_move() function.","code":"countrypops |>   dplyr::select(-contains(\"code\")) |>   dplyr::filter(     country_name == \"Japan\",     year %in% 2012:2021   ) |>   gt() |>   cols_move(     columns = population,     after = country_name   ) |>   fmt_integer(columns = population)"},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Move one or more columns — cols_move","text":"5-9","code":""},{"path":"https://gt.rstudio.com/reference/cols_move.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Move one or more columns — cols_move","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":null,"dir":"Reference","previous_headings":"","what":"Move one or more columns to the end — cols_move_to_end","title":"Move one or more columns to the end — cols_move_to_end","text":"possible move set columns end column series, need specify columns moved. can done upstream gt, function makes process much easier less error prone. ordering columns moved end preserved (ordering columns table).","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move one or more columns to the end — cols_move_to_end","text":"","code":"cols_move_to_end(data, columns)"},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move one or more columns to the end — cols_move_to_end","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // required columns moving operations applied. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything(). columns move group right-side table. order remaining columns preserved.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move one or more columns to the end — cols_move_to_end","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Move one or more columns to the end — cols_move_to_end","text":"columns supplied columns must exist table. need place one columns start column series, cols_move_to_start() used. control offered cols_move(), columns placed specific column.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move one or more columns to the end — cols_move_to_end","text":"example, use portion countrypops dataset create simple gt table. move year column, middle column, end column series cols_move_to_end().    can also move multiple columns time. countrypops-based table, move year country_name columns end column series.","code":"countrypops |>   dplyr::select(-contains(\"code\")) |>   dplyr::filter(     country_name == \"Benin\",     year %in% 2017:2021   ) |>   gt() |>   cols_move_to_end(columns = year) countrypops |>   dplyr::select(-contains(\"code\")) |>   dplyr::filter(     country_name == \"Benin\",     year %in% 2017:2021   ) |>   gt() |>   cols_move_to_end(columns = c(year, country_name))"},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Move one or more columns to the end — cols_move_to_end","text":"5-11","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_end.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Move one or more columns to the end — cols_move_to_end","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Move one or more columns to the start — cols_move_to_start","title":"Move one or more columns to the start — cols_move_to_start","text":"can easily move set columns beginning column series need specify columns. possible upstream gt, however, easier function presents less possibility error. ordering columns moved start preserved (ordering columns table).","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move one or more columns to the start — cols_move_to_start","text":"","code":"cols_move_to_start(data, columns)"},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move one or more columns to the start — cols_move_to_start","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // required columns moving operations applied. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). columns move group left-side table. order remaining columns preserved.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move one or more columns to the start — cols_move_to_start","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Move one or more columns to the start — cols_move_to_start","text":"columns supplied columns must exist table. need place one columns end column series, cols_move_to_end() used. control offered cols_move(), columns placed specific column.","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Move one or more columns to the start — cols_move_to_start","text":"example, use portion countrypops dataset create simple gt table. move year column, middle column, start column series cols_move_to_start().    can also move multiple columns time. countrypops-based table, move year population columns start column series.","code":"countrypops |>   dplyr::select(-contains(\"code\")) |>   dplyr::filter(     country_name == \"Fiji\",     year %in% 2017:2021   ) |>   gt() |>   cols_move_to_start(columns = year) countrypops |>   dplyr::select(-contains(\"code\")) |>   dplyr::filter(     country_name == \"Fiji\",     year %in% 2017:2021   ) |>   gt() |>   cols_move_to_start(columns = c(year, population))"},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Move one or more columns to the start — cols_move_to_start","text":"5-10","code":""},{"path":"https://gt.rstudio.com/reference/cols_move_to_start.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Move one or more columns to the start — cols_move_to_start","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_nanoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a new column of nanoplots, taking input data from selected columns — cols_nanoplot","title":"Add a new column of nanoplots, taking input data from selected columns — cols_nanoplot","text":"Nanoplots tiny plots can use gt table. simple design, mainly lot space work . simplicity, however, get set succinct data visualizations adapt nicely amount data feed . cols_nanoplot() take data one columns basic inputs nanoplots generate new column containing plots. nanoplots robust missing values, multiple strategies available handling missingness. Nanoplots try show individual data reasonably good visibility. Interactivity included basic feature one can hover data points vertical guides display value ascribed data point. gt knows numeric formatting, values compactly formatted take valuable real estate. need create nanoplot based monetary values, can handled providing currency code nanoplot_options() helper (hook options argument).  guide left-hand side plot area appear hover display minimal maximal y values. three types nanoplots available: \"line\", \"bar\", \"boxplot\". line plot shows individual data points smooth connecting lines allow easier scanning values. can opt straight-line connections data points, , connections (). can even eschew data points just simple line. Regardless mix match difference plot layers, plot area focuses domain data points goal showing overall trend data. data feed line plot can consist single vector values (resulting equally-spaced y values), , can supply two vectors representative x y. bar plot built little bit differently. focus evenly-spaced bars (requiring single vector values) project zero line, clearly showing difference positive negative values. default, type nanoplot basic interactivity. One can hover data points vertical guides display values ascribed . guide left-hand side plot area display minimal maximal y values hover. Every box plot take collection values row construct plot horizontally. essentially standard box--whisker diagram outliers automatically displayed outside left right fences. basic customization options present cols_nanoplot(), many opportunities customizing nanoplots granular level possible nanoplot_options() helper function. function invoked options argument cols_nanoplot(). helper, layers nanoplots can selectively removed aesthetics remaining plot components can modified.","code":""},{"path":"https://gt.rstudio.com/reference/cols_nanoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a new column of nanoplots, taking input data from selected columns — cols_nanoplot","text":"","code":"cols_nanoplot(   data,   columns,   rows = everything(),   plot_type = c(\"line\", \"bar\", \"boxplot\"),   plot_height = \"2em\",   missing_vals = c(\"gap\", \"marker\", \"zero\", \"remove\"),   autoscale = FALSE,   autohide = TRUE,   columns_x_vals = NULL,   reference_line = NULL,   reference_area = NULL,   expand_x = NULL,   expand_y = NULL,   new_col_name = NULL,   new_col_label = NULL,   before = NULL,   after = NULL,   options = NULL )"},{"path":"https://gt.rstudio.com/reference/cols_nanoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a new column of nanoplots, taking input data from selected columns — cols_nanoplot","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns get data dependent variable <column-targeting expression> // required columns contain numeric data plotted nanoplots. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). Data collected columns concatenated together order resolution. rows Rows contain nanoplots <row-targeting expression> // default: everything() rows can specify rows contain nanoplots new column. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). plot_type type nanoplot display singl-kw:[line|bar|boxplot] // default: \"line\" Nanoplots can either take form line plot (using \"line\"), bar plot (\"bar\"), box plot (\"boxplot\"). line plot, default, contains layers data line, data points, data area. can deactivated using nanoplot_options(). bar plot, always visible layer data bars. Furthermore, line plot can optionally take x values columns_x_vals argument whereas bar plots box plots ignore data representing independent variable. plot_height height nanoplots scalar<character> // default: \"2em\" height nanoplots. default sensible value \"2em\". way comparison, far greater height default icons fmt_icon() (\"1em\") height images inserted via fmt_image() (also \"2em\" height default). missing_vals Treatment missing values singl-kw:[gap|marker|zero|remove] // default: \"gap\" missing values encountered within input data, three strategies available handling: (1) \"gap\" show data gaps sites missing data, data lines discontinuities bar plots missing bars; (2) \"marker\" behave like \"gap\" show prominent visual marks missing data locations; (3) \"zero\" replace NA values zero values; (4) \"remove\" remove incoming NA values. autoscale Automatically set x- y-axis scale limits based data scalar<logical> // default: FALSE Using autoscale = TRUE ensure bounds nanoplots produced based limits data combined input rows. result shared scale across nanoplots (y- x-axis data), useful cases nanoplot data compared across rows. autohide Automatically hide columns/columns_x_vals column(s) scalar<logical> // default: TRUE option automatically hide columns specified columns also columns_x_vals (used). columns state changed 'hidden' behave , just displayed finalized table. want 'input' columns viewable, set autohide = FALSE. columns_x_vals Columns containing values optional x variable <column-targeting expression> // default: NULL (optional) can optionally obtain data independent variable (.e., x-axis data) specifying columns columns_x_vals. \"line\" type plot (set via plot_type argument). can supply either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). Data collected columns concatenated together order resolution. reference_line Add reference line scalar<numeric|integer|character> // default: NULL (optional) reference line requires single input define line. static numeric value, applied nanoplots generated. , input can one following generating line underlying data: (1) \"mean\", (2) \"median\", (3) \"min\", (4) \"max\", (5) \"q1\", (6) \"q3\", (7) \"first\", (8) \"last\". reference_area Add reference area vector<numeric|integer|character>|list // default: NULL (optional) reference area requires two inputs define bottom top boundaries rectangular area. types values supplied expected reference_line, either static numeric value one following keywords generation value: (1) \"mean\", (2) \"median\", (3) \"min\", (4) \"max\", (5) \"q1\", (6) \"q3\", (7) \"first\", (8) \"last\". Input can either vector list two elements. expand_x, expand_y Expand plot scale x y directions vector<numeric|integer> // default: NULL (optional) need plots expand x y direction, provide one values expand_x expand_y. values provided outside range data provided plot result scale expansion. new_col_name Column name new column containing plots scalar<character> // default: NULL (optional) single column name quotation marks. Values extracted column provided compatible arguments. provided new column name \"nanoplots\". new_col_label Column label new column containing plots scalar<character> // default: NULL (optional) single column label. supplied column label inherit new_col_name (nothing provided argument, label \"nanoplots\"). , Column used anchor <column-targeting expression> // default: NULL (optional) single column-resolving expression column index can given either . column specifies new column containing nanoplots positioned among existing columns input data table. select helper functions starts_with() ends_with() can used column targeting, recommended single column name index used. ensure exactly one column provided either arguments (otherwise, function stopped). nothing provided either argument new column placed end column series. options Set options nanoplots obj:<nanoplot_options // default: NULL (optional) using nanoplot_options() helper function , can alter layout styling nanoplots new column.","code":""},{"path":"https://gt.rstudio.com/reference/cols_nanoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a new column of nanoplots, taking input data from selected columns — cols_nanoplot","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_nanoplot.html","id":"targeting-cells-with-columns-and-rows","dir":"Reference","previous_headings":"","what":"Targeting cells with columns and rows","title":"Add a new column of nanoplots, taking input data from selected columns — cols_nanoplot","text":"Targeting values insert nanoplots done columns additionally rows (nothing provided rows entire columns selected). Aside declaring column names c() (bare column names names quotes) can use also tidyselect-style expressions. can basic supplying select helper like starts_with(), , providing complex incantation like (~ .numeric(.x) & max(.x, na.rm = TRUE) > 1E6) targets numeric columns maximum value greater 1,000,000 (excluding NAs consideration). columns targeted, may also target rows within columns. can done variety ways. stub present, potentially row identifiers. can used much like column names columns-targeting scenario. can use simpler tidyselect-style expressions (select helpers work well ) can use quoted row identifiers c(). also possible use row indices (e.g., c(3, 5, 6)) though index values must correspond row numbers input data (indices necessarily match rearranged rows row groups present). One type expression possible, expression takes column values (can involve available columns table) returns logical vector.","code":""},{"path":"https://gt.rstudio.com/reference/cols_nanoplot.html","id":"how-to-supply-data-for-nanoplots","dir":"Reference","previous_headings":"","what":"How to supply data for nanoplots","title":"Add a new column of nanoplots, taking input data from selected columns — cols_nanoplot","text":"input data nanoplots naturally needs numeric two major ways formulate data: (1) single values across many columns, (2) using text-based value streams. pretty easy rationalize first, may already wide data input data frame anyway (take look illness towny datasets examples ). one data value per column key thing reference columns correct order. select helper, good column naming, columns intended order, snap. second option use text-based value streams. Sometimes simply want need multiple columns single column data might practical. make work, need set numerical values separated sort delimiter (comma, space, semicolon, get idea). example three numbers, written three ways: \"3.6 -2.44 1.98\", \"3.6, -2.44, 1.98\", \"3.6;-2.44;1.98\". can include NA values, problem, example : \"6.232 NA 3.7 0.93\". Another form value stream involves using datetimes ISO 8601 form YYYY-MM-DD HH:MM:SS. internally converted numeric values (seconds elapsed since \"1970-01-01 00:00:00\"). example datetime-based value stream : \"2012-06-12 08:24:13, 2012-06-12 10:37:08, 2012-06-12 14:03:24\". Value streams can pretty big want , deal containing individual values across multiple columns. case need provide two sets values (x y, line plots columns columns_x_vals), two equivalently sized value streams two columns. Value streams can also concatenated together referencing columns separate value streams.","code":""},{"path":"https://gt.rstudio.com/reference/cols_nanoplot.html","id":"reference-line-and-reference-area","dir":"Reference","previous_headings":"","what":"Reference line and reference area","title":"Add a new column of nanoplots, taking input data from selected columns — cols_nanoplot","text":"Neither horizontal reference line reference area present default view can added providing valid input values reference_line reference_area arguments. reference line can either static numeric value (supply number reference_line), can keyword computes reference line y value using data values nanoplot. following keywords can used: \"mean\": mean data values \"median\": Median data values \"min\": Minimum value set data values \"max\": maximum value \"q1\": first, lower, quartile data values \"q3\": third quartile, otherwise known upper quartile \"first\": first data value \"last\": last data value reference area accepts two inputs, can two keywords, keyword static numeric value, two numeric values.","code":""},{"path":"https://gt.rstudio.com/reference/cols_nanoplot.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a new column of nanoplots, taking input data from selected columns — cols_nanoplot","text":"make nanoplots illness dataset. columns beginning 'day' contain ordered measurement values, comprising seven individual daily results. Using cols_nanoplot() create new column hold nanoplots (new_col_name = \"nanoplots\"), referencing columns containing data (columns = starts_with(\"day\")). also possible define column label using new_col_label argument.    previous table showed us line-based nanoplots. can also make small bar plots cols_nanoplot(). take pizzaplace dataset make small summary table showing daily pizza sales type (four types). limited first ten days pizza sales 2015, , ten rows total. can use plot_type = \"bar\" make bar plots daily sales counts chicken, classic, supreme, veggie columns. know always four bars (one type pizza) can little creative apply colors bars use data_bar_fill_color argument nanoplot_options().    Now make another table contains two columns nanoplots. Starting towny dataset, first reduce subset columns rows. columns related either population density used input data two nanoplots. nanoplots use reference line generated median input data. naming new nanoplot-laden columns similar manner input data columns, can take advantage select helpers (e.g., using tab_spanner()). Many input data columns now redundant plots, elect hide cols_hide().    sza dataset can, just use dplyr tidyr, give us wide table full nanoplottable values. transform solar zenith angles solar altitude angles create column nanoplots using newly calculated values. NA values periods sun risen (usually 06:30 winter months) values replaced 0 using missing_vals = \"zero\". also elect create bar plots using plot_type = \"bar\" option. height plots bumped \"2.5em\" default \"2em\". Finally, use nanoplot_options() modify coloring data bars.    can use number time streams data nanoplots. demonstrate can make use creative transformation pizzaplace dataset. value stream really string delimited numeric values, like : \"7.24,84.2,14\". value stream can also contain dates /datetimes, example : \"2020-06-02 13:05:13,2020-06-02 14:24:05,2020-06-02 18:51:37\". data form can often convenient since different nanoplots might varying amounts data (holding different amounts data fixed number columns cumbersome). date time columns dataset use get x values denoting high-resolution time instants: second day pizza sold (true pizza analytics). also sell price pizza, 'll serve y values. pizzas belong four different groups (type column) group create value streams paste(..., collapse = \",\") inside  dplyr::summarize() call. two value streams row (number values) can now make gt table nanoplots.    Notice columns containing value streams hid due default argument autohide = TRUE , useful, need displayed anybody viewing table. Since lot data points connecting line valuable , also set show_data_line = FALSE nanoplot_options(). interesting see clusters differently priced pizzas entire day. Specifying currency nanoplot_options() nice touch since y values sale prices U.S. Dollars (hovering data points gives correctly formatted values). Finally, reference line based median gives pretty useful information. Seems like customers preferred getting \"chicken\"-type pizzas large size! Using gibraltar dataset, make series nanoplots across meteorological parameters temperature, humidity, wind speed. want customize appearance plots across three columns can make somewhat simpler assigning common set options nanoplot_options(). table want make comparisons across nanoplots particular column easier, , set autoscale = TRUE common y-axis scale parameters (based extents data).    Box plots can generated, just need use plot_type = \"boxplot\" make type nanoplot. Using small portion pizzaplace dataset, create simple table displays box plot pizza sales selection days. converting string-time 24-hour-clock time values number seconds elapsed day, get continuous values can incorporated box plot. , supplying function y_val_fmt_fn argument within nanoplot_options(), can transform integer seconds values back clock times display hover.","code":"illness |>   dplyr::slice_head(n = 10) |>   gt(rowname_col = \"test\") |>   tab_header(\"Partial summary of daily tests performed on YF patient\") |>   tab_stubhead(label = md(\"**Test**\")) |>   cols_hide(columns = starts_with(\"norm\")) |>   fmt_units(columns = units) |>   cols_nanoplot(     columns = starts_with(\"day\"),     new_col_name = \"nanoplots\",     new_col_label = md(\"*Progression*\")   ) |>   cols_align(align = \"center\", columns = nanoplots) |>   cols_merge(columns = c(test, units), pattern = \"{1} ({2})\") |>   tab_footnote(     footnote = \"Measurements from Day 3 through to Day 8.\",     locations = cells_column_labels(columns = nanoplots)   ) pizzaplace |>   dplyr::count(type, date) |>   tidyr::pivot_wider(names_from = type, values_from = n) |>   dplyr::slice_head(n = 10) |>   gt(rowname_col = \"date\") |>   tab_header(     title = md(\"First Ten Days of Pizza Sales in 2015\")   ) |>   cols_nanoplot(     columns = c(chicken, classic, supreme, veggie),     plot_type = \"bar\",     autohide = FALSE,     new_col_name = \"pizzas_sold\",     new_col_label = \"Sales by Type\",     options = nanoplot_options(       show_data_line = FALSE,       show_data_area = FALSE,       data_bar_stroke_color = \"transparent\",       data_bar_fill_color = c(\"brown\", \"gold\", \"purple\", \"green\")     )   ) |>   cols_width(pizzas_sold ~ px(150)) |>   cols_align(columns = -date, align = \"center\") |>   fmt_date(columns = date, date_style = \"yMMMEd\") |>   opt_all_caps() towny |>   dplyr::select(name, starts_with(\"population\"), starts_with(\"density\")) |>   dplyr::filter(population_2021 > 200000) |>   dplyr::arrange(desc(population_2021)) |>   gt() |>   fmt_integer(columns = starts_with(\"population\")) |>   fmt_number(columns = starts_with(\"density\"), decimals = 1) |>   cols_nanoplot(     columns = starts_with(\"population\"),     reference_line = \"median\",     autohide = FALSE,     new_col_name = \"population_plot\",     new_col_label = md(\"*Change*\")   ) |>   cols_nanoplot(     columns = starts_with(\"density\"),     plot_type = \"bar\",     autohide = FALSE,     new_col_name = \"density_plot\",     new_col_label = md(\"*Change*\")   ) |>   cols_hide(columns = matches(\"2001|2006|2011|2016\")) |>   tab_spanner(     label = \"Population\",     columns = starts_with(\"population\")   ) |>   tab_spanner(     label = \"Density ({{*persons* km^-2}})\",     columns = starts_with(\"density\")   ) |>   cols_label_with(     columns = -matches(\"plot\"),     fn = function(x) gsub(\"[^0-9]+\", \"\", x)   ) |>   cols_align(align = \"center\", columns = matches(\"plot\")) |>   cols_width(     name ~ px(140),     everything() ~ px(100)   ) |>   opt_horizontal_padding(scale = 2) sza |>   dplyr::filter(latitude == 20 & tst <= \"1200\") |>   dplyr::select(-latitude) |>   dplyr::filter(!is.na(sza)) |>   dplyr::mutate(saa = 90 - sza) |>   dplyr::select(-sza) |>   tidyr::pivot_wider(     names_from = tst,     values_from = saa,     names_sort = TRUE   ) |>   gt(rowname_col = \"month\") |>   tab_header(     title = \"Solar Altitude Angles\",     subtitle = \"Average values every half hour from 05:30 to 12:00\"   ) |>   cols_nanoplot(     columns = matches(\"0\"),     plot_type = \"bar\",     missing_vals = \"zero\",     new_col_name = \"saa\",     plot_height = \"2.5em\",     options = nanoplot_options(       data_bar_stroke_color = \"GoldenRod\",       data_bar_fill_color = \"DarkOrange\"     )   ) |>   tab_options(     table.width = px(400),     column_labels.hidden = TRUE   ) |>   cols_align(     align = \"center\",     columns = everything()   ) |>   tab_source_note(     source_note = \"The solar altitude angle is the complement to     the solar zenith angle. TMYK.\"   ) pizzaplace |>   dplyr::filter(date == \"2015-01-01\") |>   dplyr::mutate(date_time = paste(date, time)) |>   dplyr::select(type, date_time, price) |>   dplyr::group_by(type) |>   dplyr::summarize(     date_time = paste(date_time, collapse = \",\"),     sold = paste(price, collapse = \",\")   ) |>   gt(rowname_col = \"type\") |>   tab_header(     title = md(\"Pizzas sold on **January 1, 2015**\"),     subtitle = \"Between the opening hours of 11:30 to 22:30\"   ) |>   cols_nanoplot(     columns = sold,     columns_x_vals = date_time,     expand_x = c(\"2015-01-01 11:30\", \"2015-01-01 22:30\"),     reference_line = \"median\",     new_col_name = \"pizzas_sold\",     new_col_label = \"Pizzas Sold\",     options = nanoplot_options(       show_data_line = FALSE,       show_data_area = FALSE,       currency = \"USD\"     )   ) |>   cols_width(pizzas_sold ~ px(200)) |>   cols_align(columns = pizzas_sold, align = \"center\") |>   opt_all_caps() nanoplot_options_list <-   nanoplot_options(     data_point_radius = px(4),     data_point_stroke_width = px(2),     data_point_stroke_color = \"black\",     data_point_fill_color = \"white\",     data_line_stroke_width = px(4),     data_line_stroke_color = \"gray\",     show_data_line = TRUE,     show_data_points = TRUE,     show_data_area = FALSE,   )  gibraltar |>   dplyr::filter(date <= \"2023-05-14\") |>   dplyr::mutate(time = as.numeric(hms::as_hms(paste0(time, \":00\")))) |>   dplyr::mutate(humidity = humidity * 100) |>   dplyr::select(date, time, temp, humidity, wind_speed) |>   dplyr::group_by(date) |>   dplyr::summarize(     time = paste(time, collapse = \",\"),     temp = paste(temp, collapse = \",\"),     humidity = paste(humidity, collapse = \",\"),     wind_speed = paste(wind_speed, collapse = \",\"),   ) |>   dplyr::mutate(is_satsun = lubridate::wday(date) %in% c(1, 7)) |>   gt(rowname_col = \"date\") |>   tab_header(     title = \"Meteorological Summary of Gibraltar Station\",     subtitle = \"Data taken from May 1-14, 2023.\"   ) |>   fmt_date(columns = stub(), date_style = \"wd_m_day_year\") |>   cols_nanoplot(     columns = temp,     columns_x_vals = time,     expand_x = c(0, 86400),     autoscale = TRUE,     new_col_name = \"temperature_nano\",     new_col_label = \"Temperature\",     options = nanoplot_options_list   ) |>   cols_nanoplot(     columns = humidity,     columns_x_vals = time,     expand_x = c(0, 86400),     autoscale = TRUE,     new_col_name = \"humidity_nano\",     new_col_label = \"Humidity\",     options = nanoplot_options_list   ) |>   cols_nanoplot(     columns = wind_speed,     columns_x_vals = time,     expand_x = c(0, 86400),     autoscale = TRUE,     new_col_name = \"wind_speed_nano\",     new_col_label = \"Wind Speed\",     options = nanoplot_options_list   ) |>   cols_units(     temperature_nano = \":degree:C\",     humidity_nano = \"% (RH)\",     wind_speed_nano = \"m s^-1\"   ) |>   cols_hide(columns = is_satsun) |>   tab_style_body(     style = cell_fill(color = \"#E5FEFE\"),     values = TRUE,     targets = \"row\",     extents = c(\"body\", \"stub\")   ) |>   tab_style(     style = cell_text(align = \"center\"),     locations = cells_column_labels()   ) pizzaplace |>   dplyr::filter(date <= \"2015-01-14\") |>   dplyr::mutate(time = as.numeric(hms::as_hms(time))) |>   dplyr::summarize(time = paste(time, collapse = \",\"), .by = date) |>   dplyr::mutate(is_weekend = lubridate::wday(date) %in% 6:7) |>   gt() |>   tab_header(title = \"Pizza Sales in Early January 2015\") |>   fmt_date(columns = date, date_style = 2) |>   cols_nanoplot(     columns = time,     plot_type = \"boxplot\",     options = nanoplot_options(y_val_fmt_fn = function(x) hms::as_hms(x))   ) |>   cols_hide(columns = is_weekend) |>   cols_width(everything() ~ px(250)) |>   cols_align(align = \"center\", columns = nanoplots) |>   cols_align(align = \"left\", columns = date) |>   tab_style(     style = cell_borders(       sides = \"left\", color = \"gray\"),     locations = cells_body(columns = nanoplots)   ) |>   tab_style_body(     style = cell_fill(color = \"#E5FEFE\"),     values = TRUE,     targets = \"row\"   ) |>   tab_options(column_labels.hidden = TRUE)"},{"path":"https://gt.rstudio.com/reference/cols_nanoplot.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add a new column of nanoplots, taking input data from selected columns — cols_nanoplot","text":"5-8","code":""},{"path":"https://gt.rstudio.com/reference/cols_nanoplot.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Add a new column of nanoplots, taking input data from selected columns — cols_nanoplot","text":"v0.10.0 (October 7, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":null,"dir":"Reference","previous_headings":"","what":"Unhide one or more columns — cols_unhide","title":"Unhide one or more columns — cols_unhide","text":"cols_unhide() allows us take one hidden columns (usually done via cols_hide()) make visible final output table. may important cases user obtains gt_tbl object hidden columns motivation reveal one .","code":""},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unhide one or more columns — cols_unhide","text":"","code":"cols_unhide(data, columns)"},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unhide one or more columns — cols_unhide","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() columns unhide output display table. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()).","code":""},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unhide one or more columns — cols_unhide","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unhide one or more columns — cols_unhide","text":"hiding unhiding columns internally rendering directive, , columns 'hidden' still accessible useful expression provided rows argument. cols_unhide() function quietly changes visible state column (much like cols_hide() function) yield warnings messages changing state already-visible columns.","code":""},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unhide one or more columns — cols_unhide","text":"use small portion countrypops dataset create gt table. hide country_code_2 country_code_3 columns cols_hide().    tab_1 object provided without code source data regenerate , , user wants reveal otherwise hidden columns cols_unhide() becomes useful.","code":"tab_1 <-   countrypops |>   dplyr::filter(     country_name == \"Singapore\",     year %in% 2017:2021   ) |>   gt() |>   cols_hide(columns = c(country_code_2, country_code_3))  tab_1 tab_1 |> cols_unhide(columns = country_code_2)"},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Unhide one or more columns — cols_unhide","text":"5-13","code":""},{"path":"https://gt.rstudio.com/reference/cols_unhide.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Unhide one or more columns — cols_unhide","text":"v0.3.0 (May 12, 2021)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Define units for one or more columns — cols_units","title":"Define units for one or more columns — cols_units","text":"Column labels can sometimes contain measurement units, might range easy define typeset (e.g., \"m/s\") difficult. difficulty can arise need include subscripts superscripts, non-ASCII symbols, etc. cols_units() function tries make task easier letting apply text pertaining units various columns. takes advantage gt's specialized units notation (e.g., \"J Hz^-1 mol^-1\" can used generate units molar Planck constant). notation provides several conveniences defining units, letting produce correct formatting matter table output format might (.e., HTML, LaTeX, RTF, etc.). Details pertaining units notation can found section entitled use gt's units notation.","code":""},{"path":"https://gt.rstudio.com/reference/cols_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define units for one or more columns — cols_units","text":"","code":"cols_units(.data, ..., .list = list2(...), .units_pattern = NULL)"},{"path":"https://gt.rstudio.com/reference/cols_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define units for one or more columns — cols_units","text":".data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. ... Column units definitions <multiple expressions> // required (, use .list) Expressions assignment column units table columns .data. Two-sided formulas (e.g., <LHS> ~ <RHS>) can used, left-hand side corresponds selections columns right-hand side evaluates single-length values units apply. Column names enclosed c(). Select helpers like starts_with(), ends_with(), contains(), matches(), everything() can used LHS. Named arguments also valid input simple mappings column name gt units syntax; form <column name> = <units text>. Subsequent expressions operate columns assigned previously result overwriting column units definition values. .list Alternative ... <list multiple expressions> // required (, use ...) Allows use list input alternative .... .units_pattern Pattern combine column labels units scalar<character> // default: NULL (optional) optional pattern used combining column labels defined units. default pattern \"{1}, {2}\", \"{1}\" refers column label text \"{2}\" text related associated units. default can modified column_labels.units_pattern option found tab_options(). Setting value provide override column_labels.units_pattern default (resolved columns invocation cols_units()).","code":""},{"path":"https://gt.rstudio.com/reference/cols_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define units for one or more columns — cols_units","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_units.html","id":"how-to-use-gt-s-units-notation","dir":"Reference","previous_headings":"","what":"How to use gt's units notation","title":"Define units for one or more columns — cols_units","text":"units notation involves shorthand writing units feels familiar fine-tuned task hand. unit treated separate entity (parentheses symbols included) addition subscript text exponents flexible relatively easy formulate. best shown examples: \"m/s\" \"m / s\" render \"m/s\" \"m s^-1\" appear \"-1\" exponent intact \"m /s\" gives result, \"/<unit>\" equivalent \"<unit>^-1\" \"E_h\" render \"E\" \"h\" subscript \"t_i^2.5\" provides t \"\" subscript \"2.5\" exponent \"m[_0^2]\" use overstriking set scripts vertically \"g/L %C6H12O6%\" uses chemical formula (enclosed pair \"%\" characters) unit partial, formula render correctly subscripted numbers Common units difficult write using ASCII text may implicitly converted correct characters (e.g., \"u\" \"ug\", \"um\", \"uL\", \"umol\" converted Greek mu symbol; \"degC\" \"degF\" render degree sign temperature unit) can transform shorthand symbol/unit names enclosed \":\" (e.g., \":angstrom:\", \":ohm:\", etc.) proper symbols Greek letters can added enclosing letter name \":\"; can use lowercase letters (e.g., \":beta:\", \":sigma:\", etc.) uppercase letters (e.g., \":Alpha:\", \":Zeta:\", etc.) components unit (unit name, subscript, exponent) can fully partially italicized/emboldened surrounding text \"*\" \"**\"","code":""},{"path":"https://gt.rstudio.com/reference/cols_units.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define units for one or more columns — cols_units","text":"analyze pizzaplace data dplyr make gt table. separately defining new column labels cols_label() defining units (combine labels) cols_units(). default pattern combination \"{1}, {2}\" acceptable .    sza dataset wealth information generate smaller table contains average solar zenith angles noon different months different northern latitudes. column labels numbers representing latitudes convenient apply units 'degrees north' cols_units(). extra thing wanted ensure units placed directly column labels, .units_pattern = \"{1}{2}\". append units (\"{2}\") right column label (\"{1}\").    Taking portion towny dataset, use spanners describe columns use measurement units column labels. columns labels population density information replaced units defined cols_units(). use .units_pattern value \"{2}\", means units present (\"{1}\", representing column label text, omitted). Spanners added several invocations tab_spanner() declare last four columns contain.","code":"pizzaplace |>   dplyr::mutate(month = lubridate::month(date, label = TRUE, abbr = TRUE)) |>   dplyr::group_by(month) |>   dplyr::summarize(     n_sold = dplyr::n(),     rev = sum(price)   ) |>   dplyr::mutate(chg = (rev - dplyr::lag(rev)) / dplyr::lag(rev)) |>   dplyr::mutate(month = as.character(month)) |>   gt(rowname_col = \"month\") |>   fmt_integer(columns = n_sold) |>   fmt_currency(columns = rev, use_subunits = FALSE) |>   fmt_percent(columns = chg) |>   sub_missing() |>   cols_label(     n_sold = \"Number of Pizzas Sold\",     rev = \"Revenue Generated\",     chg = \"Monthly Changes in Revenue\"   ) |>   cols_units(     n_sold = \"units month^-1\",     rev = \"USD month^-1\",     chg = \"% change *m*/*m*\"   ) |>   cols_width(     stub() ~ px(40),     everything() ~ px(200)   ) sza |>   dplyr::filter(tst == \"1200\") |>   dplyr::select(-tst) |>   dplyr::arrange(desc(latitude)) |>   tidyr::pivot_wider(     names_from = latitude,     values_from = sza   ) |>   gt(rowname_col = \"month\") |>   cols_units(     everything() ~ \":degree:N\",     .units_pattern = \"{1}{2}\"   ) |>   tab_spanner(     label = \"Solar Zenith Angle\",     columns = everything()   ) |>   text_transform(     fn = toupper,     locations = cells_stub()   ) |>   tab_style(     style = cell_text(align = \"right\"),     locations = cells_stub()   ) towny |>   dplyr::select(     name, land_area_km2,     ends_with(\"2016\"), ends_with(\"2021\")   ) |>   dplyr::slice_max(population_2021, n = 10) |>   gt(rowname_col = \"name\") |>   tab_stubhead(label = \"City\") |>   fmt_integer() |>   cols_label(     land_area_km2 ~ \"Area, {{km^2}}\",     starts_with(\"population\") ~ \"\",     starts_with(\"density\") ~ \"\"   ) |>   cols_units(     starts_with(\"population\") ~ \"*ppl*\",     starts_with(\"density\") ~ \"*ppl* km^-2\",     .units_pattern = \"{2}\"   ) |>   tab_spanner(     label = \"Population\",     columns = starts_with(\"population\"),     gather = FALSE   ) |>   tab_spanner(     label = \"Density\",     columns = starts_with(\"density\"),     gather = FALSE   ) |>   tab_spanner(     label = \"2016\",     columns = ends_with(\"2016\"),     gather = FALSE   ) |>   tab_spanner(     label = \"2021\",     columns = ends_with(\"2021\"),     gather = FALSE   ) |>   tab_style(     style = cell_text(align = \"center\"),     locations = cells_column_labels(       c(starts_with(\"population\"), starts_with(\"density\"))     )   ) |>   cols_width(everything() ~ px(120)) |>   opt_horizontal_padding(scale = 3)"},{"path":"https://gt.rstudio.com/reference/cols_units.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Define units for one or more columns — cols_units","text":"5-6","code":""},{"path":"https://gt.rstudio.com/reference/cols_units.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Define units for one or more columns — cols_units","text":"v0.10.0 (October 7, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the widths of columns — cols_width","title":"Set the widths of columns — cols_width","text":"Manual specifications column widths can performed using cols_width() function. choose columns get specific widths. can units pixels (easily set use px() helper function), , percentages (pct() helper function useful). Width assignments supplied ... two-sided formulas, left-hand side defines target columns right-hand side single dimension.","code":""},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the widths of columns — cols_width","text":"","code":"cols_width(.data, ..., .list = list2(...))"},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the widths of columns — cols_width","text":".data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. ... Column width assignments <multiple expressions> // required (, use .list) Expressions assignment column widths table columns .data. Two-sided formulas (e.g, <LHS> ~ <RHS>) can used, left-hand side corresponds selections columns right-hand side evaluates single-length character values form {##}px (.e., pixel dimensions); px() helper function best used purpose. Column names enclosed c(). column-based select helpers starts_with(), ends_with(), contains(), matches(), everything() can used LHS. Subsequent expressions operate columns assigned previously result overwriting column width values (cols_width() call across separate calls). columns can assigned default width value using everything() left-hand side. .list Alternative ... <list multiple expressions> // required (, use ...) Allows use list input alternative ....","code":""},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the widths of columns — cols_width","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the widths of columns — cols_width","text":"Column widths can set absolute relative values (px percentage values). columns specified treated variable width. sizing behavior column widths depends combination value types, , whether table width set (, , expressed absolute relative value). Widths table container can individually modified table.width container.width arguments within tab_options()).","code":""},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the widths of columns — cols_width","text":"Use select columns exibble dataset create gt table. can specify widths columns cols_width(). done named arguments ..., specifying exact widths table columns (using everything() end capture remaining columns).","code":"exibble |>   dplyr::select(     num, char, date,     datetime, row   ) |>   gt() |>   cols_width(     num ~ px(150),     ends_with(\"r\") ~ px(100),     starts_with(\"date\") ~ px(200),     everything() ~ px(60)   )"},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Set the widths of columns — cols_width","text":"5-3","code":""},{"path":"https://gt.rstudio.com/reference/cols_width.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Set the widths of columns — cols_width","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/constants.html","id":null,"dir":"Reference","previous_headings":"","what":"The fundamental physical constants — constants","title":"The fundamental physical constants — constants","text":"dataset contains values 300 basic fundamental constants nature. values originate 2018 adjustment based latest relevant precision measurements improvements theoretical calculations. work carried authority Task Group Fundamental Constants (TGFC) Committee Data International Science Council (CODATA). updated values became available May 20, 2019. published http://physics.nist.gov/constants, website Fundamental Constants Data Center National Institute Standards Technology (NIST), Gaithersburg, Maryland, USA.","code":""},{"path":"https://gt.rstudio.com/reference/constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The fundamental physical constants — constants","text":"","code":"constants"},{"path":"https://gt.rstudio.com/reference/constants.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The fundamental physical constants — constants","text":"tibble 354 rows 4 variables: name name constant. value value constant. uncert uncertainty associated value. NA value seen 'exact' value (e.g., electron volt exact value 1.602 176 634 e-19 J). sf_value,sf_uncert number significant figures associated value uncertainty value. units units associated constant.","code":""},{"path":"https://gt.rstudio.com/reference/constants.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"The fundamental physical constants — constants","text":"DATA-12","code":""},{"path":"https://gt.rstudio.com/reference/constants.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"The fundamental physical constants — constants","text":"v0.10.0 (October 7, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/constants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The fundamental physical constants — constants","text":"","code":"dplyr::glimpse(constants) #> Rows: 354 #> Columns: 6 #> $ name      <chr> \"alpha particle-electron mass ratio\", \"alpha particle mass\",… #> $ value     <dbl> 7.294300e+03, 6.644657e-27, 5.971920e-10, 3.727379e+03, 4.00… #> $ uncert    <dbl> 2.4e-07, 2.0e-36, 1.8e-19, 1.1e-06, 6.3e-11, 1.2e-12, 2.2e-1… #> $ sf_value  <dbl> 12, 11, 11, 11, 13, 11, 12, 13, 9, 12, 12, 11, 11, 11, 12, 1… #> $ sf_uncert <dbl> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ units     <chr> NA, \"kg\", \"J\", \"MeV\", \"u\", \"kg mol^-1\", NA, NA, \"m\", \"kg\", \"…"},{"path":"https://gt.rstudio.com/reference/countrypops.html","id":null,"dir":"Reference","previous_headings":"","what":"Yearly populations of countries from 1960 to 2023 — countrypops","title":"Yearly populations of countries from 1960 to 2023 — countrypops","text":"dataset presents yearly, total populations countries. Total population based counts residents regardless legal status citizenship. Country identifiers include English-language country names, 2- 3-letter ISO 3166-1 country codes. row contains population value given year (1960 2023). NA values within population indicate non-existence entity year.","code":""},{"path":"https://gt.rstudio.com/reference/countrypops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Yearly populations of countries from 1960 to 2023 — countrypops","text":"","code":"countrypops"},{"path":"https://gt.rstudio.com/reference/countrypops.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Yearly populations of countries from 1960 to 2023 — countrypops","text":"tibble 13,760 rows 5 variables: country_name name country. country_code_2, country_code_3 2- 3-letter ISO 3166-1 country codes. year year population estimate. population population estimate, midway year.","code":""},{"path":"https://gt.rstudio.com/reference/countrypops.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Yearly populations of countries from 1960 to 2023 — countrypops","text":"https://data.worldbank.org/indicator/SP.POP.TOTL","code":""},{"path":"https://gt.rstudio.com/reference/countrypops.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"Yearly populations of countries from 1960 to 2023 — countrypops","text":"DATA-1","code":""},{"path":"https://gt.rstudio.com/reference/countrypops.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"Yearly populations of countries from 1960 to 2023 — countrypops","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/currency.html","id":null,"dir":"Reference","previous_headings":"","what":"Supply a custom currency symbol to fmt_currency() — currency","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"currency() helper function makes easy specify context-aware currency symbol currency argument fmt_currency(). Since gt can render tables several output formats, currency() allows different variations custom symbol based output context (html, latex, rtf, default). number decimal places custom currency defaults 2, however, value set decimals argument fmt_currency() take precedence.","code":""},{"path":"https://gt.rstudio.com/reference/currency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"","code":"currency(..., .list = list2(...))"},{"path":"https://gt.rstudio.com/reference/currency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"... Currency symbols output context <named arguments> // required (, use .list) One named arguments using output contexts names currency symbol text values. .list Alternative ... <list multiple expressions> // required (, use ...) Allows use list input alternative ....","code":""},{"path":"https://gt.rstudio.com/reference/currency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"list object class gt_currency.","code":""},{"path":"https://gt.rstudio.com/reference/currency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"can use combination html, latex, rtf, default named arguments currency text namesake contexts. default value used fallback exist dedicated currency text value particular output context (e.g., table rendered HTML use currency(latex = \"LTC\", default = \"ltc\"), currency symbol \"ltc\". convenience, provide single string without name, taken default (.e., currency(\"ltc\") equivalent currency(default = \"ltc\")). However, specify currency strings multiple output contexts, names required every context.","code":""},{"path":"https://gt.rstudio.com/reference/currency.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"Use exibble dataset create gt table. Within fmt_currency() call, format currency column currency values guilder (defunct Dutch currency). can register custom currency currency() helper function, supplying \"&fnof;\" HTML entity html outputs using \"f\" type gt output.","code":"exibble |>   gt() |>   fmt_currency(     columns = currency,     currency = currency(       html = \"&fnof;\",       default = \"f\"     ),     decimals = 2   )"},{"path":"https://gt.rstudio.com/reference/currency.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"8-6","code":""},{"path":"https://gt.rstudio.com/reference/currency.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Supply a custom currency symbol to fmt_currency() — currency","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/data_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform data cell colorization — data_color","title":"Perform data cell colorization — data_color","text":"possible add color data cells according values data_color(). multitude ways perform data cell colorizing : targeting: can constrain columns rows receive colorization treatment (columns rows arguments) direction: ordinarily perform coloring column-wise fashion option color data cells row-wise manner (controlled direction argument) coloring method: data_color() automatically computes colors based column type can choose specific methodology (e.g., bins quantiles) function generate colors accordingly; method argument controls keywords arguments act inputs specific methods coloring function: custom function can supplied fn argument finer control color evaluation data; scales::col_*() color mapping functions can used function might want define color palettes: palette supply vector colors, viridis RColorBrewer palette name, , palette paletteer package value domain: can either opt range values define domain, , specify one explicitly domain argument indirect color application: possible compute colors one column apply one different columns; can even perform color mapping multiple source columns multiple target columns color application: apply_to argument, option whether apply cell-specific colors cell background cell text text autocoloring: colorizing cell background, data_color() automatically recolor foreground text provide best contrast (can deactivated autocolor_text = FALSE) data_color() fail default options used, typically provide type colorization really need. can however safely iterate collection different options without running many errors.","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform data cell colorization — data_color","text":"","code":"data_color(   data,   columns = everything(),   rows = everything(),   direction = c(\"column\", \"row\"),   target_columns = NULL,   method = c(\"auto\", \"numeric\", \"bin\", \"quantile\", \"factor\"),   palette = NULL,   domain = NULL,   bins = 8,   quantiles = 4,   levels = NULL,   ordered = FALSE,   na_color = NULL,   alpha = NULL,   reverse = FALSE,   fn = NULL,   apply_to = c(\"fill\", \"text\"),   autocolor_text = TRUE,   contrast_algo = c(\"apca\", \"wcag\"),   colors = NULL )"},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform data cell colorization — data_color","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() columns cell data color operations constrained. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows form constraint cell data color operations. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). direction Color computation direction singl-kw:[column|row] // default: \"column\" color computations performed column-wise row-wise? default set \"column\" keyword colors applied columns. alternative option \"row\" keyword ensures color mapping works across rows. target_columns Indirect columns target <row-targeting expression> // default: NULL optional indirect column coloring treatments, can supply columns receive styling. necessary precondition must use direction = \"column\". columns resolves single column may use one columns target_columns. hand columns resolves multiple columns, target_columns must resolve multiple. method Color computation method singl-kw:[auto|numeric|bin|quantile|factor] // default: \"auto\" method computing color based data within body cells. Can \"auto\" (default), \"numeric\", \"bin\", \"quantile\", \"factor\". \"auto\" method automatically choose \"numeric\" method numerical input data \"factor\" method non-numeric inputs. palette Color palette vector<character> // default: NULL (optional) vector color names, color class can cast vector color names, name RColorBrewer palette, name viridis palette, discrete palette accessible paletteer package using <package>::<palette> syntax (e.g., \"wesanderson::IsleofDogs1\"). providing vector colors palette, color value provided must either color name (R/X11 color names CSS 3.0 color names) hexadecimal string form \"#RRGGBB\" \"#RRGGBBAA\". nothing provided , default R color palette used (.e., colors palette()). domain Value domain vector<numeric|integer|character> // default: NULL (optional) possible values can mapped. \"numeric\" \"bin\" methods, can numeric range specified length two vector. Representative numeric data needed \"quantile\" method categorical data must used \"factor\" method. NULL (default value), values column row (depending direction) value represent domain. bins Specification bin number scalar<numeric|integer> // default: 8 method = \"bin\" can either numeric vector two unique cut points, , single numeric value (greater equal 2) giving number intervals domain values cut. default, 8. quantiles Specification quantile number scalar<numeric|integer> // default: 4 method = \"quantile\" number equal-size quantiles use. default, set 4. levels Specification factor levels vector<character> // default: NULL (optional) method = \"factor\" allows alternate way specifying levels. anything provided value supplied domain ignored. character vector unique values. ordered Use ordered factor scalar<logical> // default: FALSE method = \"factor\", setting TRUE means vector supplied domain treated correct order vector needs coerced factor. default, FALSE. na_color Default color NA values scalar<character> // default: NULL (optional) color use missing values. default (na_color = NULL), color gray (\"#808080\") used. option effect providing color-mapping function fn. alpha Transparency value scalar<numeric|integer>(0>=val>=1) // default: NULL (optional) optional, fixed alpha transparency value applied color palette values (regardless whether color palette directly supplied palette generated color mapping function via fn). reverse Reverse order computed colors scalar<logical> // default: FALSE colors computed operate reverse order? TRUE colors normally change red blue change opposite direction. fn Color-mapping function function // default: NULL (optional) color-mapping function. function able take vector data values input return equal-length vector color values. scales::col_*() functions (.e.,scales::col_numeric(), scales::col_bin(), scales::col_factor()) can invoked options, functions return color-mapping function. apply_to apply color singl-kw:[fill|text] // default: \"fill\" style element colors applied ? Options include cell background (default, given \"fill\") cell text (\"text\"). autocolor_text Automatically recolor text scalar<logical> // default: TRUE option let gt modify coloring text within cells undergoing background coloring. result better text--background color contrast. default, set TRUE. contrast_algo Color contrast algorithm choice singl-kw:[apca|wcag] // default: \"apca\" color contrast algorithm use autocolor_text = TRUE. default \"apca\" (Accessible Perceptual Contrast Algorithm) alternative \"wcag\" (Web Content Accessibility Guidelines). colors Deprecated Color mapping function function // default: NULL (optional) argument deprecated. Use fn argument instead provide scales-based color-mapping function. providing palette, use palette argument.","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform data cell colorization — data_color","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"color-computation-methods","dir":"Reference","previous_headings":"","what":"Color computation methods","title":"Perform data cell colorization — data_color","text":"data_color() offers four distinct methods computing color based cell data values. set method argument options go keywords \"numeric\", \"bin\", \"quantile\", \"factor\". arguments data_color() variously support methods (e.g., bins \"bin\" method, etc.). go method, providing short explanation one options available.","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"-numeric-","dir":"Reference","previous_headings":"","what":"\"numeric\"","title":"Perform data cell colorization — data_color","text":"\"numeric\" method provides simple linear mapping continuous numeric data interpolated palette. Internally, uses scales::col_numeric(). method suited numeric data cell values can make use supplied domain value, form two-element numeric vector describing range values, provided.","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"-bin-","dir":"Reference","previous_headings":"","what":"\"bin\"","title":"Perform data cell colorization — data_color","text":"\"bin\" method provides mapping continuous numeric data value-based bins. Internally, uses scales::col_bin() uses base::cut(). \"numeric\" method, \"bin\" meant numeric data cell values. use domain value supported method. bins argument data_color() specific method, offering ability : (1) specify number bins, (2) provide vector cut points.","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"-quantile-","dir":"Reference","previous_headings":"","what":"\"quantile\"","title":"Perform data cell colorization — data_color","text":"\"quantile\" method provides mapping continuous numeric data quantiles. Internally, uses scales::col_quantile() uses stats::quantile(). Input data cell values numeric, \"numeric\" \"bin\" methods. numeric domain value supported method. quantiles argument data_color() controls number equal-size quantiles use.","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"-factor-","dir":"Reference","previous_headings":"","what":"\"factor\"","title":"Perform data cell colorization — data_color","text":"\"factor\" method provides mapping factors colors. discrete palettes, color interpolation used number factors match number colors palette. Internally, uses scales::col_factor(). Input data cell values can type (.e., factor, character, numeric values, supported). optional input domain take form categorical data. levels ordered arguments data_color() support method.","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"color-palette-access-from-rcolorbrewer-and-viridis","dir":"Reference","previous_headings":"","what":"Color palette access from RColorBrewer and viridis","title":"Perform data cell colorization — data_color","text":"palettes RColorBrewer package select palettes viridis can accessed providing palette name palette. RColorBrewer 35 available palettes: can access four colorblind-friendly palettes viridis: \"viridis\", \"magma\", \"plasma\", \"inferno\". Simply provide one names palette.","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"color-palette-access-from-paletteer","dir":"Reference","previous_headings":"","what":"Color palette access from paletteer","title":"Perform data cell colorization — data_color","text":"Choosing right color palette can often difficult hard discover suitable palettes obtain vector colors. make process easier can elect use paletteer package, makes wide range palettes various R packages readily available. info_paletteer() information table allows us easily inspect discrete color palettes available paletteer. need specify palette associated package using <package>::<palette> syntax (e.g., \"tvthemes::Stannis\") palette argument. requirement using paletteer way package must installed (gt import paletteer currently). can easily done install.packages(\"paletteer\"). package installed result error using <package>::<palette> syntax palette.","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"foreground-text-and-background-fill","dir":"Reference","previous_headings":"","what":"Foreground text and background fill","title":"Perform data cell colorization — data_color","text":"default, gt choose ideal text color (maximal contrast) colorizing background data cells. option can disabled setting autocolor_text FALSE. contrast_algo argument lets us choose two color contrast algorithms: \"apca\" (Accessible Perceptual Contrast Algorithm, default algo) \"wcag\" (Web Content Accessibility Guidelines).","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform data cell colorization — data_color","text":"data_color() can used without supplied arguments colorize gt table. exibble dataset:    happened data_color() applies background colors cells every column default palette R (accessed palette()). default method applying color \"auto\", numeric values use \"numeric\" method character factor values use \"factor\" method. text color undergoes automatic modification maximizes contrast (since autocolor_text TRUE default). can use available method keywords gt apply color compatible values. use \"numeric\" method supply palette values \"red\" \"green\".    options place see numeric columns num currency received color treatments. Moreover, palette colors mapped lower upper limits data column; interpolated colors used values numeric limits two columns. can constrain cells coloring applied columns rows arguments. , can manually set limits data domain argument (preferable cases). , domain set domain = c(0, 50).    can use palettes available RColorBrewer viridis packages. make new gt table subset countrypops dataset. , data_color(), apply coloring population column \"numeric\" method, use domain 2.5 3.4 million, specify palette = \"viridis\".    can alternatively use fn argument supplying scales-based function scales::col_numeric(). function call return function (fn argument actually requires) takes vector numeric values returns color values. alternate version code returns table previous example.    Using function fn can useful want make use specialized arguments scales::col_*() functions. even supply specialized function performing complex colorizing treatments! data_color() way apply colorization indirectly columns. , can apply colors column different one used generate specific colors. trick use target_columns argument. complete countrypops-based table example.    specifying single column columns can use many target_columns values want. make another countrypops-based table map generated colors year column columns table. time, palette used \"inferno\" (also viridis package).    Now, time use pizzaplace create gt table. color palette used \"ggsci::red_material\" one (ggsci R package also obtainable paletteer package). Colorization applied sold income columns. specify columns columns table. Also, domain set . use bounds available data column.    Colorization can occur row-wise manner. key making happen using direction = \"row\". use sza dataset make gt table. , color applied values across 'month' data table. useful setting domain bounds row captured, coloring cell values relative range. palette \"PuOr\" RColorBrewer package (name required).    Notice na_color = \"white\" used, avoids appearance gray cells missing values (also removed \"NA\" text sub_missing(), opting empty strings).","code":"exibble |>   gt() |>   data_color() exibble |>   gt() |>   data_color(     method = \"numeric\",     palette = c(\"red\", \"green\")   ) exibble |>   gt() |>   data_color(     columns = currency,     rows = currency < 50,     method = \"numeric\",     palette = c(\"red\", \"green\"),     domain = c(0, 50)   ) countrypops |>   dplyr::select(-contains(\"code\")) |>   dplyr::filter(     country_name == \"Bangladesh\",     year %in% 2012:2021   ) |>   gt() |>   data_color(     columns = population,     method = \"numeric\",     palette = \"viridis\",     domain = c(150E6, 170E6),     reverse = TRUE   ) countrypops |>   dplyr::select(-contains(\"code\")) |>   dplyr::filter(     country_name == \"Bangladesh\",     year %in% 2012:2021   ) |>   gt() |>   data_color(     columns = population,     fn = scales::col_numeric(       palette = \"viridis\",       domain = c(150E6, 170E6),       reverse = TRUE     )   ) countrypops |>   dplyr::filter(country_code_3 %in% c(\"FRA\", \"GBR\")) |>   dplyr::filter(year %% 10 == 0) |>   dplyr::select(-contains(\"code\")) |>   dplyr::mutate(color = \"\") |>   gt(groupname_col = \"country_name\") |>   fmt_integer(columns = population) |>   data_color(     columns = population,     target_columns = color,     method = \"numeric\",     palette = \"viridis\",     domain = c(4E7, 7E7)   ) |>   cols_label(     year = \"\",     population = \"Population\",     color = \"\"   ) |>   opt_vertical_padding(scale = 0.65) countrypops |>   dplyr::filter(country_code_3 %in% c(\"FRA\", \"GBR\", \"ITA\")) |>   dplyr::select(-contains(\"code\")) |>   dplyr::filter(year %% 5 == 0) |>   tidyr::pivot_wider(     names_from = \"country_name\",     values_from = \"population\"   ) |>   gt() |>   fmt_integer(columns = c(everything(), -year)) |>   cols_width(     year ~ px(80),     everything() ~ px(160)   ) |>   opt_all_caps() |>   opt_vertical_padding(scale = 0.75) |>   opt_horizontal_padding(scale = 3) |>   data_color(     columns = year,     target_columns = everything(),     palette = \"inferno\"   ) |>   tab_options(     table_body.hlines.style = \"none\",     column_labels.border.top.color = \"black\",     column_labels.border.bottom.color = \"black\",     table_body.border.bottom.color = \"black\"   ) pizzaplace |>   dplyr::group_by(type, size) |>   dplyr::summarize(     sold = dplyr::n(),     income = sum(price),     .groups = \"drop_last\"   ) |>   dplyr::group_by(type) |>   dplyr::mutate(f_sold = sold / sum(sold)) |>   dplyr::mutate(size = factor(     size, levels = c(\"S\", \"M\", \"L\", \"XL\", \"XXL\"))   ) |>   dplyr::arrange(type, size) |>   gt(     rowname_col = \"size\",     groupname_col = \"type\"   ) |>   fmt_percent(     columns = f_sold,     decimals = 1   ) |>   cols_merge(     columns = c(size, f_sold),     pattern = \"{1} ({2})\"   ) |>   cols_align(align = \"left\", columns = stub()) |>   data_color(     method = \"numeric\",     palette = \"ggsci::red_material\"   ) sza |>   dplyr::filter(latitude == 20 & tst <= \"1200\") |>   dplyr::select(-latitude) |>   dplyr::filter(!is.na(sza)) |>   tidyr::spread(key = \"tst\", value = sza) |>   gt(rowname_col = \"month\") |>   sub_missing(missing_text = \"\") |>   data_color(     direction = \"row\",     palette = \"PuOr\",     na_color = \"white\"   )"},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Perform data cell colorization — data_color","text":"3-36","code":""},{"path":"https://gt.rstudio.com/reference/data_color.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Perform data cell colorization — data_color","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/default_fonts.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide a vector of sensible system fonts for use with gt tables — default_fonts","title":"Provide a vector of sensible system fonts for use with gt tables — default_fonts","text":"vector fonts given default_fonts() can safely used gt table rendered HTML since font stack expected available across wide set systems. can always specify additional fonts use place higher precedence order, done prepending vector (.e., font stack placed act set fallbacks). vector fonts useful specifying font values inside cell_text() (usable tab_style() tab_style_body()). using opt_table_font() (also font argument), probably need specify vector fonts since function prepends font names (handled add option, TRUE default).","code":""},{"path":"https://gt.rstudio.com/reference/default_fonts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide a vector of sensible system fonts for use with gt tables — default_fonts","text":"","code":"default_fonts()"},{"path":"https://gt.rstudio.com/reference/default_fonts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide a vector of sensible system fonts for use with gt tables — default_fonts","text":"character vector font names.","code":""},{"path":"https://gt.rstudio.com/reference/default_fonts.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide a vector of sensible system fonts for use with gt tables — default_fonts","text":"use exibble dataset create simple, two-column gt table (keeping char time columns). Attempting modify fonts used time column much safer default_fonts() appended end font listing inside cell_text(). happen, since \"Comic Sansa\" \"Menloa\" fonts exist, get","code":"exibble |>   dplyr::select(char, time) |>   gt() |>   tab_style(     style = cell_text(       font = c(\"Comic Sansa\", \"Menloa\", default_fonts())     ),     locations = cells_body(columns = time)   )"},{"path":"https://gt.rstudio.com/reference/default_fonts.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Provide a vector of sensible system fonts for use with gt tables — default_fonts","text":"8-32","code":""},{"path":"https://gt.rstudio.com/reference/default_fonts.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Provide a vector of sensible system fonts for use with gt tables — default_fonts","text":"v0.2.2 (August 5, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/escape_latex.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform LaTeX escaping — escape_latex","title":"Perform LaTeX escaping — escape_latex","text":"Text may contain several characters special meanings LaTeX. escape_latex() transform character vector safe use within LaTeX tables.","code":""},{"path":"https://gt.rstudio.com/reference/escape_latex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform LaTeX escaping — escape_latex","text":"","code":"escape_latex(text)"},{"path":"https://gt.rstudio.com/reference/escape_latex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform LaTeX escaping — escape_latex","text":"text LaTeX text vector<character> // required character vector containing text LaTeX-escaped.","code":""},{"path":"https://gt.rstudio.com/reference/escape_latex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform LaTeX escaping — escape_latex","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/escape_latex.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Perform LaTeX escaping — escape_latex","text":"8-29","code":""},{"path":"https://gt.rstudio.com/reference/escape_latex.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Perform LaTeX escaping — escape_latex","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/exibble.html","id":null,"dir":"Reference","previous_headings":"","what":"A toy example tibble for testing with gt: exibble — exibble","title":"A toy example tibble for testing with gt: exibble — exibble","text":"tibble contains data different classes, makes well-suited quick experimentation functions package. contains eight rows numeric, character, factor columns. last 4 rows contain NA values majority tibble's columns (1 missing value per column). date, time, datetime columns character-based dates/times familiar ISO 8601 format. row group columns provide unique rownames two groups (grp_a grp_b) experimenting gt() function's rowname_col groupname_col arguments.","code":""},{"path":"https://gt.rstudio.com/reference/exibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A toy example tibble for testing with gt: exibble — exibble","text":"","code":"exibble"},{"path":"https://gt.rstudio.com/reference/exibble.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A toy example tibble for testing with gt: exibble — exibble","text":"tibble 8 rows 9 variables: num numeric column ordered increasingly larger values. char character column composed names fruits h. fctr factor column numbers 1 8, written . date, time, datetime Character columns dates, times, datetimes. currency numeric column useful testing currency-based formatting. row character column format row_X can useful testing row labels table stub. group character column four grp_a values four grp_b values can useful testing tables contain row groups.","code":""},{"path":"https://gt.rstudio.com/reference/exibble.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"A toy example tibble for testing with gt: exibble — exibble","text":"DATA-6","code":""},{"path":"https://gt.rstudio.com/reference/exibble.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"A toy example tibble for testing with gt: exibble — exibble","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/exibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A toy example tibble for testing with gt: exibble — exibble","text":"","code":"exibble #> # A tibble: 8 × 9 #>           num char       fctr  date       time  datetime    currency row   group #>         <dbl> <chr>      <fct> <chr>      <chr> <chr>          <dbl> <chr> <chr> #> 1       0.111 apricot    one   2015-01-15 13:35 2018-01-01…    50.0  row_1 grp_a #> 2       2.22  banana     two   2015-02-15 14:40 2018-02-02…    18.0  row_2 grp_a #> 3      33.3   coconut    three 2015-03-15 15:45 2018-03-03…     1.39 row_3 grp_a #> 4     444.    durian     four  2015-04-15 16:50 2018-04-04… 65100    row_4 grp_a #> 5    5550     NA         five  2015-05-15 17:55 2018-05-05…  1326.   row_5 grp_b #> 6      NA     fig        six   2015-06-15 NA    2018-06-06…    13.3  row_6 grp_b #> 7  777000     grapefruit seven NA         19:10 2018-07-07…    NA    row_7 grp_b #> 8 8880000     honeydew   eight 2015-08-15 20:20 NA              0.44 row_8 grp_b"},{"path":"https://gt.rstudio.com/reference/extract_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the table body from a gt object — extract_body","title":"Extract the table body from a gt object — extract_body","text":"can extract body gt table, even various stages rendering, gt_tbl object using extract_body(). default, data frame returned gone build stages can intercept table body certain build stage. eight different build stages notes : \"init\": body table initialized , entirely NA values. important note columns character type first stage. columns remain order input data table. \"fmt_applied\": cell values formatting applied migrated body table. cells remain NA values. Depending output type, formatting may also different. \"sub_applied\": cell values substitution functions applied (whether previously formatted) migrated body table modified place (formatted). cells neither formatted undergone substitution remain NA values. \"unfmt_included\": cells either formatting substitution operations applied migrated body table. NA values now become string \"NA\", , true missing values body table. \"cols_merged\": result column-merging operations (cols_merge() related functions) materialized . Columns asked hidden present (.e., hiding columns remove body table). \"body_reassembled\": Though columns move positions rows can move different positions, usually due migration different row groups. stage, rows finalized order seen associated display table. \"text_transformed\": Various text_*() functions gt can operate body cells (now fully formatted stage) return transformed character values. stage, effects functions apparent. \"footnotes_attached\": Footnote marks attached body cell values (either left right content). stage performs said attachment.","code":""},{"path":"https://gt.rstudio.com/reference/extract_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the table body from a gt object — extract_body","text":"","code":"extract_body(   data,   build_stage = NULL,   incl_hidden_cols = FALSE,   incl_stub_cols = TRUE,   ...,   output = c(\"html\", \"latex\", \"rtf\", \"word\", \"grid\") )"},{"path":"https://gt.rstudio.com/reference/extract_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the table body from a gt object — extract_body","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. build_stage build stage formatted R data frame scalar<character> // default: NULL (optional) gt undergoes rendering, body table proceeds several build stages. Providing single stage name yield data frame extracted completed stage. build stages order: (1) \"init\", (2) \"fmt_applied\", (3) \"sub_applied\", (4) \"unfmt_included\", (5) \"cols_merged\", (6) \"body_reassembled\", (7) \"text_transformed\", (8) \"footnotes_attached\". supplying value build_stage entire build table body (.e., including \"footnotes_attached\" stage) performed returning data frame. incl_hidden_cols hidden columns included? scalar<logical> // default: FALSE Certain columns may hidden final display via cols_hide(). default, columns part extracted data frame. However, can choose include using incl_hidden_cols = TRUE. incl_stub_cols stub columns included? scalar<logical> // default: TRUE stub columns gt object (may consist grouping column column row labels) included extracted data clarity clearly marked names \"::group_id::\" \"::rowname::\". can exclude setting incl_stub_cols = FALSE. ... dots future extensions must empty. output Output format singl-kw:[html|latex|rtf|word] // default: \"html\" output format resulting data frame. can either \"html\" (default), \"latex\", \"rtf\", \"word\".","code":""},{"path":"https://gt.rstudio.com/reference/extract_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the table body from a gt object — extract_body","text":"data frame tibble object containing table body.","code":""},{"path":"https://gt.rstudio.com/reference/extract_body.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the table body from a gt object — extract_body","text":"Use modified version sp500 dataset create gt table row groups row labels. Formatting applied date- currency-based columns.      Using extract_body() gt object (gt_tbl) provide us tibble contains fully built data cells output context (case, \"html\").   provide us better frame reference, grouping row label values provided first columns returned output. suppress output setting incl_stub_cols = FALSE.   high low columns hidden via cols_hide() shown returned data unless use incl_hidden_cols = TRUE.","code":"gt_tbl <-   sp500 |>   dplyr::filter(date >= \"2015-01-05\" & date <= \"2015-01-16\") |>   dplyr::arrange(date) |>   dplyr::mutate(week = paste0(\"W\", strftime(date, format = \"%V\"))) |>   dplyr::select(-adj_close, -volume) |>   gt(     rowname_col = \"date\",     groupname_col = \"week\"   ) |>   fmt_date(columns = date, date_style = \"day_month_year\") |>   fmt_currency(columns = c(open, high, low, close)) |>   cols_hide(columns = c(high, low)) gt_tbl extract_body(gt_tbl) #> # A tibble: 10 x 4 #>    `::group_id::` `::rowname::`   open      close #>    <chr>          <chr>           <chr>     <chr> #>  1 W02            5 January 2015  $2,054.44 $2,020.58 #>  2 W02            6 January 2015  $2,022.15 $2,002.61 #>  3 W02            7 January 2015  $2,005.55 $2,025.90 #>  4 W02            8 January 2015  $2,030.61 $2,062.14 #>  5 W02            9 January 2015  $2,063.45 $2,044.81 #>  6 W03            12 January 2015 $2,046.13 $2,028.26 #>  7 W03            13 January 2015 $2,031.58 $2,023.03 #>  8 W03            14 January 2015 $2,018.40 $2,011.27 #>  9 W03            15 January 2015 $2,013.75 $1,992.67 #> 10 W03            16 January 2015 $1,992.25 $2,019.42 extract_body(gt_tbl, incl_stub_cols = FALSE) #> # A tibble: 10 x 2 #>    open      close #>    <chr>     <chr> #>  1 $2,054.44 $2,020.58 #>  2 $2,022.15 $2,002.61 #>  3 $2,005.55 $2,025.90 #>  4 $2,030.61 $2,062.14 #>  5 $2,063.45 $2,044.81 #>  6 $2,046.13 $2,028.26 #>  7 $2,031.58 $2,023.03 #>  8 $2,018.40 $2,011.27 #>  9 $2,013.75 $1,992.67 #> 10 $1,992.25 $2,019.42 extract_body(   gt_tbl,   incl_stub_cols = FALSE,   incl_hidden_cols = TRUE ) #> # A tibble: 10 x 4 #>    open      high      low       close #>    <chr>     <chr>     <chr>     <chr> #>  1 $2,054.44 $2,054.44 $2,017.34 $2,020.58 #>  2 $2,022.15 $2,030.25 $1,992.44 $2,002.61 #>  3 $2,005.55 $2,029.61 $2,005.55 $2,025.90 #>  4 $2,030.61 $2,064.08 $2,030.61 $2,062.14 #>  5 $2,063.45 $2,064.43 $2,038.33 $2,044.81 #>  6 $2,046.13 $2,049.30 $2,022.58 $2,028.26 #>  7 $2,031.58 $2,056.93 $2,008.25 $2,023.03 #>  8 $2,018.40 $2,018.40 $1,988.44 $2,011.27 #>  9 $2,013.75 $2,021.35 $1,991.47 $1,992.67 #> 10 $1,992.25 $2,020.46 $1,988.12 $2,019.42"},{"path":"https://gt.rstudio.com/reference/extract_body.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Extract the table body from a gt object — extract_body","text":"13-7","code":""},{"path":"https://gt.rstudio.com/reference/extract_body.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Extract the table body from a gt object — extract_body","text":"v0.10.0 (October 7, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/extract_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a vector of formatted cells from a gt object — extract_cells","title":"Extract a vector of formatted cells from a gt object — extract_cells","text":"Get vector cell data gt_tbl object. output vector cell data formatted way table.","code":""},{"path":"https://gt.rstudio.com/reference/extract_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a vector of formatted cells from a gt object — extract_cells","text":"","code":"extract_cells(   data,   columns,   rows = everything(),   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\", \"grid\") )"},{"path":"https://gt.rstudio.com/reference/extract_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a vector of formatted cells from a gt object — extract_cells","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows form constraint extraction. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/extract_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a vector of formatted cells from a gt object — extract_cells","text":"vector cell data extracted gt table.","code":""},{"path":"https://gt.rstudio.com/reference/extract_cells.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a vector of formatted cells from a gt object — extract_cells","text":"create gt table exibble dataset use next examples:   can extract cell table extract_cells() function. done providing column row intersection:     Multiple cells can extracted. get first four cells char column.     can format cells expect formatting fully retained extraction.","code":"gt_tbl <- gt(exibble, rowname_col = \"row\", groupname_col = \"group\") extract_cells(gt_tbl, columns = num, row = 1) #> [1] \"1.111e-01\" extract_cells(gt_tbl, columns = char, rows = 1:4) #> [1] \"apricot\" \"banana\" \"coconut\" \"durian\" gt_tbl |>   fmt_number(columns = num, decimals = 2) |>   extract_cells(columns = num, rows = 1) #> [1] \"0.11\""},{"path":"https://gt.rstudio.com/reference/extract_cells.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Extract a vector of formatted cells from a gt object — extract_cells","text":"13-9","code":""},{"path":"https://gt.rstudio.com/reference/extract_cells.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Extract a vector of formatted cells from a gt object — extract_cells","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/extract_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a summary list from a gt object — extract_summary","title":"Extract a summary list from a gt object — extract_summary","text":"Get list summary row data frames gt_tbl object summary rows added via summary_rows(). output data frames contain group_id rowname columns, whereby rowname contains descriptive stub labels summary rows.","code":""},{"path":"https://gt.rstudio.com/reference/extract_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a summary list from a gt object — extract_summary","text":"","code":"extract_summary(data)"},{"path":"https://gt.rstudio.com/reference/extract_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a summary list from a gt object — extract_summary","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function.","code":""},{"path":"https://gt.rstudio.com/reference/extract_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a summary list from a gt object — extract_summary","text":"list data frames containing summary data.","code":""},{"path":"https://gt.rstudio.com/reference/extract_summary.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a summary list from a gt object — extract_summary","text":"Use modified version sp500 dataset create gt table row groups row labels. Create summary rows labeled min, max, avg every row group summary_rows(). , extract summary rows list object.   Use summary list make new gt table. key thing use dplyr::bind_rows() pass tibble gt().","code":"summary_extracted <-   sp500 |>   dplyr::filter(date >= \"2015-01-05\" & date <=\"2015-01-30\") |>   dplyr::arrange(date) |>   dplyr::mutate(week = paste0(\"W\", strftime(date, format = \"%V\"))) |>   dplyr::select(-adj_close, -volume) |>   gt(     rowname_col = \"date\",     groupname_col = \"week\"   ) |>   summary_rows(     groups = everything(),     columns = c(open, high, low, close),     fns = list(       min = ~min(.),       max = ~max(.),       avg = ~mean(.)     ),   ) |>   extract_summary()  summary_extracted #> $summary_df_data_list #> $summary_df_data_list$W02 #> # A tibble: 3 x 9 #>   group_id row_id rowname  date  open  high   low close  week #>   <chr>    <chr>  <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 W02      min    min        NA 2006. 2030. 1992. 2003.    NA #> 2 W02      max    max        NA 2063. 2064. 2038. 2062.    NA #> 3 W02      avg    avg        NA 2035. 2049. 2017. 2031.    NA #> #> $summary_df_data_list$W03 #> # A tibble: 3 x 9 #>   group_id row_id rowname  date  open  high   low close  week #>   <chr>    <chr>  <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 W03      min    min        NA 1992. 2018. 1988. 1993.    NA #> 2 W03      max    max        NA 2046. 2057. 2023. 2028.    NA #> 3 W03      avg    avg        NA 2020. 2033. 2000. 2015.    NA #> #> $summary_df_data_list$W04 #> # A tibble: 3 x 9 #>   group_id row_id rowname  date  open  high   low close  week #>   <chr>    <chr>  <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 W04      min    min        NA 2020. 2029. 2004. 2023.    NA #> 2 W04      max    max        NA 2063. 2065. 2051. 2063.    NA #> 3 W04      avg    avg        NA 2035. 2049. 2023. 2042.    NA #> #> $summary_df_data_list$W05 #> # A tibble: 3 x 9 #>   group_id row_id rowname  date  open  high   low close  week #>   <chr>    <chr>  <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 W05      min    min        NA 2002. 2023. 1989. 1995.    NA #> 2 W05      max    max        NA 2050. 2058. 2041. 2057.    NA #> 3 W05      avg    avg        NA 2030. 2039. 2009. 2021.    NA summary_extracted |>   unlist(recursive = FALSE) |>   dplyr::bind_rows() |>   gt(groupname_col = \"group_id\") |>   cols_hide(columns = row_id)"},{"path":"https://gt.rstudio.com/reference/extract_summary.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Extract a summary list from a gt object — extract_summary","text":"13-8","code":""},{"path":"https://gt.rstudio.com/reference/extract_summary.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Extract a summary list from a gt object — extract_summary","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/films.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature films in competition at the Cannes Film Festival — films","title":"Feature films in competition at the Cannes Film Festival — films","text":"entry films feature film appeared official selection festival year (starting 1946 active present day). year column refers year festival figure always coincide release year film. film's title reflects common title film English, original_title column provides title film spoken language (transliterated Roman script necessary).","code":""},{"path":"https://gt.rstudio.com/reference/films.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature films in competition at the Cannes Film Festival — films","text":"","code":"films"},{"path":"https://gt.rstudio.com/reference/films.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Feature films in competition at the Cannes Film Festival — films","text":"tibble 1,851 rows 8 variables: year year festival film competition. title,original_title title field provides film title used English-speaking audiences. original_title field populated title differs greatly non-English original. director director set co-directors film. Multiple directors separated comma. languages languages spoken film order appearance. consists ISO 639 language codes (primarily two-letter codes, using three-letter codes necessary). countries_of_origin country countries origin production. , 2-letter ISO 3166-1 country codes (set uppercase) used. run_time run time film hours minutes. given string format [x]h [y]m. imdb_url URL film's information page Internet Movie Database (IMDB).","code":""},{"path":"https://gt.rstudio.com/reference/films.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"Feature films in competition at the Cannes Film Festival — films","text":"DATA-9","code":""},{"path":"https://gt.rstudio.com/reference/films.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"Feature films in competition at the Cannes Film Festival — films","text":"v0.11.0 (July 9, 2024)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/films.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature films in competition at the Cannes Film Festival — films","text":"","code":"dplyr::glimpse(films) #> Rows: 1,851 #> Columns: 8 #> $ year                <int> 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 19… #> $ title               <chr> \"The Lovers\", \"Anna and the King of Siam\", \"Blood … #> $ original_title      <chr> \"Amanti in fuga\", NA, \"Blod och eld\", \"Brevet fra … #> $ director            <chr> \"Giacomo Gentilomo\", \"John Cromwell\", \"Anders Henr… #> $ languages           <chr> \"it\", \"en\", \"sv\", \"da\", \"en,fr\", \"en\", \"pt\", \"ru\",… #> $ countries_of_origin <chr> \"IT\", \"US\", \"SE\", \"DK\", \"GB\", \"GB\", \"PT\", \"SU\", \"D… #> $ run_time            <chr> \"1h 30m\", \"2h 8m\", \"1h 40m\", \"1h 18m\", \"1h 26m\", \"… #> $ imdb_url            <chr> \"https://www.imdb.com/title/tt0038297/\", \"https://…"},{"path":"https://gt.rstudio.com/reference/fmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a column format with a formatter function — fmt","title":"Set a column format with a formatter function — fmt","text":"fmt() provides way execute custom formatting functionality raw data values way can consider output contexts. Along columns rows arguments provide precision targeting data cells, fns argument allows define one functions manipulating raw data. providing single function fns, recommended format form: fns = function(x) .... single function format targeted data cells way regardless output format (e.g., HTML, LaTeX, RTF). require formatting x depends output format, list functions can provided html, latex, rtf, default contexts. can form fns = list(html = function(x) ..., latex = function(x) ..., default = function(x) ...). multiple-function case, recommended including default function fallback contexts provided.","code":""},{"path":"https://gt.rstudio.com/reference/fmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a column format with a formatter function — fmt","text":"","code":"fmt(data, columns = everything(), rows = everything(), compat = NULL, fns)"},{"path":"https://gt.rstudio.com/reference/fmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a column format with a formatter function — fmt","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). compat Formatting compatibility vector<character> // default: NULL (optional) optional vector provides compatible classes formatting. default NULL. fns Formatting functions function|list functions // required Either single formatting function named list functions. Can also anonymous functions, base R (\\(x) x + 1) rlang (~.x + 1) syntax.","code":""},{"path":"https://gt.rstudio.com/reference/fmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a column format with a formatter function — fmt","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a column format with a formatter function — fmt","text":"Use exibble dataset create gt table. format numeric values num column fmt(). supply functions fns argument. supplied function take  values column (x), multiply 1000, exclose single quotes.","code":"exibble |>   dplyr::select(-row, -group) |>   gt() |>   fmt(     columns = num,     fns = function(x) {       paste0(\"'\", x * 1000, \"'\")     }   )"},{"path":"https://gt.rstudio.com/reference/fmt.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Set a column format with a formatter function — fmt","text":"3-30","code":""},{"path":"https://gt.rstudio.com/reference/fmt.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Set a column format with a formatter function — fmt","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_auto.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically format column data according to their values — fmt_auto","title":"Automatically format column data according to their values — fmt_auto","text":"fmt_auto() automatically apply formatting various types way best suits data table provided. function attempt format numbers condensed optimal width, either scientific notation large-number suffixing. Currency values detected currency codes embedded column name formatted correct way. Although functionality comprehensive still possible reduce scope automatic formatting scope argument also choosing subset columns rows formatting applied.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_auto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically format column data according to their values — fmt_auto","text":"","code":"fmt_auto(   data,   columns = everything(),   rows = everything(),   scope = c(\"numbers\", \"currency\"),   lg_num_pref = c(\"sci\", \"suf\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically format column data according to their values — fmt_auto","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). scope Scope automatic formatting mult-kw:[numbers|currency] // default: c(\"numbers\", \"currency\") default, function format \"numbers\"-type values \"currency\"-type values though scope can reduced single type value format. lg_num_pref Large-number preference singl-kw:[sci|suf] // default: \"sci\" large numbers present, can fixed preference toward formatted. Choices scientific notation small large values (\"sci\"), , use suffixed numbers (\"suf\", large values ). locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_auto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically format column data according to their values — fmt_auto","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_auto.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically format column data according to their values — fmt_auto","text":"Use exibble dataset create gt table. Format columns automatically fmt_auto() function.    now use countrypops dataset create another gt table. use fmt_auto() automatically format columns time choice made opt large-number suffixing instead scientific notation. done using lg_num_pref = \"suf\" option.","code":"exibble |>   gt() |>   fmt_auto() countrypops |>   dplyr::select(country_code_3, year, population) |>   dplyr::filter(country_code_3 %in% c(\"CHN\", \"IND\", \"USA\", \"PAK\", \"IDN\")) |>   dplyr::filter(year > 1975 & year %% 5 == 0) |>   tidyr::spread(year, population) |>   dplyr::arrange(desc(`2020`)) |>   gt(rowname_col = \"country_code_3\") |>   fmt_auto(lg_num_pref = \"suf\")"},{"path":"https://gt.rstudio.com/reference/fmt_auto.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Automatically format column data according to their values — fmt_auto","text":"3-29","code":""},{"path":"https://gt.rstudio.com/reference/fmt_auto.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Automatically format column data according to their values — fmt_auto","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Format column data containing bin/interval information — fmt_bins","title":"Format column data containing bin/interval information — fmt_bins","text":"using cut() (functions use way) get bins can look like : \"(0,10]\", \"(10,15]\", \"(15,20]\", \"(20,40]\". interval notation expresses lower upper limits range. square round brackets define whether endpoints included range ([/] inclusion, (/) exclusion). bins sort present table, fmt_bins() function can used format syntax form presents better display table. possible format values intervals fmt argument, , separator can modified sep argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format column data containing bin/interval information — fmt_bins","text":"","code":"fmt_bins(   data,   columns = everything(),   rows = everything(),   sep = \"--\",   fmt = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format column data containing bin/interval information — fmt_bins","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). sep Separator values scalar<character> // default: \"--\" separator text indicates values ranged. default value \"--\" indicates en dash used range separator. Using \"---\" taken mean em dash used. want special symbols taken literally, can supplied within base::(). fmt Formatting expressions <single expression> // default: NULL (optional) optional formatting expression formula form. used, RHS ~ contain formatting call (e.g., ~ fmt_number(., decimals = 3, use_seps = FALSE).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format column data containing bin/interval information — fmt_bins","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bins.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format column data containing bin/interval information — fmt_bins","text":"fmt_bins() compatible body cells  \"character\" \"factor\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bins.html","id":"formatting-expressions-for-fmt","dir":"Reference","previous_headings":"","what":"Formatting expressions for fmt","title":"Format column data containing bin/interval information — fmt_bins","text":"can supply one-sided (RHS ) expression fmt, , several can provided list. expression uses formatting function (e.g., fmt_number(), fmt_currency(), etc.) must contain initial . stands data object. performing numeric formatting might look something like : fmt = ~ fmt_number(., decimals = 1, use_seps = FALSE)","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bins.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format column data containing bin/interval information — fmt_bins","text":"Use countrypops dataset create gt table. even getting gt() call, use cut() conjunction scales::breaks_log() create highly customized bins. Consequently country's population 2021 year assigned bin. bins characteristic type formatting can used input fmt_bins(), using formatting function allows us customize presentation ranges. instance, formatting left right values ranges fmt_integer() (using formula syntax).","code":"countrypops |>   dplyr::filter(year == 2021) |>   dplyr::select(country_code_2, population) |>   dplyr::mutate(population_class = cut(     population,     breaks = scales::breaks_log(n = 20)(population)     )   ) |>   dplyr::group_by(population_class) |>   dplyr::summarize(     count = dplyr::n(),     countries = paste0(country_code_2, collapse = \",\")   ) |>   dplyr::arrange(desc(population_class)) |>   gt() |>   fmt_flag(columns = countries) |>   fmt_bins(     columns = population_class,     fmt = ~ fmt_integer(., suffixing = TRUE)   ) |>   cols_label(     population_class = \"Population Range\",     count = \"\",     countries = \"Countries\"   ) |>   cols_width(     population_class ~ px(150),     count ~ px(50)   ) |>   tab_style(     style = cell_text(style = \"italic\"),     locations = cells_body(columns = count)   )"},{"path":"https://gt.rstudio.com/reference/fmt_bins.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format column data containing bin/interval information — fmt_bins","text":"3-17","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bins.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format column data containing bin/interval information — fmt_bins","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as bytes — fmt_bytes","title":"Format values as bytes — fmt_bytes","text":"numeric values gt table, can transform values bytes human readable units. fmt_bytes() allows formatting byte sizes either two common representations: (1) decimal units (powers 1000, examples \"kB\" \"MB\"), (2) binary units (powers 1024, examples \"KiB\" \"MiB\"). assumed input numeric values represent number bytes automatic truncation values occur. numeric values scaled range 1 <1000 decorated correct unit symbol according standard chosen. control formatting byte sizes, can use following options: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as bytes — fmt_bytes","text":"","code":"fmt_bytes(   data,   columns = everything(),   rows = everything(),   standard = c(\"decimal\", \"binary\"),   decimals = 1,   n_sigfig = NULL,   drop_trailing_zeros = TRUE,   drop_trailing_dec_mark = TRUE,   use_seps = TRUE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   incl_space = TRUE,   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as bytes — fmt_bytes","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). standard Standard used express byte sizes singl-kw:[decimal|binary] // default: \"decimal\" form expressing large byte sizes divided : (1) decimal units (powers 1000; e.g., \"kB\" \"MB\"), (2) binary units (powers 1024; e.g., \"KiB\" \"MiB\"). decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 1 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". trailing zeros can removed drop_trailing_zeros = TRUE. n_sigfig Number significant figures scalar<numeric|integer>(val>=1) // default: NULL (optional) option format numbers n significant figures. default, NULL thus number values formatted according number decimal places set via decimals. opting format according rules significant figures, n_sigfig must number greater equal 1. values passed decimals drop_trailing_zeros arguments ignored. drop_trailing_zeros Drop trailing zeros scalar<logical> // default: FALSE logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark Drop trailing decimal mark scalar<logical> // default: TRUE logical value determines whether decimal marks always appear even decimal digits display formatting (e.g., 23 becomes 23. FALSE). default trailing decimal marks shown. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). dec_mark Decimal mark scalar<character> // default: \".\" string used decimal mark. example, using dec_mark = \",\" value 0.152 result formatted value \"0,152\"). argument ignored locale supplied (.e., NULL). force_sign Forcing display positive sign scalar<logical> // default: FALSE positive sign shown positive numbers (effectively showing sign numbers except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. incl_space Include space value units scalar<logical> // default: TRUE option whether include space value units. default use space character separation. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as bytes — fmt_bytes","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format values as bytes — fmt_bytes","text":"fmt_bytes() compatible body cells \"numeric\" \"integer\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format values as bytes — fmt_bytes","text":"from_column() can used certain arguments fmt_bytes() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): standard decimals n_sigfig drop_trailing_zeros drop_trailing_dec_mark use_seps pattern sep_mark dec_mark force_sign incl_space locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"adapting-output-to-a-specific-locale","dir":"Reference","previous_headings":"","what":"Adapting output to a specific locale","title":"Format values as bytes — fmt_bytes","text":"formatting function can adapt outputs according provided locale value. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID means separator decimal marks correct given locale. values provided sep_mark dec_mark, overridden locale's preferred values. Note locale value provided override global locale setting performed gt()'s locale argument (settable value received functions locale argument). useful reference locales supported, can call info_locales() view info table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as bytes — fmt_bytes","text":"Use single column exibble dataset create simple gt table. use fmt_bytes() format num column display byte sizes decimal standard.    create analogous table using fmt_bytes(), time showing byte sizes binary values using standard = \"binary\".","code":"exibble |>   dplyr::select(num) |>   gt() |>   fmt_bytes() exibble |>   dplyr::select(num) |>   gt() |>   fmt_bytes(standard = \"binary\")"},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as bytes — fmt_bytes","text":"3-12","code":""},{"path":"https://gt.rstudio.com/reference/fmt_bytes.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format values as bytes — fmt_bytes","text":"v0.3.0 (May 12, 2021)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_chem.html","id":null,"dir":"Reference","previous_headings":"","what":"Format chemical formulas — fmt_chem","title":"Format chemical formulas — fmt_chem","text":"fmt_chem() lets format chemical formulas even chemical reactions table body. Often input text common form representing single compounds (like \"C2H4O\", acetaldehyde) chemical reactions can used (e.g., 2CH3OH -> CH3OCH3 + H2O\"). long text within targeted cells conforms gt's specialized chemistry notation, appropriate conversions occur. Details pertaining chemistry notation can found section entitled use gt's chemistry notation.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_chem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format chemical formulas — fmt_chem","text":"","code":"fmt_chem(data, columns = everything(), rows = everything())"},{"path":"https://gt.rstudio.com/reference/fmt_chem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format chemical formulas — fmt_chem","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_chem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format chemical formulas — fmt_chem","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_chem.html","id":"how-to-use-gt-s-chemistry-notation","dir":"Reference","previous_headings":"","what":"How to use gt's chemistry notation","title":"Format chemical formulas — fmt_chem","text":"chemistry notation involves shorthand writing chemical formulas chemical reactions, needed. feel familiar basic usage advanced typesetting tries limit amount syntax needed. always best show examples usage: \"CH3O2\" \"(NH4)2S\" render subscripted numerals Charges can expressed terminating \"+\" \"-\", \"H+\" \"[AgCl2]-\"; charges involve use number, following incantations used: \"CrO4^2-\", \"Fe^n+\", \"Y^99+\", \"Y^{99+}\" (final two forms produce equivalent output) Stoichiometric values can included whole values prepending formulas (e.g.,  \"2H2O2\") setting space, like : \"2 H2O2\", \"0.5 H2O\", \"1/2 H2O\", \"(1/2) H2O\" Certain standalone, lowercase letters combinations thereof automatically stylized fit conventions; \"NO_x\" \"x Na(NH4)HPO4\" italicized 'x' characters can always italicize letters surrounding \"*\" (\"*n* H2O\" \"*n*-C5H12\") Chemical isotopes can rendered using either two constructions preceding element: \"^{227}_{90}Th\" \"^227_90Th\"; nuclides can represented similar manner, two examples: \"^{0}_{-1}n^{-}\", \"^0_-1n-\" Chemical reactions can use \"+\" signs variety reaction arrows: (1) \"-> B\", (2) \"<- B\", (3) \"<-> B\", (4) \"<--> B\", (5) \"<=> B\", (6) \"<=>> B\", (7) \"<<=> B\" Center dots (useful addition compounds) can added using single \".\" \"*\" character, surrounded spaces; two equivalent examples \"KCr(SO4)2 . 12 H2O\" \"KCr(SO4)2 * 12 H2O\" Single double bonds can shown inserting \"-\" \"=\" adjacent characters (.e., beginning end markup); two examples: \"C6H5-CHO\", \"CH3CH=CH2\" units notation, Greek letters can inserted surrounding letter name \":\"; example describes delta value carbon-13: \":delta: ^13C\"","code":""},{"path":"https://gt.rstudio.com/reference/fmt_chem.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format chemical formulas — fmt_chem","text":"use reactions dataset create new gt table. table filtered rows columns. column cmpd_formula contains chemical formulas formatting performed fmt_chem(). Certain column labels chemical names (o3_k298 no3_k298) can handled within cols_label() using surrounding text \"{{%\"/\"%}}\".    Taking just rows photolysis dataset, create new gt table. cmpd_formula products columns contain text chemistry notation (first compounds, second column products photolysis reactions). columns formatted fmt_chem(). compound formulas merged compound names cols_merge().    fmt_chem() can handle typesetting nuclide notation. take subset columns rows nuclides dataset make new gt table. contents nuclide column contains isotopes hydrogen carbon placed table stub. Using fmt_chem() makes subscripted superscripted values properly formatted convention formatting nuclides.","code":"reactions |>   dplyr::filter(cmpd_type == \"terminal monoalkene\") |>   dplyr::filter(grepl(\"^1-\", cmpd_name)) |>   dplyr::select(cmpd_name, cmpd_formula, ends_with(\"k298\")) |>   gt() |>   tab_header(title = \"Gas-phase reactions of selected terminal alkenes\") |>   tab_spanner(     label = \"Reaction Rate Constant at 298 K\",     columns = ends_with(\"k298\")   ) |>   fmt_chem(columns = cmpd_formula) |>   fmt_scientific() |>   sub_missing() |>   cols_label(     cmpd_name = \"Alkene\",     cmpd_formula = \"Formula\",     OH_k298 = \"OH\",     O3_k298 = \"{{%O3%}}\",     NO3_k298 = \"{{%NO3%}}\",     Cl_k298 = \"Cl\"   ) |>   opt_align_table_header(align = \"left\") photolysis |>   dplyr::filter(cmpd_name %in% c(     \"hydrogen peroxide\", \"nitrous acid\",     \"nitric acid\", \"acetaldehyde\",     \"methyl peroxide\", \"methyl nitrate\",     \"ethyl nitrate\", \"isopropyl nitrate\"   )) |>   dplyr::select(-c(l, m, n, quantum_yield, type)) |>   gt() |>   tab_header(title = \"Photolysis pathways of selected VOCs\") |>   fmt_chem(columns = c(cmpd_formula, products)) |>   cols_nanoplot(     columns = sigma_298_cm2,     columns_x_vals = wavelength_nm,     expand_x = c(200, 400),     new_col_name = \"cross_section\",     new_col_label = \"Absorption Cross Section\",     options = nanoplot_options(       show_data_points = FALSE,       data_line_stroke_width = 4,       data_line_stroke_color = \"black\",       show_data_area = FALSE     )   ) |>   cols_merge(     columns = c(cmpd_name, cmpd_formula),     pattern = \"{1}, {2}\"   ) |>   cols_label(     cmpd_name = \"Compound\",     products = \"Products\"   ) |>   opt_align_table_header(align = \"left\") nuclides |>   dplyr::filter(element %in% c(\"H\", \"C\")) |>   dplyr::mutate(nuclide = gsub(\"[0-9]+$\", \"\", nuclide)) |>   dplyr::select(nuclide, atomic_mass, half_life, decay_1, is_stable) |>   gt(rowname_col = \"nuclide\") |>   tab_header(title = \"Isotopes of Hydrogen and Carbon\") |>   tab_stubhead(label = \"Isotope\") |>   fmt_chem(columns = nuclide) |>   fmt_scientific(columns = half_life) |>   fmt_number(     columns = atomic_mass,     decimals = 4,     scale_by = 1 / 1e6   ) |>   sub_missing(     columns = half_life,     rows = is_stable,     missing_text = md(\"**STABLE**\")   ) |>   sub_missing(columns = half_life, rows = !is_stable) |>   sub_missing(columns = decay_1) |>   data_color(     columns = decay_1,     target_columns = c(atomic_mass, half_life, decay_1),     palette = \"LaCroixColoR::PassionFruit\",     na_color = \"white\"   ) |>   cols_label_with(fn = function(x) tools::toTitleCase(gsub(\"_\", \" \", x))) |>   cols_label(decay_1 = \"Decay Mode\") |>   cols_width(     stub() ~ px(70),     c(atomic_mass, half_life, decay_1) ~ px(120)   ) |>   cols_hide(columns = c(is_stable)) |>   cols_align(align = \"center\", columns = decay_1) |>   opt_align_table_header(align = \"left\") |>   opt_vertical_padding(scale = 0.5)"},{"path":"https://gt.rstudio.com/reference/fmt_chem.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format chemical formulas — fmt_chem","text":"3-20","code":""},{"path":"https://gt.rstudio.com/reference/fmt_chem.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format chemical formulas — fmt_chem","text":"v0.11.0 (July 9, 2024)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_country.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate country names from their corresponding country codes — fmt_country","title":"Generate country names from their corresponding country codes — fmt_country","text":"Tables comparable data countries often need country name included. seems like fairly simple task, consistent country names surprisingly difficult. fmt_country() function can help regard supplying country name based 2- 3-letter ISO 3166-1 country code (e.g., Singapore \"SG\" country code). resulting country names obtained Unicode CLDR (Common Locale Data Repository), good source since country names agreed upon consensus. Furthermore, country names can localized locale argument (either function initial gt() call). Multiple country names can included per cell separating country codes commas (e.g., \"RO,BM\"). okay codes set either uppercase lowercase letters. sep argument allows common separator applied country names.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_country.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate country names from their corresponding country codes — fmt_country","text":"","code":"fmt_country(   data,   columns = everything(),   rows = everything(),   pattern = \"{x}\",   sep = \" \",   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_country.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate country names from their corresponding country codes — fmt_country","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep Separator country names scalar<character> // default: \" \" output country names within body cell, sep provides separator instance. default, single space character (\" \"). locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_country.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate country names from their corresponding country codes — fmt_country","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_country.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Generate country names from their corresponding country codes — fmt_country","text":"fmt_country() function compatible body cells \"character\" \"factor\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_country.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Generate country names from their corresponding country codes — fmt_country","text":"from_column() can used certain arguments fmt_country() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): pattern sep locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_country.html","id":"supported-regions","dir":"Reference","previous_headings":"","what":"Supported regions","title":"Generate country names from their corresponding country codes — fmt_country","text":"following 242 regions (comprise countries) supported names across 574 locales: \"AD\", \"AE\", \"AF\", \"AG\", \"AI\", \"AL\", \"\", \"AO\", \"AR\", \"\", \"\", \"AU\", \"AW\", \"AX\", \"AZ\", \"BA\", \"BB\", \"BD\", \"\", \"BF\", \"BG\", \"BH\", \"BI\", \"BJ\", \"BL\", \"BM\", \"BN\", \"BO\", \"BR\", \"BS\", \"BT\", \"BW\", \"\", \"BZ\", \"CA\", \"CC\", \"CD\", \"CF\", \"CG\", \"CH\", \"CI\", \"CK\", \"CL\", \"CM\", \"CN\", \"CO\", \"CR\", \"CU\", \"CV\", \"CW\", \"CY\", \"CZ\", \"DE\", \"DJ\", \"DK\", \"DM\", \"\", \"DZ\", \"EC\", \"EE\", \"EG\", \"EH\", \"ER\", \"ES\", \"ET\", \"EU\", \"FI\", \"FJ\", \"FK\", \"FM\", \"FO\", \"FR\", \"GA\", \"GB\", \"GD\", \"GE\", \"GF\", \"GG\", \"GH\", \"GI\", \"GL\", \"GM\", \"GN\", \"GP\", \"GQ\", \"GR\", \"GS\", \"GT\", \"GU\", \"GW\", \"GY\", \"HK\", \"HN\", \"HR\", \"HT\", \"HU\", \"ID\", \"IE\", \"IL\", \"IM\", \"\", \"IO\", \"IQ\", \"IR\", \"\", \"\", \"JE\", \"JM\", \"JO\", \"JP\", \"KE\", \"KG\", \"KH\", \"KI\", \"KM\", \"KN\", \"KP\", \"KR\", \"KW\", \"KY\", \"KZ\", \"LA\", \"LB\", \"LC\", \"LI\", \"LK\", \"LR\", \"LS\", \"LT\", \"LU\", \"LV\", \"LY\", \"MA\", \"MC\", \"MD\", \"\", \"MF\", \"MG\", \"MH\", \"MK\", \"ML\", \"MM\", \"MN\", \"MO\", \"MP\", \"MQ\", \"MR\", \"MS\", \"MT\", \"MU\", \"MV\", \"MW\", \"MX\", \"\", \"MZ\", \"NA\", \"NC\", \"NE\", \"NF\", \"NG\", \"NI\", \"NL\", \"\", \"NP\", \"NR\", \"NU\", \"NZ\", \"OM\", \"PA\", \"PE\", \"PF\", \"PG\", \"PH\", \"PK\", \"PL\", \"PM\", \"PN\", \"PR\", \"PS\", \"PT\", \"PW\", \"PY\", \"QA\", \"RE\", \"RO\", \"RS\", \"RU\", \"RW\", \"SA\", \"SB\", \"SC\", \"SD\", \"SE\", \"SG\", \"SI\", \"SK\", \"SL\", \"SM\", \"SN\", \"\", \"SR\", \"SS\", \"ST\", \"SV\", \"SX\", \"SY\", \"SZ\", \"TC\", \"TD\", \"TF\", \"TG\", \"TH\", \"TJ\", \"TK\", \"TL\", \"TM\", \"TN\", \"\", \"TR\", \"TT\", \"TV\", \"TW\", \"TZ\", \"UA\", \"UG\", \"US\", \"UY\", \"UZ\", \"VA\", \"VC\", \"VE\", \"VG\", \"VI\", \"VN\", \"VU\", \"WF\", \"WS\", \"YE\", \"YT\", \"ZA\", \"ZM\", \"ZW\".","code":""},{"path":"https://gt.rstudio.com/reference/fmt_country.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate country names from their corresponding country codes — fmt_country","text":"peeps dataset used generate small gt table containing people born 1980s. country column contains 3-letter country codes transformed country names fmt_country().    Use countrypops dataset create gt table. include columns rows table. country_code_3 column 3-letter country codes format required fmt_country() using function transforms codes country names.    country names derived country codes can localized. translate country names three different languages using different locale values separate calls fmt_country().    make another gt table, time using films dataset. countries_of_origin column contains 2-letter country codes cells contain multiple countries (separated commas). use fmt_country() column also specify rendered country names separated comma space character. Also note historical country codes like \"SU\" ('USSR'), \"CS\" ('Czechoslovakia'), \"YU\" ('Yugoslavia') permitted inputs fmt_country().    Country names can sometimes pair nicely flag-based graphics. example (using different portion films dataset) use fmt_country() along fmt_flag(). formatted country names merged cells icons via cols_merge().","code":"peeps |>   dplyr::filter(grepl(\"198\", dob)) |>   dplyr::select(name_given, name_family, country, dob) |>   dplyr::arrange(country, name_family) |>   gt() |>   fmt_country(columns = country) |>   cols_merge(columns = c(name_given, name_family)) |>   opt_vertical_padding(scale = 0.5) |>   tab_options(column_labels.hidden = TRUE) countrypops |>   dplyr::filter(year == 2021) |>   dplyr::filter(grepl(\"^S\", country_name)) |>   dplyr::arrange(country_name) |>   dplyr::select(-country_name, -year) |>   dplyr::slice_head(n = 10) |>   gt() |>   fmt_integer() |>   fmt_flag(columns = country_code_2) |>   fmt_country(columns = country_code_3) |>   cols_label(     country_code_2 = \"\",     country_code_3 = \"Country\",     population = \"Population (2021)\"   ) countrypops |>   dplyr::filter(year == 2021) |>   dplyr::arrange(desc(population)) |>   dplyr::filter(     dplyr::row_number() > max(dplyr::row_number()) - 5 |     dplyr::row_number() <= 5   ) |>   dplyr::select(     country_code_fl = country_code_2,     country_code_2a = country_code_2,     country_code_2b = country_code_2,     country_code_2c = country_code_2,     population   ) |>   gt(rowname_col = \"country_code_fl\") |>   fmt_integer() |>   fmt_flag(columns = stub()) |>   fmt_country(columns = ends_with(\"a\")) |>   fmt_country(columns = ends_with(\"b\"), locale = \"ja\") |>   fmt_country(columns = ends_with(\"c\"), locale = \"ar\") |>   cols_label(     ends_with(\"a\") ~ \"`en`\",     ends_with(\"b\") ~ \"`ja`\",     ends_with(\"c\") ~ \"`ar`\",     population = \"Population\",     .fn = md   ) |>   tab_spanner(     label = \"Country name in specified locale\",     columns = matches(\"2a|2b|2c\")   ) |>   cols_align(align = \"center\", columns = matches(\"2a|2b|2c\")) |>   opt_horizontal_padding(scale = 2) films |>   dplyr::filter(year == 1959) |>   dplyr::select(     contains(\"title\"), run_time, director, countries_of_origin, imdb_url   ) |>   gt() |>   tab_header(title = \"Feature Films in Competition at the 1959 Festival\") |>   fmt_country(columns = countries_of_origin, sep = \", \") |>   fmt_url(     columns = imdb_url,     label = fontawesome::fa(\"imdb\", fill = \"black\")   ) |>   cols_merge(     columns = c(title, original_title, imdb_url),     pattern = \"{1}<< ({2})>> {3}\"   ) |>   cols_label(     title = \"Film\",     run_time = \"Length\",     director = \"Director\",     countries_of_origin = \"Country\"   ) |>   opt_vertical_padding(scale = 0.5) |>   opt_table_font(stack = \"classical-humanist\", weight = \"bold\") |>   opt_stylize(style = 1, color = \"gray\") |>   tab_options(heading.title.font.size = px(26)) films |>   dplyr::filter(director == \"Jean-Pierre Dardenne, Luc Dardenne\") |>   dplyr::select(title, year, run_time, countries_of_origin) |>   gt() |>   tab_header(title = \"In Competition Films by the Dardenne Bros.\") |>   cols_add(country_flag = countries_of_origin) |>   fmt_flag(columns = country_flag) |>   fmt_country(columns = countries_of_origin, sep = \", \") |>   cols_merge(     columns = c(countries_of_origin, country_flag),     pattern = \"{2}<br>{1}\"   ) |>   tab_style(     style = cell_text(size = px(9)),     locations = cells_body(columns = countries_of_origin)   ) |>   cols_merge(columns = c(title, year), pattern = \"{1} ({2})\") |>   opt_vertical_padding(scale = 0.5) |>   opt_horizontal_padding(scale = 3) |>   opt_table_font(font = google_font(\"PT Sans\")) |>   opt_stylize(style = 1, color = \"blue\") |>   tab_options(     heading.title.font.size = px(26),     column_labels.hidden = TRUE   )"},{"path":"https://gt.rstudio.com/reference/fmt_country.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Generate country names from their corresponding country codes — fmt_country","text":"3-25","code":""},{"path":"https://gt.rstudio.com/reference/fmt_country.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Generate country names from their corresponding country codes — fmt_country","text":"v0.11.0 (July 9, 2024)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as currencies — fmt_currency","title":"Format values as currencies — fmt_currency","text":"numeric values gt table, can perform currency-based formatting fmt_currency(). function supports automatic formatting either three-letter numeric currency code. can also specify custom currency formatted according one output contexts currency() helper function. fine control conversion numeric values currency values, take advantage following options: currency: providing currency code common currency name procure correct currency symbol number currency subunits; also use currency() helper function specify custom currency currency symbol placement: currency symbol can placed values decimals/subunits: choice number decimal places, choice decimal symbol, option whether include exclude currency subunits (decimal portion) negative values: choice negative sign parentheses values less zero digit grouping separators: options enable/disable digit separators provide choice separator symbol scaling: can choose scale targeted values multiplier value large-number suffixing: larger figures (thousands, millions, etc.) can autoscaled decorated appropriate suffixes pattern: option use text pattern decoration formatted currency values locale-based formatting: providing locale ID result currency formatting specific chosen locale; also retrieve locale's currency none explicitly given can call info_currencies() useful reference valid inputs currency argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as currencies — fmt_currency","text":"","code":"fmt_currency(   data,   columns = everything(),   rows = everything(),   currency = NULL,   use_subunits = TRUE,   decimals = NULL,   drop_trailing_dec_mark = TRUE,   use_seps = TRUE,   accounting = FALSE,   scale_by = 1,   suffixing = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   placement = \"left\",   incl_space = FALSE,   system = c(\"intl\", \"ind\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as currencies — fmt_currency","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). currency Currency use scalar<character>|obj:<gt_currency> // default: NULL (optional) currency use numeric value. input can supplied 3-letter currency code (e.g., \"USD\" U.S. Dollars, \"EUR\" Euro currency). Use info_currencies() get information table valid currency codes examples . Alternatively, can provide general currency type (e.g., \"dollar\", \"pound\", \"yen\", etc.) simplify process. Use info_currencies() type == \"symbol\" option view information table supported currency symbol names along examples. can also use currency() helper function specify custom currency, string vary across output contexts. example, using currency(html = \"&fnof;\", default = \"f\") give us suitable glyph Dutch guilder HTML output table, simply letter \"f\" output contexts). Please note decimals default 2 using currency() helper function. nothing provided locale value set (either function call part initial gt() call), currency obtained locale. Virtually locales linked territory country (use info_locales() details locales used package), , -use (de facto) currency obtained. default locale \"en\", \"USD\" currency used neither locale currency value given. use_subunits Show hide currency subunits scalar<logical> // default: TRUE option whether subunits portion currency value displayed. example, input value 273.81, default formatting produce \"$273.81\". Removing subunits (use_subunits = FALSE) give us \"$273\". decimals Number decimal places scalar<numeric|integer>(val>=0) // default: NULL (optional) decimals values corresponds exact number decimal places use. value optional currency intrinsic number decimal places (.e., subunits). value 2.34 can, example, formatted 0 decimal places currency used \"USD\" result \"$2\". 4 decimal places, formatted value becomes \"$2.3400\". drop_trailing_dec_mark Drop trailing decimal mark scalar<logical> // default: TRUE logical value determines whether decimal marks always appear even decimal digits display formatting. example, use_subunits = FALSE decimals = 0 formatted value \"$23\" can fashioned \"$23.\" setting drop_trailing_dec_mark = FALSE. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting Use accounting style scalar<logical> // default: FALSE option use accounting style values. Normally, negative values shown minus sign using accounting style instead put negative values parentheses. scale_by Scale values fixed multiplier scalar<numeric|integer> // default: 1 numeric values multiplied scale_by value undergoing formatting. Since default value 1, values changed unless different multiplier value supplied. value ignored using suffixing options (.e., suffixing set FALSE). suffixing Specification large-number suffixing scalar<logical>|vector<character> // default: FALSE suffixing option allows us scale apply suffixes larger numbers (e.g., 1924000 can transformed 1.92M). option can accept logical value, FALSE (default) perform transformation TRUE apply thousands (\"K\"), millions (\"M\"), billions (\"B\"), trillions (\"T\") suffixes automatic value scaling. can alternatively provide character vector serves specification symbols used value ranges. preferred symbols replace defaults (e.g., c(\"k\", \"Ml\", \"Bn\", \"Tr\") replaces \"K\", \"M\", \"B\", \"T\"). Including NA values vector ensure particular range either included transformation (e.g., c(NA, \"M\", \"B\", \"T\") modify numbers thousands range) range inherit previous suffix (e.g., c(\"K\", \"M\", NA, \"T\"), numbers range millions billions terms millions). use suffixing (set expressly FALSE) means value provided scale_by ignored. using system = \"ind\" default suffix set provided suffixing = TRUE equivalent c(NA, \"L\", \"Cr\"). apply suffixes thousands range, express values lakhs crores. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). dec_mark Decimal mark scalar<character> // default: \".\" string used decimal mark. example, using dec_mark = \",\" value 0.152 result formatted value \"0,152\"). argument ignored locale supplied (.e., NULL). force_sign Forcing display positive sign scalar<logical> // default: FALSE positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. placement Currency symbol placement singl-kw:[left|right] // default: \"left\" placement currency symbol. can either \"left\" (\"$450\") \"right\" (yields \"450$\"). incl_space Include space value currency symbol scalar<logical> // default: FALSE option whether include space value currency symbol. default introduce space character. system Numbering system grouping separators singl-kw:[intl|ind] // default: \"intl\" international numbering system (keyword: \"intl\") widely used grouping separators (.e., sep_mark) always separated three digits. alternative system, Indian numbering system (keyword: \"ind\"), uses grouping separators correspond thousand, lakh, crore, higher quantities. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as currencies — fmt_currency","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format values as currencies — fmt_currency","text":"fmt_currency() compatible body cells \"numeric\" \"integer\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format values as currencies — fmt_currency","text":"from_column() can used certain arguments fmt_currency() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): currency use_subunits decimals drop_trailing_dec_mark use_seps accounting scale_by suffixing pattern sep_mark dec_mark force_sign placement incl_space system locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"adapting-output-to-a-specific-locale","dir":"Reference","previous_headings":"","what":"Adapting output to a specific locale","title":"Format values as currencies — fmt_currency","text":"formatting function can adapt outputs according provided locale value. Examples include \"en\" English (United States) \"fr\" French (France). use locale ID means separator decimal marks correct given locale. values provided sep_mark dec_mark, overridden locale's preferred values. addition number formatting, providing locale value providing currency allows gt obtain currency code locale's territory. Note locale value provided override global locale setting performed gt()'s locale argument (settable value received functions locale argument). useful reference locales supported, can call info_locales() view info table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as currencies — fmt_currency","text":"make simple gt table exibble dataset. keep num currency, columns, , format columns using fmt_currency() (\"JPY\" \"GBP\" currencies).    take single column exibble (currency) format currency name (differs 3-letter currency code). case, use \"euro\" currency set placement symbol right value. Additionally, currency symbol separated value single space character (using incl_space = TRUE).    pizzaplace dataset, make summary table gets number \"hawaiian\" pizzas sold (revenue generated) month. gt table, format revenue column. currency value automatically U.S. Dollars supply either currency code locale. also create grand summary grand_summary_rows(). Within summary row, total revenue needs formatted fmt_currency() can within fmt argument.    supplying locale value fmt_currency(), can opt use locale's assumed currency supply currency value (override locale's default currency). column locale values, can format currency values row--row basis use from_column(). , reference locale column argument name.    can similarly use from_column() reference column currency code values. example create simple currency conversion table. curr column contains 3-letter currency codes, column referenced via from_column() currency argument fmt_currency().","code":"exibble |>   dplyr::select(num, currency) |>   gt() |>   fmt_currency(     columns = num,     currency = \"JPY\"   ) |>   fmt_currency(     columns = currency,     currency = \"GBP\"   ) exibble |>   dplyr::select(currency) |>   gt() |>   fmt_currency(     currency = \"euro\",     placement = \"right\",     incl_space = TRUE   ) pizzaplace |>   dplyr::filter(name == \"hawaiian\") |>   dplyr::mutate(month = lubridate::month(date, label = TRUE, abbr = TRUE)) |>   dplyr::select(month, price) |>   dplyr::group_by(month) |>   dplyr::summarize(     `number sold` = dplyr::n(),     revenue = sum(price)   ) |>   gt(rowname_col = \"month\") |>   tab_header(title = \"Summary of Hawaiian Pizzas Sold by Month\") |>   fmt_currency(columns = revenue) |>   grand_summary_rows(     fns = list(label = \"Totals:\", id = \"totals\", fn = \"sum\"),     fmt = ~ fmt_currency(., columns = revenue),   ) |>   opt_all_caps() dplyr::tibble(   amount = rep(50.84, 5),   currency = c(\"JPY\", \"USD\", \"GHS\", \"KRW\", \"CNY\"),   locale = c(\"ja\", \"en\", \"ee\", \"ko\", \"zh\"), ) |>   gt() |>   fmt_currency(     columns = amount,     locale = from_column(column = \"locale\")   ) |>   cols_hide(columns = locale) dplyr::tibble(   flag = c(\"EU\", \"GB\", \"CA\", \"AU\", \"JP\", \"IN\"),   curr = c(\"EUR\", \"GBP\", \"CAD\", \"AUD\", \"JPY\", \"INR\"),   conv = c(     0.912952, 0.787687, 1.34411,     1.53927, 144.751, 82.9551   ) ) |>   gt() |>   fmt_currency(     columns = conv,     currency = from_column(column = \"curr\")   ) |>   fmt_flag(columns = flag) |>   cols_merge(columns = c(flag, curr)) |>   cols_label(     flag = \"Currency\",     conv = \"Amount\"   ) |>   tab_header(     title = \"Conversion of 1 USD to Six Other Currencies\",     subtitle = md(\"Conversion rates obtained on **Aug 13, 2023**\")   )"},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as currencies — fmt_currency","text":"3-8","code":""},{"path":"https://gt.rstudio.com/reference/fmt_currency.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format values as currencies — fmt_currency","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as dates — fmt_date","title":"Format values as dates — fmt_date","text":"Format input values time values using one 41 preset date styles. Input can form POSIXt (.e., datetimes), Date type, character (must ISO 8601 form YYYY-MM-DD HH:MM:SS YYYY-MM-DD).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as dates — fmt_date","text":"","code":"fmt_date(   data,   columns = everything(),   rows = everything(),   date_style = \"iso\",   pattern = \"{x}\",   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as dates — fmt_date","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). date_style Predefined style dates scalar<character>|scalar<numeric|integer>(1<=val<=41) // default: \"iso\" date style use. default short name \"iso\" corresponds ISO 8601 date formatting. 41 date styles total short names can viewed using info_date_style(). pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as dates — fmt_date","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format values as dates — fmt_date","text":"fmt_date() compatible body cells \"Date\", \"POSIXt\" \"character\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format values as dates — fmt_date","text":"from_column() can used certain arguments fmt_date() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): date_style pattern locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"formatting-with-the-date-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the date_style argument","title":"Format values as dates — fmt_date","text":"need supply preset date style date_style argument. date styles numerous can handle localization supported locale. large segment date styles termed flexible date formats means output adapt locale provided. feature makes flexible date formats better option locales \"en\" (default locale). following table provides listing date styles output values (corresponding input date 2000-02-29). can call info_date_style() console view similar table date styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"adapting-output-to-a-specific-locale","dir":"Reference","previous_headings":"","what":"Adapting output to a specific locale","title":"Format values as dates — fmt_date","text":"formatting function can adapt outputs according provided locale value. Examples include \"en\" English (United States) \"fr\" French (France). Note locale value provided override global locale setting performed gt()'s locale argument (settable value received functions locale argument). useful reference locales supported, can call info_locales() view info table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as dates — fmt_date","text":"use exibble dataset create simple, two-column gt table (keeping date time columns). fmt_date(), format date column display dates formatted \"month_day_year\" date style.    using exibble dataset, format date column mixed date formats, dates April 1st different others expressions used rows argument. involve two calls fmt_date() different statements provided rows. first call (dates 1st April) date style \"m_day_year\" used; second call, \"day_m_year\" named date style supplied date_style.    Use exibble dataset create single-column gt table (date column). Format date values using \"yMMMEd\" date style (one 'flexible' styles). Also, set locale \"nl\" get dates Dutch.","code":"exibble |>   dplyr::select(date, time) |>   gt() |>   fmt_date(     columns = date,     date_style = \"month_day_year\"   ) exibble |>   dplyr::select(date, time) |>   gt() |>   fmt_date(     columns = date,     rows = as.Date(date) > as.Date(\"2015-04-01\"),     date_style = \"m_day_year\"   ) |>   fmt_date(     columns = date,     rows = as.Date(date) <= as.Date(\"2015-04-01\"),     date_style = \"day_m_year\"   ) exibble |>   dplyr::select(date) |>   gt() |>   fmt_date(     date_style = \"yMMMEd\",     locale = \"nl\"   )"},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as dates — fmt_date","text":"3-13","code":""},{"path":"https://gt.rstudio.com/reference/fmt_date.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format values as dates — fmt_date","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as datetimes — fmt_datetime","title":"Format values as datetimes — fmt_datetime","text":"Format input values datetime values using either presets date time components formatting directive (can either use CLDR datetime pattern strptime formatting). input values can form POSIXct (.e., datetimes), Date type, character (must ISO 8601 form YYYY-MM-DD HH:MM:SS YYYY-MM-DD).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as datetimes — fmt_datetime","text":"","code":"fmt_datetime(   data,   columns = everything(),   rows = everything(),   date_style = \"iso\",   time_style = \"iso\",   sep = \" \",   format = NULL,   tz = NULL,   pattern = \"{x}\",   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as datetimes — fmt_datetime","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). date_style Predefined style dates scalar<character>|scalar<numeric|integer>(1<=val<=41) // default: \"iso\" date style use. default short name \"iso\" corresponds ISO 8601 date formatting. 41 date styles total short names can viewed using info_date_style(). time_style Predefined style times scalar<character>|scalar<numeric|integer>(1<=val<=25) // default: \"iso\" time style use. default short name \"iso\" corresponds times formatted within ISO 8601 datetime values. 25 time styles total short names can viewed using info_time_style(). sep Separator date time components scalar<character> // default: \" \" separator string use date time components. default, single space character (\" \"). used specifying format code. format Date/time formatting string scalar<character> // default: NULL (optional) optional formatting string used generating custom dates/times. used arguments governing preset styles (date_style time_style) ignored favor formatting via format string. tz Time zone scalar<character> // default: NULL (optional) time zone printing dates/times (.e., output). default NULL preserve time zone input data output. providing time zone, must one recognized user's operating system (vector valid tz values can produced OlsonNames()). pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as datetimes — fmt_datetime","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format values as datetimes — fmt_datetime","text":"fmt_datetime() compatible body cells \"Date\", \"POSIXct\" \"character\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format values as datetimes — fmt_datetime","text":"from_column() can used certain arguments fmt_datetime() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): date_style time_style sep format tz pattern locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"formatting-with-the-date-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the date_style argument","title":"Format values as datetimes — fmt_datetime","text":"can supply preset date style date_style argument separately handle date portion output. date styles numerous can handle localization supported locale. large segment date styles termed flexible date formats means output adapt locale provided. feature makes flexible date formats better option locales \"en\" (default locale). following table provides listing date styles output values (corresponding input date 2000-02-29). can call info_date_style() console view similar table date styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"formatting-with-the-time-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the time_style argument","title":"Format values as datetimes — fmt_datetime","text":"can supply preset time style time_style argument separately handle time portion output. many time styles can handle localization supported locale. Many time styles termed flexible time formats means output adapt locale provided. feature makes flexible time formats better option locales \"en\" (default locale). following table provides listing time styles output values (corresponding input time 14:35:00). noted represent 12- 24-hour time. flexible formats (begin \"E\") include day week. Keep mind pairing time_style values date_style avoid redundant repeating information. can call info_time_style() console view similar table time styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"formatting-with-a-cldr-datetime-pattern","dir":"Reference","previous_headings":"","what":"Formatting with a CLDR datetime pattern","title":"Format values as datetimes — fmt_datetime","text":"can use CLDR datetime pattern format argument create highly customized locale-aware output. character string consists two types elements: Pattern fields, repeat specific pattern character one times. fields replaced date time data formatting. character sets -Z -z reserved use pattern characters. Literal text, output verbatim formatting. can include: characters outside reserved character sets, including spaces punctuation. text single vertical quotes (e.g., 'text'). Two adjacent single vertical quotes (”), represent literal single quote, either inside outside quoted text. number pattern fields quite sizable first look CLDR datetime patterns work. use datetime string \"2018-07-04T22:05:09.2358(America/Vancouver)\" examples follow. \"mm/dd/y\" -> \"05/04/2018\" \"EEEE, MMMM d, y\" -> \"Wednesday, July 4, 2018\" \"MMM d E\" -> \"Jul 4 Wed\" \"HH:mm\" -> \"22:05\" \"h:mm \" -> \"10:05 PM\" \"EEEE, MMMM d, y '' h:mm \" -> \"Wednesday, July 4, 2018 10:05 PM\" individual pattern fields:","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"calendar-year","dir":"Reference","previous_headings":"","what":"Calendar Year","title":"Format values as datetimes — fmt_datetime","text":"yields calendar year, always numeric. cases length \"y\" field specifies minimum number digits display, zero-padded necessary. digits displayed needed show full year. exception: \"yy\" gives use just two low-order digits year, zero-padded necessary. use cases, \"y\" \"yy\" good enough.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"year-in-the-week-in-year-calendar","dir":"Reference","previous_headings":"","what":"Year in the Week in Year Calendar","title":"Format values as datetimes — fmt_datetime","text":"year 'Week Year' based calendars year transition occurs week boundary. may differ calendar year \"y\" near year transition. numeric year designation used conjunction pattern character \"w\" ISO year-week calendar defined ISO 8601.","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"quarter-of-the-year-formatting-and-standalone-versions","dir":"Reference","previous_headings":"","what":"Quarter of the Year: formatting and standalone versions","title":"Format values as datetimes — fmt_datetime","text":"quarter names identified numerically, starting 1 ending 4. Quarter names may vary along two axes: width context. context either 'formatting' (taken default), form used within complete date format string, , 'standalone', form date elements used independently (calendar headers). standalone form may used date format shares form name. , formatting form quarters year consists run \"Q\" values whereas standalone form uses \"q\".","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"month-formatting-and-standalone-versions","dir":"Reference","previous_headings":"","what":"Month: formatting and standalone versions","title":"Format values as datetimes — fmt_datetime","text":"month names identified numerically, starting 1 ending 12. Month names may vary along two axes: width context. context either 'formatting' (taken default), form used within complete date format string, , 'standalone', form date elements used independently (calendar headers). standalone form may used date format shares form name. , formatting form months consists run \"M\" values whereas standalone form uses \"L\".","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"week-of-year","dir":"Reference","previous_headings":"","what":"Week of Year","title":"Format values as datetimes — fmt_datetime","text":"Values calculated week year range 1 53. Week 1 year first week contains least specified minimum number days year. Weeks week 1 one year week 1 following year numbered sequentially 2 52 53 (needed). two available field lengths. display week year value \"ww\" width always show two digits (weeks 1 9 zero padded).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"week-of-month","dir":"Reference","previous_headings":"","what":"Week of Month","title":"Format values as datetimes — fmt_datetime","text":"week month can range 1 5. first day every month always begins week 1 every transition beginning week, week month value incremented 1.","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"day-of-month","dir":"Reference","previous_headings":"","what":"Day of Month","title":"Format values as datetimes — fmt_datetime","text":"day month value always numeric two available field length choices formatting. display day month value \"dd\" formatting always show two digits (days 1 9 zero padded).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"day-of-year","dir":"Reference","previous_headings":"","what":"Day of Year","title":"Format values as datetimes — fmt_datetime","text":"day year value ranges 1 (January 1) either 365 366 (December 31), higher value range indicates year leap year (29 days February, instead 28). field length specifies minimum number digits, zero-padding necessary.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"day-of-week-in-month","dir":"Reference","previous_headings":"","what":"Day of Week in Month","title":"Format values as datetimes — fmt_datetime","text":"day week month returns numerical value indicating number times given weekday occurred month (e.g., '2nd Monday March'). conveniently resolves predicable case structure ranges day month values return predictable day week month values: days 1 - 7 -> 1 days 8 - 14 -> 2 days 15 - 21 -> 3 days 22 - 28 -> 4 days 29 - 31 -> 5","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"modified-julian-date","dir":"Reference","previous_headings":"","what":"Modified Julian Date","title":"Format values as datetimes — fmt_datetime","text":"modified version Julian date obtained subtracting 2,400,000.5 days Julian date (number days since January 1, 4713 BC). essentially results number days since midnight November 17, 1858. half day offset (unlike Julian date, modified Julian date referenced midnight instead noon).","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"day-of-week-name","dir":"Reference","previous_headings":"","what":"Day of Week Name","title":"Format values as datetimes — fmt_datetime","text":"name day week offered four different widths.","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"am-pm-period-of-day","dir":"Reference","previous_headings":"","what":"AM/PM Period of Day","title":"Format values as datetimes — fmt_datetime","text":"denotes noon noon time periods. May upper lowercase depending locale options. wide form may short form 'real' long form (e.g. 'ante meridiem') customarily used. narrow form must unique, unlike fields.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"am-pm-period-of-day-plus-noon-and-midnight","dir":"Reference","previous_headings":"","what":"AM/PM Period of Day Plus Noon and Midnight","title":"Format values as datetimes — fmt_datetime","text":"Provide PM well phrases exactly noon midnight. May upper lowercase depending locale options. locale notion unique 'noon' (.e., 12:00), PM form may substituted. similar behavior can occur 'midnight' (00:00) form. narrow form must unique, unlike fields. () input_midnight: \"2020-05-05T00:00:00\" (b) input_noon: \"2020-05-05T12:00:00\"","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"flexible-day-periods","dir":"Reference","previous_headings":"","what":"Flexible Day Periods","title":"Format values as datetimes — fmt_datetime","text":"Flexible day periods denotes things like 'afternoon', 'evening', etc., flexibility comes locale's language script. locale associated rule set specifies day periods start end locale. () input_morning: \"2020-05-05T00:08:30\" (b) input_afternoon: \"2020-05-05T14:00:00\"","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"hour-","dir":"Reference","previous_headings":"","what":"Hour 0-23","title":"Format values as datetimes — fmt_datetime","text":"Hours 0 23 standard 24-hour clock cycle (midnight plus 1 minute 00:01) using \"HH\" (common width indicates zero-padding 2 digits). Using \"2015-08-01T08:35:09\":","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"hour--1","dir":"Reference","previous_headings":"","what":"Hour 1-12","title":"Format values as datetimes — fmt_datetime","text":"Hours 1 12 standard 12-hour clock cycle (midnight plus 1 minute 12:01) using \"hh\" (common width indicates zero-padding 2 digits). Using \"2015-08-01T08:35:09\":","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"hour--2","dir":"Reference","previous_headings":"","what":"Hour 1-24","title":"Format values as datetimes — fmt_datetime","text":"Using hours 1 24 less common way express 24-hour clock cycle (midnight plus 1 minute 24:01) using \"kk\" (common width indicates zero-padding 2 digits). Using \"2015-08-01T08:35:09\":","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"hour--3","dir":"Reference","previous_headings":"","what":"Hour 0-11","title":"Format values as datetimes — fmt_datetime","text":"Using hours 0 11 less common way express 12-hour clock cycle (midnight plus 1 minute 00:01) using \"KK\" (common width indicates zero-padding 2 digits). Using \"2015-08-01T08:35:09\":","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"minute","dir":"Reference","previous_headings":"","what":"Minute","title":"Format values as datetimes — fmt_datetime","text":"minute hour can number 0 59. Use \"m\" show minimum number digits, \"mm\" always show two digits (zero-padding, necessary).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"seconds","dir":"Reference","previous_headings":"","what":"Seconds","title":"Format values as datetimes — fmt_datetime","text":"second minute can number 0 59. Use \"s\" show minimum number digits, \"ss\" always show two digits (zero-padding, necessary).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"fractional-second","dir":"Reference","previous_headings":"","what":"Fractional Second","title":"Format values as datetimes — fmt_datetime","text":"fractional second truncates (like time fields) width requested (.e., count letters). using pattern \"SSSS\" display four digits past decimal (, incidentally, needs added manually pattern).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"milliseconds-elapsed-in-day","dir":"Reference","previous_headings":"","what":"Milliseconds Elapsed in Day","title":"Format values as datetimes — fmt_datetime","text":"86,400,000 milliseconds day \"\" pattern provide whole number. width can go nine digits \"AAAAAAAAA\" higher field widths result zero padding necessary. Using \"2011-07-27T00:07:19.7223\":","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"the-era-designator","dir":"Reference","previous_headings":"","what":"The Era Designator","title":"Format values as datetimes — fmt_datetime","text":"provides era name given date. Gregorian calendar two eras: AD BC. AD year numbering system, AD 1 immediately preceded 1 BC, nothing (year zero).","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"tz-short-and-long-specific-non-location-format","dir":"Reference","previous_headings":"","what":"TZ // Short and Long Specific non-Location Format","title":"Format values as datetimes — fmt_datetime","text":"short long specific non-location formats time zones suggested displaying time user friendly time zone name. short specific format unavailable, fall back short localized GMT format (\"O\"). long specific format unavailable, fall back long localized GMT format (\"OOOO\").","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"tz-common-utc-offset-formats","dir":"Reference","previous_headings":"","what":"TZ // Common UTC Offset Formats","title":"Format values as datetimes — fmt_datetime","text":"ISO8601 basic format hours, minutes optional seconds fields represented \"Z\", \"ZZ\", \"ZZZ\". format equivalent RFC 822 zone format (optional seconds field absent). equivalent \"xxxx\" specifier. field pattern \"ZZZZ\" represents long localized GMT format. equivalent \"OOOO\" specifier. Finally, \"ZZZZZ\" pattern yields ISO8601 extended format hours, minutes optional seconds fields. ISO8601 UTC indicator Z used local time offset 0. equivalent \"XXXXX\" specifier.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"tz-short-and-long-localized-gmt-formats","dir":"Reference","previous_headings":"","what":"TZ // Short and Long Localized GMT Formats","title":"Format values as datetimes — fmt_datetime","text":"localized GMT formats come two widths \"O\" (removes minutes field 0) \"OOOO\" (always contains minutes field). use GMT indicator changes according locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"tz-short-and-long-generic-non-location-formats","dir":"Reference","previous_headings":"","what":"TZ // Short and Long Generic non-Location Formats","title":"Format values as datetimes — fmt_datetime","text":"generic non-location formats useful displaying recurring wall time (e.g., events, meetings) anywhere people want overly specific. either unavailable, fallback generic location format (\"VVVV\"), short localized GMT format final fallback.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"tz-short-time-zone-ids-and-exemplar-city-formats","dir":"Reference","previous_headings":"","what":"TZ // Short Time Zone IDs and Exemplar City Formats","title":"Format values as datetimes — fmt_datetime","text":"formats provide variations time zone ID often include exemplar city. widest formats, \"VVVV\", useful populating choice list time zones, supports 1--1 name/zone ID mapping uniform text formats.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"tz-iso-formats-with-z-for-","dir":"Reference","previous_headings":"","what":"TZ // ISO 8601 Formats with Z for +0000","title":"Format values as datetimes — fmt_datetime","text":"\"X\"-\"XXX\" field patterns represent valid ISO 8601 patterns time zone offsets datetimes. final two widths, \"XXXX\" \"XXXXX\" allow optional seconds fields. seconds field supported ISO 8601 specification. , ISO 8601 UTC indicator Z used local time offset 0.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"tz-iso-formats-no-use-of-z-for-","dir":"Reference","previous_headings":"","what":"TZ // ISO 8601 Formats (no use of Z for +0000)","title":"Format values as datetimes — fmt_datetime","text":"\"x\"-\"xxxxx\" field patterns represent valid ISO 8601 patterns time zone offsets datetimes. similar \"X\"-\"XXXXX\" field patterns except ISO 8601 UTC indicator Z used local time offset 0.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"formatting-with-a-strptime-format-code","dir":"Reference","previous_headings":"","what":"Formatting with a strptime format code","title":"Format values as datetimes — fmt_datetime","text":"Performing custom date/time formatting format argument can also occur strptime format code. works constructing string individual format codes representing formatted date time elements. indicated leading %, literal characters interpreted characters starting % character. First , look format code combinations work well together strptime format. give us intuition generally work. use datetime \"2015-06-08 23:05:37.48\" examples follow. \"%m/%d/%Y\" -> \"06/08/2015\" \"%, %B %e, %Y\" -> \"Monday, June 8, 2015\" \"%b %e %\" -> \"Jun 8 Mon\" \"%H:%M\" -> \"23:05\" \"%:%M %p\" -> \"11:05 pm\" \"%, %B %e, %Y %:%M %p\" -> \"Monday, June 8, 2015 11:05 pm\" individual format codes date components: \"%\" -> \"Mon\" (abbreviated day week name) \"%\" -> \"Monday\" (full day week name) \"%w\" -> \"1\" (day week number 0..6; Sunday 0) \"%u\" -> \"1\" (day week number 1..7; Monday 1, Sunday 7) \"%y\" -> \"15\" (abbreviated year, using final two digits) \"%Y\" -> \"2015\" (full year) \"%b\" -> \"Jun\" (abbreviated month name) \"%B\" -> \"June\" (full month name) \"%m\" -> \"06\" (month number) \"%d\" -> \"08\" (day number, zero-padded) \"%e\" -> \"8\" (day number without zero padding) \"%j\" -> \"159\" (day year, always zero-padded) \"%W\" -> \"23\" (week number year, always zero-padded) \"%V\" -> \"24\" (week number year, following ISO 8601 standard) \"%C\" -> \"20\" (century number) individual format codes time components: \"%H\" -> \"23\" (24h hour) \"%\" -> \"11\" (12h hour) \"%M\" -> \"05\" (minute) \"%S\" -> \"37\" (second) \"%OS3\" -> \"37.480\" (seconds decimals; 3 decimal places ) %p -> \"pm\" (PM indicator) extra formats may find useful: \"%z\" -> \"+0000\" (signed time zone offset, using UTC) \"%F\" -> \"2015-06-08\" (date ISO 8601 date format) \"%%\" -> \"%\" (literal \"%\" character, case need )","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"adapting-output-to-a-specific-locale","dir":"Reference","previous_headings":"","what":"Adapting output to a specific locale","title":"Format values as datetimes — fmt_datetime","text":"formatting function can adapt outputs according provided locale value. Examples include \"en\" English (United States) \"fr\" French (France). Note locale value provided override global locale setting performed gt()'s locale argument (settable value received functions locale argument). useful reference locales supported, can call info_locales() view info table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as datetimes — fmt_datetime","text":"Use exibble dataset create single-column gt table (datetime column). fmt_datetime() format datetime column dates formatted \"month_day_year\" style times \"h_m_s_p\" 12-hour time style.    Using input table, can use fmt_datetime() flexible date time styles. Two work well together \"MMMEd\" \"Hms\". date time styles , flexible, create outputs conform locale value given locale argument. use two calls fmt_datetime(): first format rows datetime Danish locale (locale = \"da\") second call target first three rows formatting, default locale (\"en\").    possible use format argument write formatting specification. Using CLDR datetime pattern \"EEEE, MMMM d, y '' h:mm (zzzz)\" gives us datetime outputs time zone formatting. provide time zone ID (\"America/Vancouver\") tz argument.","code":"exibble |>   dplyr::select(datetime) |>   gt() |>   fmt_datetime(     date_style = \"month_day_year\",     time_style = \"h_m_s_p\"   ) exibble |>   dplyr::select(datetime) |>   gt() |>   fmt_datetime(     date_style = \"MMMEd\",     time_style = \"Hms\",     locale = \"da\"   ) |>   fmt_datetime(     rows = 1:3,     date_style = \"MMMEd\",     time_style = \"Hms\"   ) exibble |>   dplyr::select(datetime) |>   gt() |>   fmt_datetime(     format = \"EEEE, MMMM d, y 'at' h:mm a (zzzz)\",     tz = \"America/Vancouver\"   )"},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as datetimes — fmt_datetime","text":"3-15","code":""},{"path":"https://gt.rstudio.com/reference/fmt_datetime.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format values as datetimes — fmt_datetime","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Format numeric or duration values as styled time duration strings — fmt_duration","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"Format input values time duration values whether input values numbers difftime class. can specify time units numeric input values (weeks, days, hours, minutes, seconds) output can customized duration style (corresponding narrow, wide, colon-separated, ISO forms) choice output units ranging weeks seconds.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"","code":"fmt_duration(   data,   columns = everything(),   rows = everything(),   input_units = NULL,   output_units = NULL,   duration_style = c(\"narrow\", \"wide\", \"colon-sep\", \"iso\"),   trim_zero_units = TRUE,   max_output_units = NULL,   pattern = \"{x}\",   use_seps = TRUE,   sep_mark = \",\",   force_sign = FALSE,   system = c(\"intl\", \"ind\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). input_units Declaration duration units numerical values scalar<character> // default: NULL (optional) one selected columns contains numeric values (difftime values, contain duration units), keyword must provided input_units gt determine values interpreted terms duration. accepted units : \"seconds\", \"minutes\", \"hours\", \"days\", \"weeks\". output_units Choice output units mult-kw:[weeks|days|hours|minutes|seconds] // default: NULL (optional) Controls output time units. default, NULL, means gt automatically choose time units based input duration value. control time units considered output (trimming trim_zero_units) can specify vector one following keywords: \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\". duration_style Style representing duration values singl-kw:[narrow|wide|colon-sep|iso] // default: \"narrow\" choice four formatting styles output duration values. \"narrow\" (default style), duration values formatted single letter time-part units (e.g., 1.35 days styled \"1d 8h 24m\"). \"wide\", example value expanded \"1 day 8 hours 24 minutes\" formatting. \"colon-sep\" style put days, hours, minutes, seconds \"([D]/)[HH]:[MM]:[SS]\" format. \"iso\" style produce value conforms ISO 8601 rules duration values (e.g., 1.35 days become \"P1DT8H24M\"). trim_zero_units Trimming zero values scalar<logical>|mult-kw:[leading|trailing|internal] // default: TRUE Provides methods remove output time units zero values. default TRUE duration values might otherwise formatted \"0w 1d 0h 4m 19s\" trim_zero_units = FALSE instead displayed \"1d 4m 19s\". Aside using TRUE/FALSE provide vector keywords precise control. keywords : (1) \"leading\", omit leading zero-value time units (e.g., \"0w 1d\" -> \"1d\"), (2) \"trailing\", omit trailing zero-value time units (e.g., \"3d 5h 0s\" -> \"3d 5h\"), \"internal\", removes internal zero-value time units (e.g., \"5d 0h 33m\" -> \"5d 33m\"). max_output_units Maximum number time units display scalar<numeric|integer>(val>=1) // default: NULL (optional) output_units NULL, output time units unspecified left gt handle, numeric value provided max_output_units taken maximum number time units display output time duration values. default, NULL possible time units displayed. option effect duration_style = \"colon-sep\" (output_units can used customize type duration output). pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). force_sign Forcing display positive sign scalar<logical> // default: FALSE positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default negative values display minus sign. system Numbering system grouping separators singl-kw:[intl|ind] // default: \"intl\" international numbering system (keyword: \"intl\") widely used grouping separators (.e., sep_mark) always separated three digits. alternative system, Indian numbering system (keyword: \"ind\"), uses grouping separators correspond thousand, lakh, crore, higher quantities. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"output-units-for-the-colon-separated-duration-style","dir":"Reference","previous_headings":"","what":"Output units for the colon-separated duration style","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"colon-separated duration style (enabled duration_style = \"colon-sep\") essentially clock-based output format uses display logic chronograph watch functionality. , default, display duration values (D/)HH:MM:SS format. duration values greater equal 24 hours number days prepended adjoining slash mark. output format versatile, can changed somewhat output_units option. following combinations output units permitted: c(\"minutes\", \"seconds\") -> MM:SS c(\"hours\", \"minutes\") -> HH:MM c(\"hours\", \"minutes\", \"seconds\") -> HH:MM:SS c(\"days\", \"hours\", \"minutes\") -> (D/)HH:MM specialized combinations result default set used, c(\"days\", \"hours\", \"minutes\", \"seconds\")","code":""},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"fmt_duration() compatible body cells \"numeric\", \"integer\", \"difftime\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"Use part sp500 table create gt table. Create difftime-based column format duration values displayed number days since March 30, 2020.","code":"sp500 |>   dplyr::slice_head(n = 10) |>   dplyr::mutate(     time_point = lubridate::ymd(\"2020-03-30\"),     time_passed = difftime(time_point, date)   ) |>   dplyr::select(time_passed, open, close) |>   gt(rowname_col = \"month\") |>   fmt_duration(     columns = time_passed,     output_units = \"days\",     duration_style = \"wide\"   ) |>   fmt_currency(columns = c(open, close))"},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"3-16","code":""},{"path":"https://gt.rstudio.com/reference/fmt_duration.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format numeric or duration values as styled time duration strings — fmt_duration","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_email.html","id":null,"dir":"Reference","previous_headings":"","what":"Format email addresses to generate 'mailto:' links — fmt_email","title":"Format email addresses to generate 'mailto:' links — fmt_email","text":"cells contain email addresses, fmt_email() can used make email addresses work well email clients user system. expressly used columns contain email addresses (.e., email addresses part larger block text). column data, options email addresses styled. can conventional style (underlines text coloring sets apart text), , can appear button-like (surrounding box can filled color choosing). Email addresses data cells trusted email addresses. can also provide readable labels display_name argument. Supplying single value show label email addresses display names adjacent column used via from_column() call within display_name.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_email.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format email addresses to generate 'mailto:' links — fmt_email","text":"","code":"fmt_email(   data,   columns = everything(),   rows = everything(),   display_name = NULL,   as_button = FALSE,   color = \"auto\",   show_underline = \"auto\",   button_fill = \"auto\",   button_width = \"auto\",   button_outline = \"auto\",   target = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_email.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format email addresses to generate 'mailto:' links — fmt_email","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). display_name Display name email address scalar<character> // default: NULL (optional) display name visible 'label' use email address. NULL (default) address serve display name. two non-NULL options: (1) piece static text can used display name providing string, (2) function can provided fashion display name every email address. as_button Style email address button scalar<logical> // default: FALSE option style email address button. default, FALSE. option chosen button_fill argument becomes usable. color Link color scalar<character> // default: \"auto\" color used resulting email address underline. \"auto\" default; allows gt choose appropriate color based various factors (background button_fill as_button TRUE). show_underline Show link underline scalar<character>|scalar<logical> // default: \"auto\" email address decorated underline? default \"auto\" means gt choose TRUE as_button = FALSE FALSE case. underline color set color option. button_fill, button_width, button_outline Button options scalar<character> // default: \"auto\" Options styling email address button (applies as_button = TRUE). options default set \"auto\", allowing gt choose appropriate fill, width, outline values. target 'target' anchor element attribute scalar<character> // default: NULL anchor element 'target' attribute value. description 'target' attribute  allowed values, refer MDN Web Docs reference anchor HTML element.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_email.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format email addresses to generate 'mailto:' links — fmt_email","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_email.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format email addresses to generate 'mailto:' links — fmt_email","text":"fmt_email() compatible body cells \"character\" \"factor\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_email.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format email addresses to generate 'mailto:' links — fmt_email","text":"from_column() can used certain arguments fmt_email() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): display_name as_button color show_underline button_fill button_width button_outline Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_email.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format email addresses to generate 'mailto:' links — fmt_email","text":"take ten rows peeps dataset create table contact information mailing addresses email addresses. column contains email addresses (email_addr), can use fmt_email() generate 'mailto:' links. Clicking formatted email addresses result new message creation (depending OS integration email client).    can condense table reducing email link icon. approach take use fontawesome icon within display_name argument. icon used \"envelope\" icon produced serves clickable 'mailto:' link. adjusting one cols_merge() calls, can place icon/link next name person.    Another option display names email recipients instead email addresses, making display names serve 'mailto:' links. can using from_column() display_name argument. display names case combined given family names, handled earlier dplyr::mutate() call. space conserved, take opportunity add phone information person.","code":"peeps |>   dplyr::filter(country == \"AUS\") |>   dplyr::select(     starts_with(\"name\"),     address, city, state_prov, postcode, country, email_addr   ) |>   dplyr::mutate(city = toupper(city)) |>   gt(rowname_col = \"name_family\") |>   tab_header(title = \"Our Contacts in Australia\") |>   tab_stubhead(label = \"Name\") |>   fmt_email(columns = email_addr) |>   fmt_country(columns = country) |>   cols_merge(     columns = c(address, city, state_prov, postcode, country),     pattern = \"{1}<br>{2} {3} {4}<br>{5}\"   ) |>   cols_merge(     columns = c(name_family, name_given),     pattern = \"{1},<br>{2}\"   ) |>   cols_label(     address = \"Mailing Address\",     email_addr = \"Email\"   ) |>   tab_style(     style = cell_text(size = \"x-small\"),     locations = cells_body(columns = address)   ) |>   opt_align_table_header(align = \"left\") peeps |>   dplyr::filter(country == \"AUS\") |>   dplyr::select(     starts_with(\"name\"),     address, city, state_prov, postcode, country, email_addr   ) |>   dplyr::mutate(city = toupper(city)) |>   gt(rowname_col = \"name_family\") |>   tab_header(title = \"Our Contacts in Australia\") |>   fmt_email(     columns = email_addr,     display_name = fontawesome::fa(       name = \"envelope\",       height = \"0.75em\",       fill = \"gray\"     )   ) |>   fmt_country(columns = country) |>   cols_merge(     columns = c(address, city, state_prov, postcode, country),     pattern = \"{1}<br>{2} {3} {4}<br>{5}\"   ) |>   cols_merge(     columns = c(name_family, name_given, email_addr),     pattern = \"{1}, {2} {3}\"   ) |>   cols_width(everything() ~ px(200)) |>   tab_style(     style = cell_text(size = px(11)),     locations = cells_body(columns = address)   ) |>   tab_options(column_labels.hidden = TRUE) |>   opt_align_table_header(align = \"left\") peeps |>   dplyr::filter(country == \"AUS\") |>   dplyr::mutate(name = paste(name_given, name_family)) |>   dplyr::mutate(city = toupper(city)) |>   dplyr::mutate(phone_number = gsub(\"^\\\\(0|\\\\)\", \"\", phone_number)) |>   dplyr::select(     name, address, city, state_prov, postcode, country,     email_addr, phone_number, country_code   ) |>   gt(rowname_col = \"email_addr\") |>   tab_header(title = \"Our Contacts in Australia\") |>   tab_stubhead(label = \"Name\") |>   fmt_email(     columns = email_addr,     display_name = from_column(\"name\"),     color = \"gray25\"   ) |>   cols_hide(columns = name) |>   fmt_country(columns = country) |>   cols_merge(     columns = c(address, city, state_prov, postcode, country),     pattern = \"{1}<br>{2} {3} {4}<br>{5}\"   ) |>   cols_merge(     columns = c(phone_number, country_code),     pattern = \"+{2} {1}\"   ) |>   cols_label(     address = \"Mailing Address\",     email_addr = \"Email\",     phone_number = \"Phone\"   ) |>   cols_move_to_start(columns = phone_number) |>   cols_width(everything() ~ px(170)) |>   tab_style(     style = cell_text(size = px(11)),     locations = cells_body(columns = address)   ) |>   cols_align(align = \"left\") |>   opt_align_table_header(align = \"left\")"},{"path":"https://gt.rstudio.com/reference/fmt_email.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format email addresses to generate 'mailto:' links — fmt_email","text":"3-22","code":""},{"path":"https://gt.rstudio.com/reference/fmt_email.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format email addresses to generate 'mailto:' links — fmt_email","text":"v0.11.0 (July 9, 2024)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values to engineering notation — fmt_engineering","title":"Format values to engineering notation — fmt_engineering","text":"numeric values gt table, can perform formatting targeted values rendered engineering notation, numbers written form mantissa (m) exponent (n). combined construction either form m x 10^n mEn. mantissa number 1 1000 exponent multiple 3. example, number 0.0000345 can written engineering notation 34.50 x 10^-6. notation helps simplify calculations make easier compare numbers different scales. fine control formatting task, following options: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol scaling: can choose scale targeted values multiplier value pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values to engineering notation — fmt_engineering","text":"","code":"fmt_engineering(   data,   columns = everything(),   rows = everything(),   decimals = 2,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   scale_by = 1,   exp_style = \"x10n\",   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign_m = FALSE,   force_sign_n = FALSE,   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values to engineering notation — fmt_engineering","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". drop_trailing_zeros Drop trailing zeros scalar<logical> // default: FALSE logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark Drop trailing decimal mark scalar<logical> // default: TRUE logical value determines whether decimal marks always appear even decimal digits display formatting (e.g., 23 becomes 23. FALSE). default trailing decimal marks shown. scale_by Scale values fixed multiplier scalar<numeric|integer> // default: 1 numeric values multiplied scale_by value undergoing formatting. Since default value 1, values changed unless different multiplier value supplied. exp_style Style declaration exponent formatting scalar<character> // default: \"x10n\" Style formatting use scientific notation formatting. default \"x10n\" options include using single letter (e.g., \"e\", \"E\", etc.), letter followed \"1\" signal minimum digit width one, \"low-ten\" using stylized \"10\" marker. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). dec_mark Decimal mark scalar<character> // default: \".\" string used decimal mark. example, using dec_mark = \",\" value 0.152 result formatted value \"0,152\"). argument ignored locale supplied (.e., NULL). force_sign_m, force_sign_n Forcing display positive sign scalar<logical> // default: FALSE plus sign shown positive values mantissa (first component, force_sign_m) exponent (force_sign_n)? effectively show sign values except zero either numeric components notation. , use TRUE either one options. default FALSE, negative numbers display sign. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values to engineering notation — fmt_engineering","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format values to engineering notation — fmt_engineering","text":"fmt_engineering() compatible body cells \"numeric\" \"integer\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format values to engineering notation — fmt_engineering","text":"from_column() can used certain arguments fmt_engineering() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): decimals drop_trailing_zeros drop_trailing_dec_mark scale_by exp_style pattern sep_mark dec_mark force_sign_m force_sign_n locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"adapting-output-to-a-specific-locale","dir":"Reference","previous_headings":"","what":"Adapting output to a specific locale","title":"Format values to engineering notation — fmt_engineering","text":"formatting function can adapt outputs according provided locale value. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID means separator decimal marks correct given locale. values provided sep_mark dec_mark, overridden locale's preferred values. Note locale value provided override global locale setting performed gt()'s locale argument (settable value received functions locale argument). useful reference locales supported, can call info_locales() view info table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values to engineering notation — fmt_engineering","text":"define data frame contains two columns values (one small one large). creating simple gt table small_large_tbl call fmt_engineering() columns.    Notice within form m x 10^n, n values move steps 3 (away 0), m values can 1-3 digits decimal. , values n 0 results display m (first two values large column demonstrates ). Engineering notation expresses values align certain SI prefixes. table compares select SI prefixes symbols decimal engineering-notation representations key numbers.    default method styling notation uses 'm x 10^n' construction can changed 'mEn' style via exp_style argument. can supply single letter optionally affix \"1\" indicate zero-padding n value. Two calls fmt_engineering() used show different options styling engineering notation.","code":"small_large_tbl <-   dplyr::tibble(     small = 10^(-12:-1),     large = 10^(1:12)   )  small_large_tbl |>   gt() |>   fmt_engineering() prefixes_tbl <-   dplyr::tibble(     name = c(       \"peta\", \"tera\", \"giga\", \"mega\", \"kilo\",       NA,       \"milli\", \"micro\", \"nano\", \"pico\", \"femto\"     ),     symbol = c(       \"P\", \"T\", \"G\", \"M\", \"k\",       NA,       \"m\", \":micro:\", \"n\", \"p\", \"f\"     ),     decimal = c(10^(seq(15, -15, -3))),     engineering = decimal   )  prefixes_tbl |>   gt() |>   fmt_number(columns = decimal, n_sigfig = 1) |>   fmt_engineering(columns = engineering) |>   fmt_units(columns = symbol) |>   sub_missing() small_large_tbl |>   gt() |>   fmt_engineering(     columns = small,     exp_style = \"E\"   ) |>   fmt_engineering(     columns = large,     exp_style = \"e1\",     force_sign_n = TRUE   )"},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values to engineering notation — fmt_engineering","text":"3-4","code":""},{"path":"https://gt.rstudio.com/reference/fmt_engineering.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format values to engineering notation — fmt_engineering","text":"v0.3.1 (August 9, 2021)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate flag icons for countries from their country codes — fmt_flag","title":"Generate flag icons for countries from their country codes — fmt_flag","text":"fairly straightforward insert images body cells (using fmt_image() one way ), often need incorporate specialized types graphics within table. One group graphics involves iconography representing different countries, fmt_flag() function helps inserting flag icon (multiple) body cells. make work seamlessly, input cells need contain reference country, can form 2- 3-letter ISO 3166-1 country code (e.g., Egypt \"EG\" country code). function parse targeted body cells codes (countrypops dataset contains ) insert appropriate flag graphics. Multiple flags can included per cell separating country codes commas (e.g., \"GB,TT\"). sep argument allows common separator applied flag icons.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate flag icons for countries from their country codes — fmt_flag","text":"","code":"fmt_flag(   data,   columns = everything(),   rows = everything(),   height = \"1em\",   sep = \" \",   use_title = TRUE,   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate flag icons for countries from their country codes — fmt_flag","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). height Height flag scalar<character> // default: \"1em\" absolute height flag icon table cell. default, set \"1em\". sep Separator flags scalar<character> // default: \" \" output flag icons within body cell, sep provides separator icon. default, single space character (\" \"). use_title Display country name hover scalar<logical> // default: TRUE option display tooltip country name (language according locale value, set either gt()) hovering flag icon. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate flag icons for countries from their country codes — fmt_flag","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_flag.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Generate flag icons for countries from their country codes — fmt_flag","text":"fmt_flag() compatible body cells \"character\" \"factor\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_flag.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Generate flag icons for countries from their country codes — fmt_flag","text":"from_column() can used certain arguments fmt_flag() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): height sep use_title locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_flag.html","id":"supported-regions","dir":"Reference","previous_headings":"","what":"Supported regions","title":"Generate flag icons for countries from their country codes — fmt_flag","text":"following 242 regions (comprise countries) supported names across 574 locales: \"AD\", \"AE\", \"AF\", \"AG\", \"AI\", \"AL\", \"\", \"AO\", \"AR\", \"\", \"\", \"AU\", \"AW\", \"AX\", \"AZ\", \"BA\", \"BB\", \"BD\", \"\", \"BF\", \"BG\", \"BH\", \"BI\", \"BJ\", \"BL\", \"BM\", \"BN\", \"BO\", \"BR\", \"BS\", \"BT\", \"BW\", \"\", \"BZ\", \"CA\", \"CC\", \"CD\", \"CF\", \"CG\", \"CH\", \"CI\", \"CK\", \"CL\", \"CM\", \"CN\", \"CO\", \"CR\", \"CU\", \"CV\", \"CW\", \"CY\", \"CZ\", \"DE\", \"DJ\", \"DK\", \"DM\", \"\", \"DZ\", \"EC\", \"EE\", \"EG\", \"EH\", \"ER\", \"ES\", \"ET\", \"EU\", \"FI\", \"FJ\", \"FK\", \"FM\", \"FO\", \"FR\", \"GA\", \"GB\", \"GD\", \"GE\", \"GF\", \"GG\", \"GH\", \"GI\", \"GL\", \"GM\", \"GN\", \"GP\", \"GQ\", \"GR\", \"GS\", \"GT\", \"GU\", \"GW\", \"GY\", \"HK\", \"HN\", \"HR\", \"HT\", \"HU\", \"ID\", \"IE\", \"IL\", \"IM\", \"\", \"IO\", \"IQ\", \"IR\", \"\", \"\", \"JE\", \"JM\", \"JO\", \"JP\", \"KE\", \"KG\", \"KH\", \"KI\", \"KM\", \"KN\", \"KP\", \"KR\", \"KW\", \"KY\", \"KZ\", \"LA\", \"LB\", \"LC\", \"LI\", \"LK\", \"LR\", \"LS\", \"LT\", \"LU\", \"LV\", \"LY\", \"MA\", \"MC\", \"MD\", \"\", \"MF\", \"MG\", \"MH\", \"MK\", \"ML\", \"MM\", \"MN\", \"MO\", \"MP\", \"MQ\", \"MR\", \"MS\", \"MT\", \"MU\", \"MV\", \"MW\", \"MX\", \"\", \"MZ\", \"NA\", \"NC\", \"NE\", \"NF\", \"NG\", \"NI\", \"NL\", \"\", \"NP\", \"NR\", \"NU\", \"NZ\", \"OM\", \"PA\", \"PE\", \"PF\", \"PG\", \"PH\", \"PK\", \"PL\", \"PM\", \"PN\", \"PR\", \"PS\", \"PT\", \"PW\", \"PY\", \"QA\", \"RE\", \"RO\", \"RS\", \"RU\", \"RW\", \"SA\", \"SB\", \"SC\", \"SD\", \"SE\", \"SG\", \"SI\", \"SK\", \"SL\", \"SM\", \"SN\", \"\", \"SR\", \"SS\", \"ST\", \"SV\", \"SX\", \"SY\", \"SZ\", \"TC\", \"TD\", \"TF\", \"TG\", \"TH\", \"TJ\", \"TK\", \"TL\", \"TM\", \"TN\", \"\", \"TR\", \"TT\", \"TV\", \"TW\", \"TZ\", \"UA\", \"UG\", \"US\", \"UY\", \"UZ\", \"VA\", \"VC\", \"VE\", \"VG\", \"VI\", \"VN\", \"VU\", \"WF\", \"WS\", \"YE\", \"YT\", \"ZA\", \"ZM\", \"ZW\". can view entire set supported flag icons informative table calling info_flags().","code":""},{"path":"https://gt.rstudio.com/reference/fmt_flag.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate flag icons for countries from their country codes — fmt_flag","text":"Use countrypops dataset create gt table. include columns rows table. country_code_2 column 2-letter country codes format required fmt_flag() using function transforms codes circular flag icons.    Using countrypops can generate table provides populations every five years Benelux countries (\"\", \"NL\", \"LU\"). requires manipulation dplyr tidyr introducing table gt. fmt_flag() can obtain flag icons country_code_2 column. , can merge flag icons stub column, generating row labels combination icon text.    fmt_flag() works well even multiple country codes within cell. can operate comma-separated codes without issue. rendered HTML, hovering flag icons results tooltip text showing name country.","code":"countrypops |>   dplyr::filter(year == 2021) |>   dplyr::filter(grepl(\"^S\", country_name)) |>   dplyr::arrange(country_name) |>   dplyr::select(-country_name, -year) |>   dplyr::slice_head(n = 10) |>   gt() |>   fmt_integer() |>   fmt_flag(columns = country_code_2) |>   fmt_country(columns = country_code_3) |>   cols_label(     country_code_2 = \"\",     country_code_3 = \"Country\",     population = \"Population (2021)\"   ) countrypops |>   dplyr::filter(country_code_2 %in% c(\"BE\", \"NL\", \"LU\")) |>   dplyr::filter(year %% 10 == 0) |>   dplyr::select(country_name, country_code_2, year, population) |>   tidyr::pivot_wider(names_from = year, values_from = population) |>   dplyr::slice(1, 3, 2) |>   gt(rowname_col = \"country_name\") |>   tab_header(title = \"Populations of the Benelux Countries\") |>   tab_spanner(columns = everything(), label = \"Year\") |>   fmt_integer() |>   fmt_flag(columns = country_code_2) |>   cols_merge(     columns = c(country_name, country_code_2),     pattern = \"{2} {1}\"   ) countrypops |>   dplyr::filter(year == 2021, population < 100000) |>   dplyr::select(country_code_2, population) |>   dplyr::mutate(population_class = cut(     population,     breaks = scales::breaks_pretty(n = 5)(population)     )   ) |>   dplyr::group_by(population_class) |>   dplyr::summarize(     countries = paste0(country_code_2, collapse = \",\")   ) |>   dplyr::arrange(desc(population_class)) |>   gt() |>   tab_header(title = \"Countries with Small Populations\") |>   fmt_flag(columns = countries) |>   fmt_bins(     columns = population_class,     fmt = ~ fmt_integer(., suffixing = TRUE)   ) |>   cols_label(     population_class = \"Population Range\",     countries = \"Countries\"   ) |>   cols_width(population_class ~ px(150))"},{"path":"https://gt.rstudio.com/reference/fmt_flag.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Generate flag icons for countries from their country codes — fmt_flag","text":"3-24","code":""},{"path":"https://gt.rstudio.com/reference/fmt_flag.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Generate flag icons for countries from their country codes — fmt_flag","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as mixed fractions — fmt_fraction","title":"Format values as mixed fractions — fmt_fraction","text":"numeric values gt table, can perform mixed-fraction-based formatting. several options setting accuracy fractions. Furthermore, option choosing layout (.e., typesetting style) mixed-fraction output. following options available controlling type formatting: accuracy: express fractional part mixed fractions; three keyword options allowance arbitrary denominator settings simplification: option simplify fractions whenever possible layout: can choose output values diagonal inline fractions digit grouping separators: options enable/disable digit separators provide choice separator symbol whole number portion pattern: option use text pattern decoration formatted mixed fractions locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as mixed fractions — fmt_fraction","text":"","code":"fmt_fraction(   data,   columns = everything(),   rows = everything(),   accuracy = NULL,   simplify = TRUE,   layout = c(\"inline\", \"diagonal\"),   use_seps = TRUE,   pattern = \"{x}\",   sep_mark = \",\",   system = c(\"intl\", \"ind\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as mixed fractions — fmt_fraction","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). accuracy Accuracy fractions singl-kw:[low|med|high]|scalar<numeric|integer>(val>=1) // default: \"low\" type fractions generate. can either one keywords \"low\", \"med\", \"high\" (generate fractions denominators 1, 2, 3 digits, respectively) integer value greater zero obtain fractions fixed denominator (2 yields halves, 3 thirds, 4 quarters, etc.). latter option, using simplify = TRUE simplify fractions possible (e.g., 2/4 simplified 1/2). default, \"low\" option used. simplify Simplify fraction scalar<logical> // default: TRUE choosing provide numeric value accuracy, option simplify fraction (possible) can taken TRUE (default). FALSE, denominators fractions fixed value provided accuracy. layout Layout fractions HTML output singl-kw:[inline|diagonal] // default: \"inline\" HTML output, \"inline\" layout default. layout places numerals fraction baseline uses standard slash character. \"diagonal\" layout generate fractions typeset raised/lowered numerals virgule. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). system Numbering system grouping separators singl-kw:[intl|ind] // default: \"intl\" international numbering system (keyword: \"intl\") widely used grouping separators (.e., sep_mark) always separated three digits. alternative system, Indian numbering system (keyword: \"ind\"), uses grouping separators correspond thousand, lakh, crore, higher quantities. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as mixed fractions — fmt_fraction","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format values as mixed fractions — fmt_fraction","text":"fmt_fraction() compatible body cells \"numeric\" \"integer\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format values as mixed fractions — fmt_fraction","text":"from_column() can used certain arguments fmt_fraction() obtain varying parameter values specified column within table. means row formatted little bit ifferently. arguments provide support from_column(): accuracy simplify layout use_seps pattern sep_mark system locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"adapting-output-to-a-specific-locale","dir":"Reference","previous_headings":"","what":"Adapting output to a specific locale","title":"Format values as mixed fractions — fmt_fraction","text":"formatting function can adapt outputs according provided locale value. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID means separator decimal marks correct given locale. value provided sep_mark, overridden locale's preferred values. Note locale value provided override global locale setting performed gt()'s locale argument (settable value received functions locale argument). useful reference locales supported, can call info_locales() view info table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as mixed fractions — fmt_fraction","text":"Using summarized version pizzaplace dataset, create gt table. fmt_fraction() can format f_sold f_income columns display fractions. fractions represented, electing use accuracy = 10. gives fractions tenths. simplify fractions (using simplify = FALSE) means fraction like 5/10 become 1/2. layout =\"diagonal\", get diagonal display fractions.","code":"pizzaplace |>   dplyr::group_by(type, size) |>   dplyr::summarize(     sold = dplyr::n(),     income = sum(price),     .groups = \"drop_last\"   ) |>   dplyr::group_by(type) |>   dplyr::mutate(     f_sold = sold / sum(sold),     f_income = income / sum(income),   ) |>   dplyr::arrange(type, dplyr::desc(income)) |>   gt(rowname_col = \"size\") |>   tab_header(     title = \"Pizzas Sold in 2015\",     subtitle = \"Fraction of Sell Count and Revenue by Size per Type\"   ) |>   fmt_integer(columns = sold) |>   fmt_currency(columns = income) |>   fmt_fraction(     columns = starts_with(\"f_\"),     accuracy = 10,     simplify = FALSE,     layout = \"diagonal\"   ) |>   sub_missing(missing_text = \"\") |>   tab_spanner(     label = \"Sold\",     columns = contains(\"sold\")   ) |>   tab_spanner(     label = \"Revenue\",     columns = contains(\"income\")   ) |>   text_transform(     locations = cells_body(),     fn = function(x) {       dplyr::case_when(         x == 0 ~ \"<em>nil<\/em>\",         x != 0 ~ x       )     }   ) |>   cols_label(     sold = \"Amount\",     income = \"Amount\",     f_sold = md(\"_f_\"),     f_income = md(\"_f_\")   ) |>   cols_align(align = \"center\", columns = starts_with(\"f\")) |>   tab_options(     table.width = px(400),     row_group.as_column = TRUE   )"},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as mixed fractions — fmt_fraction","text":"3-7","code":""},{"path":"https://gt.rstudio.com/reference/fmt_fraction.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format values as mixed fractions — fmt_fraction","text":"v0.4.0 (February 15, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Use icons within a table's body cells — fmt_icon","title":"Use icons within a table's body cells — fmt_icon","text":"can draw library thousands icons selectively insert gt table. fmt_icon() function makes possible operates lot like fmt_flag() input cells need contain reference icon name. exclusively using Font Awesome icons (need fontawesome package installed) reference short icon name. Multiple icons can included per cell separating icon names commas (e.g., \"hard-drive,clock\"). sep argument allows common separator applied icons.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use icons within a table's body cells — fmt_icon","text":"","code":"fmt_icon(   data,   columns = everything(),   rows = everything(),   height = \"1em\",   sep = \" \",   stroke_color = NULL,   stroke_width = NULL,   stroke_alpha = NULL,   fill_color = NULL,   fill_alpha = NULL,   vertical_adj = NULL,   margin_left = NULL,   margin_right = NULL,   a11y = c(\"semantic\", \"decorative\", \"none\") )"},{"path":"https://gt.rstudio.com/reference/fmt_icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use icons within a table's body cells — fmt_icon","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). height Height icon scalar<character> // default: \"1em\" absolute height icon table cell. default, set \"1em\". sep Separator icons scalar<character> // default: \" \" output icons within body cell, sep provides separator icon. default, single space character (\" \"). stroke_color Color icon stroke/outline scalar<character> // default: NULL (optional) icon stroke essentially outline icon. color stroke can modified applying single color . provided default value \"currentColor\" applied stroke color matches parent HTML element's color attribute. stroke_width Width icon stroke/outline scalar<character|numeric|integer> // default: NULL (optional) stroke_width option allows setting color icon outline stroke. default, stroke width small \"1px\" size adjustment can sometimes useful. stroke_alpha Transparency value icon stroke/outline scalar<numeric> // default: NULL (optional) level transparency icon stroke can controlled decimal value 0 1. fill_color Color icon fill scalar<character>|vector<character> // default: NULL (optional) fill color icon can set fill_color; providing single color change color fill icon's 'stroke' outline (use stroke_color modify ). named vector named list comprising icon names corresponding fill colors can alternatively used (e.g., list(\"circle-check\" = \"green\", \"circle-xmark\" = \"red\"). nothing provided default value \"currentColor\" applied fill matches color parent HTML element's color attribute. fill_alpha Transparency value icon fill scalar<numeric|integer>(0>=val>=1) // default: NULL (optional) level transparency icon fill can controlled decimal value 0 1. vertical_adj Vertical adjustment icon baseline scalar<character|numeric|integer> // default: NULL (optional) vertical alignment icon. default, length \"-0.125em\" used. margin_left Margin width left icon scalar<character|numeric|integer> // default: NULL (optional) length value margin left icon can set margin_left. default, \"auto\" used space needed left-hand side length \"0.2em\" recommended starting point. margin_right Margin width right icon scalar<character|numeric|integer> // default: NULL (optional) length value margin right icon can set margin_right. default, \"auto\" used space needed right-hand side length \"0.2em\" recommended starting point. a11y Accessibility mode icon singl-kw:[semantic|decorative|none] // default: \"semantic\" accessibility mode icon display can set a11y argument. Icons can either \"semantic\" \"decorative\". Using \"none\" result accessibility features icons.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_icon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use icons within a table's body cells — fmt_icon","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_icon.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Use icons within a table's body cells — fmt_icon","text":"fmt_icon() compatible body cells \"character\" \"factor\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_icon.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Use icons within a table's body cells — fmt_icon","text":"from_column() can used certain arguments fmt_icon() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): height sep stroke_color stroke_width stroke_alpha fill_color fill_alpha vertical_adj margin_left margin_right a11y Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_icon.html","id":"icons-that-can-be-used","dir":"Reference","previous_headings":"","what":"Icons that can be used","title":"Use icons within a table's body cells — fmt_icon","text":"fmt_icon() relies installation fontawesome package operate every icon within package can accessed either icon name full name. example, Arrow icon icon name \"arrow-\" corresponding full name \"fas fa-arrow-\". cases want use shorter name, icons Solid (\"fas\") Regular (\"far\") variant full name can disambiguate pairing. latest release fontawesome (v0.5.2), 2,025 icons can view entire icon listing calling info_icons(). get information table showing every icon associated set identifiers.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_icon.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use icons within a table's body cells — fmt_icon","text":"first example generating icons fmt_icon(), make simple tibble two columns Font Awesome icon names. separate multiple icons per cell commas. default, icons 1 em height; going make icons slightly larger (can see fine details ) setting height = \"4em\".    take rows towny dataset make csd_type column contains Font Awesome icon names (want \"city\" \"house-chimney\" icons ). using fmt_icon() format csd_type column, get icons representative two categories municipality subset data.    use portion metro dataset create gt table. Depending train services offered subset stations, Font Awesome icon names applied cells different services exist (specific names \"train-subway\", \"train\", \"train-tram\"). tidyr::unite(), icon names can converged single column (services) NA values removed. Since names correspond icons correct format (separated commas), can formatted Font Awesome icons fmt_icon().    Taking handful starred reviews popular film review website, attempt format numerical score (0 4) use \"star\" \"star-half\" icons. case, useful generate repeating sequence icon names (separated commas) rating column introducing table gt(). can make use numerical rating values stars within fmt_icon() little help from_column(). Using , can dynamically adjust icon's fill_alpha (.e., opacity) value accentuate films higher scores.    fairly common thing icons tables indicate whether quantity either higher lower another. arrow symbols can serve good visual indicators purpose. can make use \"-arrow\" \"-arrow\" icons . fmt_icon() function find text values cells generate icons, , generate text within new column cols_add() (expression used therein generate correct text given close open values). Following , fmt_icon() used fill_color argument provided named vector indicates color used icon.","code":"dplyr::tibble(   animals = c(     \"hippo\", \"fish,spider\", \"mosquito,locust,frog\",     \"dog,cat\", \"kiwi-bird\"   ),   foods = c(     \"bowl-rice\", \"egg,pizza-slice\", \"burger,lemon,cheese\",     \"carrot,hotdog\", \"bacon\"   ) ) |>   gt() |>   fmt_icon(height = \"4em\") |>   cols_align(align = \"center\", columns = everything()) towny |>   dplyr::select(name, csd_type, population_2021) |>   dplyr::filter(csd_type %in% c(\"city\", \"town\")) |>   dplyr::group_by(csd_type) |>   dplyr::slice_max(population_2021, n = 5) |>   dplyr::ungroup() |>   dplyr::mutate(     csd_type = ifelse(csd_type == \"town\", \"house-chimney\", \"city\")   ) |>   gt() |>   fmt_integer() |>   fmt_icon(columns = csd_type) |>   cols_move_to_start(columns = csd_type) |>   cols_label(     csd_type = \"\",     name = \"City/Town\",     population_2021 = \"Population\"   ) metro |>   dplyr::select(name, lines, connect_rer, connect_tramway, location) |>   dplyr::slice_tail(n = 10) |>   dplyr::mutate(lines = \"train-subway\") |>   dplyr::mutate(connect_rer = ifelse(!is.na(connect_rer), \"train\", NA)) |>   dplyr::mutate(     connect_tramway = ifelse(!is.na(connect_tramway), \"train-tram\", NA)   ) |>   tidyr::unite(     col = services,     lines:connect_tramway,     sep = \",\",     na.rm = TRUE   ) |>   gt() |>   fmt_icon(     columns = services,     a11y = \"decorative\"   ) |>   cols_merge(     columns = c(name, services),     pattern = \"{1} ({2})\"   ) |>   cols_label(     name = \"Station\",     location = \"Location\"   ) dplyr::tibble(   film = c(     \"The Passengers of the Night\", \"Serena\", \"The Father\",     \"Roma\", \"The Handmaiden\", \"Violet\", \"Vice\"   ),   stars = c(3, 1, 3.5, 4, 4, 2.5, 1.5) ) |>   dplyr::mutate(rating = dplyr::case_when(     stars %% 1 == 0 ~ strrep(\"star,\", stars),     stars %% 1 != 0 ~ paste0(strrep(\"star,\", floor(stars)), \"star-half\")   )) |>   gt() |>   fmt_icon(     columns = rating,     fill_color = \"red\",     fill_alpha = from_column(\"stars\", fn = function(x) x / 4)   ) |>   cols_hide(columns = stars) |>   tab_source_note(     source_note = md(       \"Data obtained from <https://www.rogerebert.com/reviews>.\"     )   ) sp500 |>   dplyr::slice_head(n = 10) |>   dplyr::select(date, open, close) |>   dplyr::arrange(-dplyr::row_number()) |>   gt(rowname_col = \"date\") |>   cols_add(week = date, .after = date) |>   cols_add(dir = ifelse(close > open, \"arrow-up\", \"arrow-down\")) |>   cols_merge(columns = c(date, week), pattern = \"{1} ({2})\") |>   fmt_date(columns = date, date_style = \"m_day_year\") |>   fmt_datetime(columns = week, format = \"w\", pattern = \"W{x}\") |>   fmt_currency() |>   fmt_icon(     columns = dir,     fill_color = c(\"arrow-up\" = \"green\", \"arrow-down\" = \"red\")   ) |>   cols_label(     open = \"Opening Value\",     close = \"Closing Value\",     dir = \"\"   ) |>   opt_stylize(style = 1, color = \"gray\")"},{"path":"https://gt.rstudio.com/reference/fmt_icon.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Use icons within a table's body cells — fmt_icon","text":"3-26","code":""},{"path":"https://gt.rstudio.com/reference/fmt_icon.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Use icons within a table's body cells — fmt_icon","text":"v0.10.0 (October 7, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Format image paths to generate images in cells — fmt_image","title":"Format image paths to generate images in cells — fmt_image","text":"easily insert graphics body cells, can use fmt_image(). allows one images placed targeted cells. cells need contain reference image file, either: (1) complete http/https local paths files; (2) file names, common path can provided via path; (3) fragment file name, file_pattern helps compose entire file name path provides path information. expressly used columns contain references image files (.e., image references part larger block text). Multiple images can included per cell separating image references commas. sep argument allows common separator applied images.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format image paths to generate images in cells — fmt_image","text":"","code":"fmt_image(   data,   columns = everything(),   rows = everything(),   height = NULL,   width = NULL,   sep = \" \",   path = NULL,   file_pattern = \"{x}\",   encode = TRUE )"},{"path":"https://gt.rstudio.com/reference/fmt_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format image paths to generate images in cells — fmt_image","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). height, width Height width images scalar<character> // default: NULL (optional) absolute height image table cell. set width height remains NULL (vice versa), width--height ratio preserved gt calculates length missing dimension. width height NULL, height set \"2em\" width calculated. sep Separator images scalar<character> // default: \" \" output images within body cell, sep provides separator image. path Path image files scalar<character> // default: NULL (optional) optional path local image files (combined filenames). file_pattern File pattern specification scalar<character> // default: \"{x}\" pattern use mapping input values body cells names graphics files. string supplied use \"{x}\" pattern map filename fragments input strings. encode Use Base64 encoding scalar<logical> // default: TRUE option always use Base64 encoding image paths determined local. default, TRUE.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format image paths to generate images in cells — fmt_image","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_image.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format image paths to generate images in cells — fmt_image","text":"from_column() can used certain arguments fmt_image() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): height width sep path file_pattern encode Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_image.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format image paths to generate images in cells — fmt_image","text":"Using small portion metro dataset, create gt table. include columns rows table. lines connect_rer columns comma-separated listings numbers/letters (corresponding lines served station). directory SVG graphics lines within package (path directory containing images can accessed via system.file(\"metro_svg\", package = \"gt\")), filenames roughly correspond data two columns. fmt_image() can used inputs since path file_pattern arguments allow us compose complete valid file locations. get sequences images table cells, taken referenced graphics files disk.","code":"metro |>   dplyr::select(name, caption, lines, connect_rer) |>   dplyr::slice_head(n = 10) |>   gt() |>   cols_merge(     columns = c(name, caption),     pattern = \"{1}<< ({2})>>\"   ) |>   text_replace(     locations = cells_body(columns = name),     pattern = \"\\\\((.*?)\\\\)\",     replacement = \"<br>(<em>\\\\1<\/em>)\"   ) |>   sub_missing(columns = connect_rer, missing_text = \"\") |>   fmt_image(     columns = lines,     path = system.file(\"metro_svg\", package = \"gt\"),     file_pattern = \"metro_{x}.svg\"   ) |>   fmt_image(     columns = connect_rer,     path = system.file(\"metro_svg\", package = \"gt\"),     file_pattern = \"rer_{x}.svg\"   ) |>   cols_label(     name = \"Station\",     lines = \"Lines\",     connect_rer = \"RER\"   ) |>   cols_align(align = \"left\") |>   tab_style(     style = cell_borders(       sides = c(\"left\", \"right\"),       weight = px(1),       color = \"gray85\"     ),     locations = cells_body(columns = lines)   ) |>   opt_stylize(style = 6, color = \"blue\") |>   opt_all_caps() |>   opt_horizontal_padding(scale = 1.75)"},{"path":"https://gt.rstudio.com/reference/fmt_image.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format image paths to generate images in cells — fmt_image","text":"3-23","code":""},{"path":"https://gt.rstudio.com/reference/fmt_image.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format image paths to generate images in cells — fmt_image","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values to indexed characters — fmt_index","title":"Format values to indexed characters — fmt_index","text":"numeric values gt table can transform index values, usually based letters. characters can derived specified locale intended ordering (often leaving characters diacritical marks).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values to indexed characters — fmt_index","text":"","code":"fmt_index(   data,   columns = everything(),   rows = everything(),   case = c(\"upper\", \"lower\"),   index_algo = c(\"repeat\", \"excel\"),   pattern = \"{x}\",   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values to indexed characters — fmt_index","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). case Use uppercase lowercase letters singl-kw:[upper|lower] // default: \"upper\" resulting index characters rendered uppercase (\"upper\") lowercase (\"lower\") letters? default, set \"upper\". index_algo Indexing algorithm singl-kw:[repeat|excel] // default: \"repeat\" indexing algorithm handles recycling index character set. default, \"repeat\" option used characters doubled, tripled, , moving past character set limit. alternative \"excel\" option, Excel-based column naming adapted used (e.g., [..., Y, Z, AA, AB, ...]). pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values to indexed characters — fmt_index","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_index.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format values to indexed characters — fmt_index","text":"fmt_index() compatible body cells \"numeric\" \"integer\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_index.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format values to indexed characters — fmt_index","text":"from_column() can used certain arguments fmt_index() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): case index_algo pattern locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_index.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values to indexed characters — fmt_index","text":"Using summarized version towny dataset, create gt table. , fmt_index() used transform incremental integer values capitalized letters (ranking column). cols_merge() formatted column \"\" \"E\" values merged census_div column create indexed listing census subdivisions, ordered increasing total municipal population.","code":"towny |>   dplyr::select(name, csd_type, census_div, population_2021) |>   dplyr::group_by(census_div) |>   dplyr::summarize(     population = sum(population_2021),     .groups = \"drop_last\"   ) |>   dplyr::slice_min(population, n = 5) |>   dplyr::mutate(ranking = dplyr::row_number(), .before = 0) |>   gt() |>   fmt_integer() |>   fmt_index(columns = ranking, pattern = \"{x}.\") |>   cols_merge(columns = c(ranking, census_div)) |>   cols_align(align = \"left\", columns = ranking) |>   cols_label(     ranking = md(\"Census  \\nSubdivision\"),     population = md(\"Population  \\nin 2021\")   ) |>   tab_header(title = md(\"The smallest  \\ncensus subdivisions\")) |>   tab_options(table.width = px(325))"},{"path":"https://gt.rstudio.com/reference/fmt_index.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values to indexed characters — fmt_index","text":"3-10","code":""},{"path":"https://gt.rstudio.com/reference/fmt_index.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format values to indexed characters — fmt_index","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as integers — fmt_integer","title":"Format values as integers — fmt_integer","text":"numeric values gt table, can perform number-based formatting targeted values always rendered integer values. can fine control integer formatting following options: digit grouping separators: options enable/disable digit separators provide choice separator symbol scaling: can choose scale targeted values multiplier value large-number suffixing: larger figures (thousands, millions, etc.) can autoscaled decorated appropriate suffixes pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as integers — fmt_integer","text":"","code":"fmt_integer(   data,   columns = everything(),   rows = everything(),   use_seps = TRUE,   accounting = FALSE,   scale_by = 1,   suffixing = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   force_sign = FALSE,   system = c(\"intl\", \"ind\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as integers — fmt_integer","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting Use accounting style scalar<logical> // default: FALSE option use accounting style values. Normally, negative values shown minus sign using accounting style instead put negative values parentheses. scale_by Scale values fixed multiplier scalar<numeric|integer> // default: 1 numeric values multiplied scale_by value undergoing formatting. Since default value 1, values changed unless different multiplier value supplied. value ignored using suffixing options (.e., suffixing set FALSE). suffixing Specification large-number suffixing scalar<logical>|vector<character> // default: FALSE suffixing option allows us scale apply suffixes larger numbers (e.g., 1924000 can transformed 2M). option can accept logical value, FALSE (default) perform transformation TRUE apply thousands (K), millions (M), billions (B), trillions (T) suffixes automatic value scaling. can alternatively provide character vector serves specification symbols used value ranges. preferred symbols replace defaults (e.g., c(\"k\", \"Ml\", \"Bn\", \"Tr\") replaces \"K\", \"M\", \"B\", \"T\"). Including NA values vector ensure particular range either included transformation (e.g., c(NA, \"M\", \"B\", \"T\") modify numbers thousands range) range inherit previous suffix (e.g., c(\"K\", \"M\", NA, \"T\"), numbers range millions billions terms millions). use suffixing (set expressly FALSE) means value provided scale_by ignored. using system = \"ind\" default suffix set provided suffixing = TRUE equivalent c(NA, \"L\", \"Cr\"). apply suffixes thousands range, express values lakhs crores. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). force_sign Forcing display positive sign scalar<logical> // default: FALSE positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. system Numbering system grouping separators singl-kw:[intl|ind] // default: \"intl\" international numbering system (keyword: \"intl\") widely used grouping separators (.e., sep_mark) always separated three digits. alternative system, Indian numbering system (keyword: \"ind\"), uses grouping separators correspond thousand, lakh, crore, higher quantities. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as integers — fmt_integer","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format values as integers — fmt_integer","text":"fmt_integer() compatible body cells \"numeric\" \"integer\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format values as integers — fmt_integer","text":"from_column() can used certain arguments  fmt_integer() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): use_seps accounting scale_by suffixing pattern sep_mark force_sign system locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"adapting-output-to-a-specific-locale","dir":"Reference","previous_headings":"","what":"Adapting output to a specific locale","title":"Format values as integers — fmt_integer","text":"formatting function can adapt outputs according provided locale value. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID means separator marks correct given locale. value provided sep_mark, overridden locale's preferred value. Note locale value provided override global locale setting performed gt()'s locale argument (settable value received functions locale argument). useful reference locales supported, can call info_locales() view info table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as integers — fmt_integer","text":"example, use two columns exibble dataset create simple gt table. fmt_integer(), format num column integer values digit separators (use_seps = FALSE option).    use modified version countrypops dataset create gt table row labels. format numeric columns fmt_integer() scale values 1 / 1E6, giving us integer values representing millions people. can make clear values represent informative spanner label via tab_spanner().    Using subset towny dataset, can interesting things integer values. cols_add() add difference column (calculates difference 2021 2001 populations). numeric values formatted first pass fmt_integer(); second pass fmt_integer() focuses difference column use force_sign = TRUE option draw attention positive negative difference values.","code":"exibble |>   dplyr::select(num, char) |>   gt() |>   fmt_integer(use_seps = FALSE) countrypops |>   dplyr::select(country_code_3, year, population) |>   dplyr::filter(country_code_3 %in% c(\"CHN\", \"IND\", \"USA\", \"PAK\", \"IDN\")) |>   dplyr::filter(year > 1975 & year %% 5 == 0) |>   tidyr::spread(year, population) |>   dplyr::arrange(desc(`2015`)) |>   gt(rowname_col = \"country_code_3\") |>   fmt_integer(scale_by = 1 / 1E6) |>   tab_spanner(label = \"Millions of People\", columns = everything()) towny |>   dplyr::select(name, population_2001, population_2021) |>   dplyr::slice_tail(n = 10) |>   gt() |>   cols_add(difference = population_2021 - population_2001) |>   fmt_integer() |>   fmt_integer(columns = difference, force_sign = TRUE) |>   cols_label_with(fn = function(x) gsub(\"population_\", \"\", x)) |>   tab_style(     style = cell_fill(color = \"gray90\"),     locations = cells_body(columns = difference)   )"},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as integers — fmt_integer","text":"3-2","code":""},{"path":"https://gt.rstudio.com/reference/fmt_integer.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format values as integers — fmt_integer","text":"v0.3.1 (August 9, 2021)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Markdown text — fmt_markdown","title":"Format Markdown text — fmt_markdown","text":"Markdown-formatted text incoming cells transformed appropriate output type render using fmt_markdown().","code":""},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Markdown text — fmt_markdown","text":"","code":"fmt_markdown(   data,   columns = everything(),   rows = everything(),   md_engine = c(\"markdown\", \"commonmark\") )"},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Markdown text — fmt_markdown","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). md_engine Choice Markdown engine singl-kw:[markdown|commonmark] // default: \"markdown\" engine preference Markdown rendering. default, set \"markdown\" gt use markdown package Markdown conversion HTML LaTeX. option \"commonmark\" commonmark package used.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Markdown text — fmt_markdown","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format Markdown text — fmt_markdown","text":"from_column() can used md_engine argument fmt_markdown() obtain varying parameter values specified column within table. means row formatted little bit differently. Please note argument (md_engine), from_column() call needs reference column data character type. Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide().","code":""},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Markdown text — fmt_markdown","text":"Create Markdown-based text snippets.   Arrange text snippets tibble using dplyr::tribble(), , create gt table format columns fmt_markdown().    fmt_markdown() can also handle LaTeX math formulas enclosed \"$..$\" (inline math) also \"$$..$$\" (display math). following table body cells contain mathematical formulas display mode (.e., formulas surrounded \"$$\"). , math can used within md() wherever possibility insert text table (e.g., cols_label(), tab_header(), etc.).","code":"text_1a <- \" ### This is Markdown.  Markdown's syntax is comprised entirely of punctuation characters, which punctuation characters have been carefully chosen so as to look like what they mean... assuming you've ever used email. \"  text_1b <- \" Info on Markdown syntax can be found [here](https://daringfireball.net/projects/markdown/). \"  text_2a <- \" The **gt** package has these datasets:   - `countrypops`  - `sza`  - `gtcars`  - `sp500`  - `pizzaplace`  - `exibble` \"  text_2b <- \" There's a quick reference [here](https://commonmark.org/help/). \" dplyr::tribble(   ~Markdown, ~md,   text_1a,   text_2a,   text_1b,   text_2b, ) |>   gt() |>   fmt_markdown(columns = everything()) |>   tab_options(table.width = px(400)) dplyr::tibble(   idx = 1:5,   l_time_domain =     c(       \"$$1$$\",       \"$${{\\\\bf{e}}^{a\\\\,t}}$$\",       \"$${t^n},\\\\,\\\\,\\\\,\\\\,\\\\,n = 1,2,3, \\\\ldots$$\",       \"$${t^p}, p > -1$$\",       \"$$\\\\sqrt t$$\"     ),   l_laplace_s_domain =     c(       \"$$\\\\frac{1}{s}$$\",       \"$$\\\\frac{1}{{s - a}}$$\",       \"$$\\\\frac{{n!}}{{{s^{n + 1}}}}$$\",       \"$$\\\\frac{{\\\\Gamma \\\\left( {p + 1} \\\\right)}}{{{s^{p + 1}}}}$$\",       \"$$\\\\frac{{\\\\sqrt \\\\pi }}{{2{s^{\\\\frac{3}{2}}}}}$$\"     ) ) |>   gt(rowname_col = \"idx\") |>   fmt_markdown() |>   cols_label(     l_time_domain = md(       \"Time Domain<br/>$\\\\small{f\\\\left( t \\\\right) =       {\\\\mathcal{L}^{\\\\,\\\\, - 1}}\\\\left\\\\{ {F\\\\left( s \\\\right)} \\\\right\\\\}}$\"     ),     l_laplace_s_domain = md(       \"$s$ Domain<br/>$\\\\small{F\\\\left( s \\\\right) =       \\\\mathcal{L}\\\\left\\\\{ {f\\\\left( t \\\\right)} \\\\right\\\\}}$\"     )   ) |>   tab_header(     title = md(       \"A (Small) Table of Laplace Transforms &mdash; $\\\\small{{\\\\mathcal{L}}}$\"     ),     subtitle = md(       \"Five commonly used Laplace transforms and formulas.<br/><br/>\"     )   ) |>   cols_align(align = \"center\") |>   opt_align_table_header(align = \"left\") |>   cols_width(     idx ~ px(50),     l_time_domain ~ px(300),     l_laplace_s_domain ~ px(600)   ) |>   opt_stylize(     style = 2,     color = \"gray\",     add_row_striping = FALSE   ) |>   opt_table_outline(style = \"invisible\") |>   tab_style(     style = cell_fill(color = \"gray95\"),     locations = cells_body(columns = l_time_domain)   ) |>   tab_options(     heading.title.font.size = px(32),     heading.subtitle.font.size = px(18),     heading.padding = px(0),     footnotes.multiline = FALSE,     column_labels.border.lr.style = \"solid\",     column_labels.border.lr.width = px(1)   )"},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format Markdown text — fmt_markdown","text":"3-27","code":""},{"path":"https://gt.rstudio.com/reference/fmt_markdown.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format Markdown text — fmt_markdown","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Format missing values (deprecated) — fmt_missing","title":"Format missing values (deprecated) — fmt_missing","text":"Format missing values (deprecated)","code":""},{"path":"https://gt.rstudio.com/reference/fmt_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format missing values (deprecated) — fmt_missing","text":"","code":"fmt_missing(   data,   columns = everything(),   rows = everything(),   missing_text = \"---\" )"},{"path":"https://gt.rstudio.com/reference/fmt_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format missing values (deprecated) — fmt_missing","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). missing_text text used place NA values rendered table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_missing.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format missing values (deprecated) — fmt_missing","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Format numeric values — fmt_number","title":"Format numeric values — fmt_number","text":"numeric values gt table, can perform number-based formatting targeted values rendered higher consideration tabular presentation. Furthermore, finer control numeric formatting following options: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol scaling: can choose scale targeted values multiplier value large-number suffixing: larger figures (thousands, millions, etc.) can autoscaled decorated appropriate suffixes pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format numeric values — fmt_number","text":"","code":"fmt_number(   data,   columns = everything(),   rows = everything(),   decimals = 2,   n_sigfig = NULL,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   use_seps = TRUE,   accounting = FALSE,   scale_by = 1,   suffixing = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   system = c(\"intl\", \"ind\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format numeric values — fmt_number","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". n_sigfig Number significant figures scalar<numeric|integer>(val>=1) // default: NULL (optional) option format numbers n significant figures. default, NULL thus number values formatted according number decimal places set via decimals. opting format according rules significant figures, n_sigfig must number greater equal 1. values passed decimals drop_trailing_zeros arguments ignored. drop_trailing_zeros Drop trailing zeros scalar<logical> // default: FALSE logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark Drop trailing decimal mark scalar<logical> // default: TRUE logical value determines whether decimal marks always appear even decimal digits display formatting (e.g., 23 becomes 23. FALSE). default trailing decimal marks shown. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting Use accounting style scalar<logical> // default: FALSE option use accounting style values. Normally, negative values shown minus sign using accounting style instead put negative values parentheses. scale_by Scale values fixed multiplier scalar<numeric|integer> // default: 1 numeric values multiplied scale_by value undergoing formatting. Since default value 1, values changed unless different multiplier value supplied. value ignored using suffixing options (.e., suffixing set FALSE). suffixing Specification large-number suffixing scalar<logical>|vector<character> // default: FALSE suffixing option allows us scale apply suffixes larger numbers (e.g., 1924000 can transformed 1.92M). option can accept logical value, FALSE (default) perform transformation TRUE apply thousands (\"K\"), millions (\"M\"), billions (\"B\"), trillions (\"T\") suffixes automatic value scaling. can alternatively provide character vector serves specification symbols used value ranges. preferred symbols replace defaults (e.g., c(\"k\", \"Ml\", \"Bn\", \"Tr\") replaces \"K\", \"M\", \"B\", \"T\"). Including NA values vector ensure particular range either included transformation (e.g., c(NA, \"M\", \"B\", \"T\") modify numbers thousands range) range inherit previous suffix (e.g., c(\"K\", \"M\", NA, \"T\"), numbers range millions billions terms millions). use suffixing (set expressly FALSE) means value provided scale_by ignored. using system = \"ind\" default suffix set provided suffixing = TRUE equivalent c(NA, \"L\", \"Cr\"). apply suffixes thousands range, express values lakhs crores. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). dec_mark Decimal mark scalar<character> // default: \".\" string used decimal mark. example, using dec_mark = \",\" value 0.152 result formatted value \"0,152\"). argument ignored locale supplied (.e., NULL). force_sign Forcing display positive sign scalar<logical> // default: FALSE positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. system Numbering system grouping separators singl-kw:[intl|ind] // default: \"intl\" international numbering system (keyword: \"intl\") widely used grouping separators (.e., sep_mark) always separated three digits. alternative system, Indian numbering system (keyword: \"ind\"), uses grouping separators correspond thousand, lakh, crore, higher quantities. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format numeric values — fmt_number","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format numeric values — fmt_number","text":"fmt_number() compatible body cells \"numeric\" \"integer\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format numeric values — fmt_number","text":"from_column() can used certain arguments fmt_number() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): decimals n_sigfig drop_trailing_zeros drop_trailing_dec_mark use_seps accounting scale_by suffixing pattern sep_mark dec_mark force_sign system locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"adapting-output-to-a-specific-locale","dir":"Reference","previous_headings":"","what":"Adapting output to a specific locale","title":"Format numeric values — fmt_number","text":"formatting function can adapt outputs according provided locale value. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID means separator decimal marks correct given locale. values provided sep_mark dec_mark, overridden locale's preferred values. Note locale value provided override global locale setting performed gt()'s locale argument (settable value received functions locale argument). useful reference locales supported, can call info_locales() view info table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format numeric values — fmt_number","text":"use exibble dataset create gt table. fmt_number(), format num column three decimal places (decimals = 3) omit use digit separators (use_seps = FALSE).    Use modified version countrypops dataset create gt table row labels. Format columns use large-number suffixing (e.g., \"10,000,000\" becomes \"10M\") suffixing = TRUE option.    variation previous table, can combine large-number suffixing declaration number significant digits use. things like population figures, n_sigfig = 3 good option.    can cases want show numbers large number decimal places also drop unnecessary trailing zeros low-precision values. take portion towny dataset format latitude longitude columns fmt_number(). 5 digits displayed decimal values, also unconditionally drop runs trailing zeros decimal part drop_trailing_zeros = TRUE.    Another strategy dealing precision decimals separate column values specify many decimal digits retain. column can added via cols_add() can part input table gt(). column available, can referenced decimals argument from_column(). approach yields display coordinate values reflects measurement precision value.","code":"exibble |>   gt() |>   fmt_number(     columns = num,     decimals = 3,     use_seps = FALSE   ) countrypops |>   dplyr::select(country_code_3, year, population) |>   dplyr::filter(country_code_3 %in% c(\"CHN\", \"IND\", \"USA\", \"PAK\", \"IDN\")) |>   dplyr::filter(year > 1975 & year %% 5 == 0) |>   tidyr::spread(year, population) |>   dplyr::arrange(desc(`2015`)) |>   gt(rowname_col = \"country_code_3\") |>   fmt_number(suffixing = TRUE) countrypops |>   dplyr::select(country_code_3, year, population) |>   dplyr::filter(country_code_3 %in% c(\"CHN\", \"IND\", \"USA\", \"PAK\", \"IDN\")) |>   dplyr::filter(year > 1975 & year %% 5 == 0) |>   tidyr::spread(year, population) |>   dplyr::arrange(desc(`2015`)) |>   gt(rowname_col = \"country_code_3\") |>   fmt_number(suffixing = TRUE, n_sigfig = 3) towny |>   dplyr::select(name, latitude, longitude) |>   dplyr::slice_head(n = 10) |>   gt() |>   fmt_number(decimals = 5, drop_trailing_zeros = TRUE) |>   cols_merge(columns = -name, pattern = \"{1}, {2}\") |>   cols_label(     name ~ \"Municipality\",     latitude = \"Location\"   ) towny |>   dplyr::select(name, latitude, longitude) |>   dplyr::slice_head(n = 10) |>   gt() |>   cols_add(dec_digits = c(1, 2, 2, 5, 5, 2, 3, 2, 3, 3)) |>   fmt_number(decimals = from_column(column = \"dec_digits\")) |>   cols_merge(columns = -name, pattern = \"{1}, {2}\") |>   cols_label(     name ~ \"Municipality\",     latitude = \"Location\"   )"},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format numeric values — fmt_number","text":"3-1","code":""},{"path":"https://gt.rstudio.com/reference/fmt_number.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format numeric values — fmt_number","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as parts-per quantities — fmt_partsper","title":"Format values as parts-per quantities — fmt_partsper","text":"numeric values gt table can format values rendered per mille, ppm, ppb, etc., quantities. following list keywords (associated naming scaling factors) available use within fmt_partsper(): \"per-mille\": Per mille, (1 part 1,000) \"per-myriad\": Per myriad, (1 part 10,000) \"pcm\": Per cent mille (1 part 100,000) \"ppm\": Parts per million, (1 part 1,000,000) \"ppb\": Parts per billion, (1 part 1,000,000,000) \"ppt\": Parts per trillion, (1 part 1,000,000,000,000) \"ppq\": Parts per quadrillion, (1 part 1,000,000,000,000,000) function provides lot formatting control can use following options: custom symbol/units: can override automatic symbol units display choice situation warrants decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol value scaling toggle: choose disable automatic value scaling situation values already scaled coming (just require appropriate symbol unit display) pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as parts-per quantities — fmt_partsper","text":"","code":"fmt_partsper(   data,   columns = everything(),   rows = everything(),   to_units = c(\"per-mille\", \"per-myriad\", \"pcm\", \"ppm\", \"ppb\", \"ppt\", \"ppq\"),   symbol = \"auto\",   decimals = 2,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   scale_values = TRUE,   use_seps = TRUE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   incl_space = \"auto\",   system = c(\"intl\", \"ind\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as parts-per quantities — fmt_partsper","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). to_units Output Quantity singl-kw:[per-mille|per-myriad|pcm|ppm|ppb|ppt|ppq] // default: \"per-mille\" keyword signifies desired output quantity. can following set: \"per-mille\", \"per-myriad\", \"pcm\", \"ppm\", \"ppb\", \"ppt\", \"ppq\". symbol Symbol units use output display scalar<character> // default: \"auto\" symbol/units use quantity. default, set \"auto\" gt choose appropriate symbol based to_units keyword output context. However, can changed supplying string (e.g, using symbol = \"ppbV\" to_units = \"ppb\"). decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". drop_trailing_zeros Drop trailing zeros scalar<logical> // default: FALSE logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark Drop trailing decimal mark scalar<logical> // default: TRUE logical value determines whether decimal marks always appear even decimal digits display formatting (e.g., 23 becomes 23. FALSE). default trailing decimal marks shown. scale_values Scale input values accordingly scalar<logical> // default: TRUE values scaled multiplication according keyword set to_units? default TRUE since expectation normally values proportions. Setting FALSE signifies values already scaled require appropriate symbol/units formatted. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). dec_mark Decimal mark scalar<character> // default: \".\" string used decimal mark. example, using dec_mark = \",\" value 0.152 result formatted value \"0,152\"). argument ignored locale supplied (.e., NULL). force_sign Forcing display positive sign scalar<logical> // default: FALSE positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. incl_space Include space value symbol/units scalar<character>|scalar<logical> // default: \"auto\" option whether include space value symbol/units. default \"auto\" provides spacing dependent mark . can directly controlled using either TRUE FALSE. system Numbering system grouping separators singl-kw:[intl|ind] // default: \"intl\" international numbering system (keyword: \"intl\") widely used grouping separators (.e., sep_mark) always separated three digits. alternative system, Indian numbering system (keyword: \"ind\"), uses grouping separators correspond thousand, lakh, crore, higher quantities. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as parts-per quantities — fmt_partsper","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format values as parts-per quantities — fmt_partsper","text":"fmt_partsper() compatible body cells \"numeric\" \"integer\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format values as parts-per quantities — fmt_partsper","text":"from_column() can used certain arguments fmt_partsper() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): to_units symbol decimals drop_trailing_zeros drop_trailing_dec_mark scale_values use_seps pattern sep_mark dec_mark force_sign incl_space system locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"adapting-output-to-a-specific-locale","dir":"Reference","previous_headings":"","what":"Adapting output to a specific locale","title":"Format values as parts-per quantities — fmt_partsper","text":"formatting function can adapt outputs according provided locale value. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID means separator decimal marks correct given locale. values provided sep_mark dec_mark, overridden locale's preferred values. Note locale value provided override global locale setting performed gt()'s locale argument (settable value received functions locale argument). useful reference locales supported, can call info_locales() view info table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as parts-per quantities — fmt_partsper","text":"Create tibble small numeric values generate gt table. Format column appear scientific notation fmt_scientific() format b column per mille values fmt_partsper().","code":"dplyr::tibble(x = 0:-5, a = 10^(0:-5), b = a) |>   gt(rowname_col = \"x\") |>   fmt_scientific(a, decimals = 0) |>   fmt_partsper(     columns = b,     to_units = \"per-mille\"   )"},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as parts-per quantities — fmt_partsper","text":"3-6","code":""},{"path":"https://gt.rstudio.com/reference/fmt_partsper.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format values as parts-per quantities — fmt_partsper","text":"v0.6.0 (May 24, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":null,"dir":"Reference","previous_headings":"","what":"Format by simply passing data through — fmt_passthrough","title":"Format by simply passing data through — fmt_passthrough","text":"can format values fmt_passthrough(), little : (1) coercing character (fmt_*() functions ), (2) applying decorator text via pattern argument (default apply nothing). formatting function useful want modify input data decorate within pattern.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format by simply passing data through — fmt_passthrough","text":"","code":"fmt_passthrough(   data,   columns = everything(),   rows = everything(),   escape = TRUE,   pattern = \"{x}\" )"},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format by simply passing data through — fmt_passthrough","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). escape Text escaping scalar<logical> // default: TRUE option escape text according final output format table. example, LaTeX table generated LaTeX escaping performed rendering. default set TRUE setting FALSE useful case text crafted specific output format mind. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format by simply passing data through — fmt_passthrough","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format by simply passing data through — fmt_passthrough","text":"from_column() can used certain arguments fmt_passthrough() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): escape pattern Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format by simply passing data through — fmt_passthrough","text":"use exibble dataset create single-column gt table (char column). Now can pass data column 'non-formatter' fmt_passthrough(). function explicit formatting feature common formatting functions: pattern argument. use example, applying simple pattern non-NA values adds \"s\" character.","code":"exibble |>   dplyr::select(char) |>   gt() |>   fmt_passthrough(     rows = !is.na(char),     pattern = \"{x}s\"   )"},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format by simply passing data through — fmt_passthrough","text":"3-28","code":""},{"path":"https://gt.rstudio.com/reference/fmt_passthrough.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format by simply passing data through — fmt_passthrough","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as a percentage — fmt_percent","title":"Format values as a percentage — fmt_percent","text":"numeric values gt table, can perform percentage-based formatting. assumed input numeric values proportional values , case, values automatically multiplied 100 decorating percent sign (case accommodated setting scale_values = FALSE). control percentage formatting, can use following options: percent sign placement: percent sign can placed values space can inserted symbol value. decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol value scaling toggle: choose disable automatic value scaling situation values already scaled coming (just require percent symbol) pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as a percentage — fmt_percent","text":"","code":"fmt_percent(   data,   columns = everything(),   rows = everything(),   decimals = 2,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   scale_values = TRUE,   use_seps = TRUE,   accounting = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   placement = \"right\",   incl_space = FALSE,   system = c(\"intl\", \"ind\"),   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as a percentage — fmt_percent","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". drop_trailing_zeros Drop trailing zeros scalar<logical> // default: FALSE logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark Drop trailing decimal mark scalar<logical> // default: TRUE logical value determines whether decimal marks always appear even decimal digits display formatting (e.g., 23 becomes 23. FALSE). default trailing decimal marks shown. scale_values Multiply input values 100 scalar<logical> // default: TRUE values scaled multiplication 100? default scaling performed since expectation incoming values usually proportional. Setting FALSE signifies values already scaled require percent sign formatted. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting Use accounting style scalar<logical> // default: FALSE option use accounting style values. Normally, negative values shown minus sign using accounting style instead put negative values parentheses. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). dec_mark Decimal mark scalar<character> // default: \".\" string used decimal mark. example, using dec_mark = \",\" value 0.152 result formatted value \"0,152\"). argument ignored locale supplied (.e., NULL). force_sign Forcing display positive sign scalar<logical> // default: FALSE positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. placement Percent sign placement singl-kw:[right|left] // default: \"right\" option governs placement percent sign. can either \"right\" (default) \"left\". incl_space Include space value % sign scalar<logical> // default: FALSE option whether include space value percent sign. default introduce space character. system Numbering system grouping separators singl-kw:[intl|ind] // default: \"intl\" international numbering system (keyword: \"intl\") widely used grouping separators (.e., sep_mark) always separated three digits. alternative system, Indian numbering system (keyword: \"ind\"), uses grouping separators correspond thousand, lakh, crore, higher quantities. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as a percentage — fmt_percent","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format values as a percentage — fmt_percent","text":"fmt_percent() compatible body cells \"numeric\" \"integer\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format values as a percentage — fmt_percent","text":"from_column() can used certain arguments fmt_percent() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): decimals drop_trailing_zeros drop_trailing_dec_mark scale_values use_seps accounting pattern sep_mark dec_mark force_sign incl_space placement system locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"adapting-output-to-a-specific-locale","dir":"Reference","previous_headings":"","what":"Adapting output to a specific locale","title":"Format values as a percentage — fmt_percent","text":"formatting function can adapt outputs according provided locale value. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID means separator decimal marks correct given locale. values provided sep_mark dec_mark, overridden locale's preferred values. Note locale value provided override global locale setting performed gt()'s locale argument (settable value received functions locale argument). useful reference locales supported, can callinfo_locales() view info table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as a percentage — fmt_percent","text":"Use summarized version pizzaplace dataset create gt table. fmt_percent(), can format frac_of_quota column display values percentages (one decimal place).","code":"pizzaplace |>   dplyr::mutate(month = as.numeric(substr(date, 6, 7))) |>   dplyr::count(month, name = \"pizzas_sold\") |>   dplyr::mutate(frac_of_quota = pizzas_sold / 4000) |>   gt(rowname_col = \"month\") |>   fmt_percent(     columns = frac_of_quota,     decimals = 1   )"},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as a percentage — fmt_percent","text":"3-5","code":""},{"path":"https://gt.rstudio.com/reference/fmt_percent.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format values as a percentage — fmt_percent","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as Roman numerals — fmt_roman","title":"Format values as Roman numerals — fmt_roman","text":"numeric values gt table can transform Roman numerals, rounding values necessary.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as Roman numerals — fmt_roman","text":"","code":"fmt_roman(   data,   columns = everything(),   rows = everything(),   case = c(\"upper\", \"lower\"),   pattern = \"{x}\" )"},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as Roman numerals — fmt_roman","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). case Use uppercase lowercase letters singl-kw:[upper|lower] // default: \"upper\" Roman numerals rendered uppercase (\"upper\") lowercase (\"lower\") letters? default, set \"upper\". pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as Roman numerals — fmt_roman","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format values as Roman numerals — fmt_roman","text":"fmt_roman() compatible body cells \"numeric\" \"integer\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format values as Roman numerals — fmt_roman","text":"from_column() can used certain arguments fmt_roman() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): case pattern Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as Roman numerals — fmt_roman","text":"Create tibble small numeric values generate gt table. Format roman column appear Roman numerals fmt_roman().    Formatting values Roman numerals can useful combining output row labels (usually cols_merge()). example take portion illness dataset generate row labels combine (1) row number (lowercase Roman numerals), (2) name test, (3) measurement units test (nicely formatted way fmt_units()):","code":"dplyr::tibble(arabic = c(1, 8, 24, 85), roman = arabic) |>   gt(rowname_col = \"arabic\") |>   fmt_roman(columns = roman) illness |>   dplyr::slice_head(n = 6) |>   gt(rowname_col = \"test\") |>   fmt_units(columns = units) |>   cols_hide(columns = starts_with(\"day\")) |>   sub_missing(missing_text = \"\") |>   cols_merge_range(col_begin = norm_l, col_end = norm_u) |>   cols_add(i = 1:6) |>   fmt_roman(columns = i, case = \"lower\", pattern = \"{x}.\") |>   cols_merge(columns = c(test, i, units), pattern = \"{2} {1} ({3})\") |>   cols_label(norm_l = \"Normal Range\") |>   tab_stubhead(label = \"Test\")"},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as Roman numerals — fmt_roman","text":"3-9","code":""},{"path":"https://gt.rstudio.com/reference/fmt_roman.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format values as Roman numerals — fmt_roman","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values to scientific notation — fmt_scientific","title":"Format values to scientific notation — fmt_scientific","text":"numeric values gt table, can perform formatting targeted values rendered scientific notation, extremely large small numbers can expressed practical fashion. , numbers written form mantissa (m) exponent (n) construction m x 10^n mEn. mantissa component number 1 10. instance, 2.5 x 10^9 can used represent value 2,500,000,000 scientific notation. similar way, 0.00000012 can expressed 1.2 x 10^-7. Due ability describe numbers succinctly ease calculation, scientific notation widely employed scientific technical domains. fine control formatting task, following options: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol scaling: can choose scale targeted values multiplier value pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values to scientific notation — fmt_scientific","text":"","code":"fmt_scientific(   data,   columns = everything(),   rows = everything(),   decimals = 2,   n_sigfig = NULL,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   scale_by = 1,   exp_style = \"x10n\",   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign_m = FALSE,   force_sign_n = FALSE,   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values to scientific notation — fmt_scientific","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". n_sigfig Number significant figures scalar<numeric|integer>(val>=1) // default: NULL (optional) option format numbers n significant figures. default, NULL thus number values formatted according number decimal places set via decimals. opting format according rules significant figures, n_sigfig must number greater equal 1. values passed decimals drop_trailing_zeros arguments ignored. drop_trailing_zeros Drop trailing zeros scalar<logical> // default: FALSE logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark Drop trailing decimal mark scalar<logical> // default: TRUE logical value determines whether decimal marks always appear even decimal digits display formatting (e.g., 23 becomes 23. FALSE). default trailing decimal marks shown. scale_by Scale values fixed multiplier scalar<numeric|integer> // default: 1 numeric values multiplied scale_by value undergoing formatting. Since default value 1, values changed unless different multiplier value supplied. exp_style Style declaration exponent formatting scalar<character> // default: \"x10n\" Style formatting use scientific notation formatting. default \"x10n\" options include using single letter (e.g., \"e\", \"E\", etc.), letter followed \"1\" signal minimum digit width one, \"low-ten\" using stylized \"10\" marker. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). dec_mark Decimal mark scalar<character> // default: \".\" string used decimal mark. example, using dec_mark = \",\" value 0.152 result formatted value \"0,152\"). argument ignored locale supplied (.e., NULL). force_sign_m, force_sign_n Forcing display positive sign scalar<logical> // default: FALSE plus sign shown positive values mantissa (first component, force_sign_m) exponent (force_sign_n)? effectively show sign values except zero either numeric components notation. , use TRUE either one options. default FALSE, negative numbers display sign. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values to scientific notation — fmt_scientific","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format values to scientific notation — fmt_scientific","text":"fmt_scientific() compatible body cells \"numeric\" \"integer\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format values to scientific notation — fmt_scientific","text":"from_column() can used certain arguments fmt_scientific() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): decimals drop_trailing_zeros drop_trailing_dec_mark scale_by exp_style pattern sep_mark dec_mark force_sign_m force_sign_n locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"adapting-output-to-a-specific-locale","dir":"Reference","previous_headings":"","what":"Adapting output to a specific locale","title":"Format values to scientific notation — fmt_scientific","text":"formatting function can adapt outputs according provided locale value. Examples include \"en\" English (United States) \"fr\" French (France). use valid locale ID means separator decimal marks correct given locale. values provided sep_mark dec_mark, overridden locale's preferred values. Note locale value provided override global locale setting performed gt()'s locale argument (settable value received functions locale argument). useful reference locales supported, can call info_locales() view info table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values to scientific notation — fmt_scientific","text":"define data frame contains two columns values (one small one large). creating simple gt table small_large_tbl call fmt_scientific() columns.    default method styling notation uses 'm x 10^n' construction can changed 'mEn' style via exp_style argument. can supply single letter optionally affix \"1\" indicate zero-padding n value. Two calls fmt_scientific() used show different options styling scientific notation.    Taking portion reactions dataset, can create gt table contains reaction rate constants expressed scientific notation. numeric values filtered table require type formatting fmt_scientific() can called without requiring specification column names columns argument. default, number decimal places fixed 2, fine table.    constants table contains plethora data fundamental physical constants values range small large, warranting use figures scientific notation. values differ degree measurement precision, dataset columns (sf_value sf_uncert) include number significant figures measurement value associated uncertainty. can use n_sigfig argument fmt_scientific() conjunction from_column() helper format value uncertainty proper number significant digits.","code":"small_large_tbl <-   dplyr::tibble(     small = 10^(-12:-1),     large = 10^(1:12)   )  small_large_tbl |>   gt() |>   fmt_scientific() small_large_tbl |>   gt() |>   fmt_scientific(     columns = small,     exp_style = \"E\"   ) |>   fmt_scientific(     columns = large,     exp_style = \"e1\",     force_sign_n = TRUE   ) reactions |>   dplyr::filter(cmpd_type == \"mercaptan\") |>   dplyr::select(cmpd_name, cmpd_formula, OH_k298, Cl_k298, NO3_k298) |>   gt(rowname_col = \"cmpd_name\") |>   tab_header(title = \"Gas-phase reactions of selected mercaptan compounds\") |>   tab_spanner(     label = md(\"Reaction Rate Constant (298 K),<br>{{cm^3 molecules^-1 s^-1}}\"),     columns = ends_with(\"k298\")   ) |>   fmt_chem(columns = cmpd_formula) |>   fmt_scientific() |>   sub_missing() |>   cols_label(     cmpd_formula = \"\",     OH_k298 = \"OH\",     NO3_k298 = \"{{%NO3%}}\",     Cl_k298 = \"Cl\"   ) |>   opt_stylize() |>   opt_horizontal_padding(scale = 3) |>   opt_table_font(font = google_font(\"IBM Plex Sans\")) |>   tab_options(stub.font.weight = \"500\") constants |>   dplyr::filter(grepl(\"Planck\", name)) |>   gt() |>   fmt_scientific(     columns = value,     n_sigfig = from_column(column = \"sf_value\")   ) |>   fmt_scientific(     columns = uncert,     n_sigfig = from_column(column = \"sf_uncert\")   ) |>   cols_hide(columns = starts_with(\"sf\")) |>   fmt_units(columns = units) |>   sub_missing(missing_text = \"\")"},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values to scientific notation — fmt_scientific","text":"3-3","code":""},{"path":"https://gt.rstudio.com/reference/fmt_scientific.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format values to scientific notation — fmt_scientific","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_spelled_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values to spelled-out numbers — fmt_spelled_num","title":"Format values to spelled-out numbers — fmt_spelled_num","text":"numeric values gt table can transform numbers spelled fmt_spelled_num(). values 0 100 can spelled , example, value 23 formatted \"twenty-three\". Providing locale ID result number spelled locale's language rules. example, Swedish locale (\"sv\") provided, value 23 yield \"tjugotre\". addition , can optionally use pattern argument decoration formatted values.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_spelled_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values to spelled-out numbers — fmt_spelled_num","text":"","code":"fmt_spelled_num(   data,   columns = everything(),   rows = everything(),   pattern = \"{x}\",   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_spelled_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values to spelled-out numbers — fmt_spelled_num","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_spelled_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values to spelled-out numbers — fmt_spelled_num","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_spelled_num.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format values to spelled-out numbers — fmt_spelled_num","text":"fmt_spelled_num() compatible body cells \"numeric\" \"integer\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_spelled_num.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format values to spelled-out numbers — fmt_spelled_num","text":"from_column() can used certain arguments fmt_spelled_num() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): pattern locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_spelled_num.html","id":"supported-locales","dir":"Reference","previous_headings":"","what":"Supported locales","title":"Format values to spelled-out numbers — fmt_spelled_num","text":"following 80 locales supported locale argument fmt_spelled_num(): \"af\" (Afrikaans), \"ak\" (Akan), \"\" (Amharic), \"ar\" (Arabic), \"az\" (Azerbaijani), \"\" (Belarusian), \"bg\" (Bulgarian), \"bs\" (Bosnian), \"ca\" (Catalan), \"ccp\" (Chakma), \"chr\" (Cherokee), \"cs\" (Czech), \"cy\" (Welsh), \"da\" (Danish), \"de\" (German), \"de-CH\" (German (Switzerland)), \"ee\" (Ewe), \"el\" (Greek), \"en\" (English), \"eo\" (Esperanto), \"es\" (Spanish), \"et\" (Estonian), \"fa\" (Persian), \"ff\" (Fulah), \"fi\" (Finnish), \"fil\" (Filipino), \"fo\" (Faroese), \"fr\" (French), \"fr-\" (French (Belgium)), \"fr-CH\" (French (Switzerland)), \"ga\" (Irish), \"\" (Hebrew), \"hi\" (Hindi), \"hr\" (Croatian), \"hu\" (Hungarian), \"hy\" (Armenian), \"id\" (Indonesian), \"\" (Icelandic), \"\" (Italian), \"ja\" (Japanese), \"ka\" (Georgian), \"kk\" (Kazakh), \"kl\" (Kalaallisut), \"km\" (Khmer), \"ko\" (Korean), \"ky\" (Kyrgyz), \"lb\" (Luxembourgish), \"lo\" (Lao), \"lrc\" (Northern Luri), \"lt\" (Lithuanian), \"lv\" (Latvian), \"mk\" (Macedonian), \"ms\" (Malay), \"mt\" (Maltese), \"\" (Burmese), \"ne\" (Nepali), \"nl\" (Dutch), \"nn\" (Norwegian Nynorsk), \"\" (Norwegian), \"pl\" (Polish), \"pt\" (Portuguese), \"qu\" (Quechua), \"ro\" (Romanian), \"ru\" (Russian), \"se\" (Northern Sami), \"sk\" (Slovak), \"sl\" (Slovenian), \"sq\" (Albanian), \"sr\" (Serbian), \"sr-Latn\" (Serbian (Latin)), \"su\" (Sundanese), \"sv\" (Swedish), \"sw\" (Swahili), \"ta\" (Tamil), \"th\" (Thai), \"tr\" (Turkish), \"uk\" (Ukrainian), \"vi\" (Vietnamese), \"yue\" (Cantonese), \"zh\" (Chinese).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_spelled_num.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values to spelled-out numbers — fmt_spelled_num","text":"use summarized version gtcars dataset create gt table. fmt_spelled_num() used transform integer values spelled-numbering (n column). formatted column numbers--words given cell background colors via data_color() (underlying numerical values always available).    considerable amount dplyr tidyr work done pizzaplace dataset, can create new gt table. fmt_spelled_num() used transform integer values rank column. special pattern puts word 'Number' front every spelled-number.    make table compares numbers 1 10 spelled across small selection languages. use fmt_spelled_num() column, ensuring locale value matches column name.","code":"gtcars |>   dplyr::count(mfr, ctry_origin) |>   dplyr::arrange(ctry_origin) |>   gt(rowname_col = \"mfr\", groupname_col = \"ctry_origin\") |>   cols_label(n = \"No. of Entries\") |>   fmt_spelled_num() |>   tab_stub_indent(rows = everything(), indent = 2) |>   data_color(     columns = n,     method = \"numeric\",     palette = \"viridis\",     alpha = 0.8   ) |>   opt_all_caps() |>   opt_vertical_padding(scale = 0.5) |>   cols_align(align = \"center\", columns = n) pizzaplace |>   dplyr::mutate(month = lubridate::month(date, label = TRUE)) |>   dplyr::filter(month %in% month.abb[1:6]) |>   dplyr::group_by(name, month) |>   dplyr::summarize(sum = sum(price), .groups = \"drop\") |>   dplyr::arrange(month, desc(sum)) |>   dplyr::group_by(month) |>   dplyr::slice_head(n = 5) |>   dplyr::mutate(rank = dplyr::row_number()) |>   dplyr::ungroup() |>   dplyr::select(-sum) |>   tidyr::pivot_wider(names_from = month, values_from = c(name)) |>   gt() |>   fmt_spelled_num(columns = rank, pattern = \"Number {x}\") |>   opt_all_caps() |>   cols_align(columns = -rank, align = \"center\") |>   cols_width(     rank ~ px(120),     everything() ~ px(100)   ) |>   opt_table_font(stack = \"rounded-sans\") |>   tab_options(table.font.size = px(14)) dplyr::tibble(   num = 1:10,   en = num,   fr = num,   de = num,   es = num,   pl = num,   bg = num,   ko = num,   zh = num ) |>   gt(rowname_col = \"num\") |>   fmt_spelled_num(columns = en, locale = \"en\") |>   fmt_spelled_num(columns = fr, locale = \"fr\") |>   fmt_spelled_num(columns = de, locale = \"de\") |>   fmt_spelled_num(columns = es, locale = \"es\") |>   fmt_spelled_num(columns = pl, locale = \"pl\") |>   fmt_spelled_num(columns = bg, locale = \"bg\") |>   fmt_spelled_num(columns = ko, locale = \"ko\") |>   fmt_spelled_num(columns = zh, locale = \"zh\") |>   cols_label_with(fn = function(x) md(paste0(\"`\", x, \"`\"))) |>   tab_spanner(     label = \"Numbers in the specified locale\",     columns = everything()   ) |>   cols_align(align = \"left\", columns = everything()) |>   cols_width(     c(en, fr, de, es, pl, bg) ~ px(100),     c(ko, zh) ~ px(50)   ) |>   opt_horizontal_padding(scale = 2) |>   opt_vertical_padding(scale = 0.5)"},{"path":"https://gt.rstudio.com/reference/fmt_spelled_num.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values to spelled-out numbers — fmt_spelled_num","text":"3-11","code":""},{"path":"https://gt.rstudio.com/reference/fmt_spelled_num.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format values to spelled-out numbers — fmt_spelled_num","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_tf.html","id":null,"dir":"Reference","previous_headings":"","what":"Format TRUE and FALSE values — fmt_tf","title":"Format TRUE and FALSE values — fmt_tf","text":"can times logical values useful gt table. might want express 'yes' '', 'true' 'false', , perhaps use pairings complementary symbols make sense table. fmt_tf() function set tf_style presets can used quickly map TRUE/FALSE values strings (automatically translated according given locale value), , symbols like /left/right arrows open/closed shapes. presets nice, can provide mappings true_val false_val arguments. provide text (perhaps Unicode symbol?) even fontawesome icon using fontawesome::fa(\"<icon name>\"). function automatically handle alignment auto_align = TRUE try give best look depending options chosen. extra customization, can also apply color individual TRUE, FALSE, NA mappings. Just supply vector colors (length 3) colors argument.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_tf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format TRUE and FALSE values — fmt_tf","text":"","code":"fmt_tf(   data,   columns = everything(),   rows = everything(),   tf_style = \"true-false\",   pattern = \"{x}\",   true_val = NULL,   false_val = NULL,   na_val = NULL,   colors = NULL,   auto_align = TRUE,   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_tf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format TRUE and FALSE values — fmt_tf","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). tf_style Predefined style TRUE/FALSE formatting scalar<character>|scalar<numeric|integer>(1<=val<=10) // default: \"true-false\" TRUE/FALSE mapping style use. default short name \"true-false\" corresponds words 'true' 'false'. Two tf_style values produce words: \"yes-\" \"-\". three options tf_style locale-aware locale option, , \"yes\" value instead \"ja\" locale = \"de\". Options 4 10 involve pairs symbols (e.g., \"check-mark\" displays check mark TRUE X symbol FALSE). pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. true_val Text use TRUE values scalar<character> // default: NULL (optional) choice tf_style typically supply true_val false_val text, override supply text TRUE values.  need used conjunction false_val. false_val Text use FALSE values scalar<character> // default: NULL (optional) choice tf_style typically supply true_val false_val text, override supply text FALSE values. need used conjunction true_val. na_val Text use NA values scalar<character> // default: NULL (optional) None tf_style presets replace missing values encountered targeted cells. always option use sub_missing() NA replacement, opportunity na_val option. useful also means add color na_val text symbol requires replacement value NAs specified . colors Colors use resulting strings symbols vector<character> // default: NULL (optional) Providing vector color values colors progressively add color formatted result depending number colors provided. single color, formatted values color. Giving two colors results TRUE values first color, FALSE values receiving second. three color option, final color given NA values replaced na_val. auto_align Automatic alignment formatted column scalar<logical> // default: TRUE input values may resulted alignment suitable formatting occurred. auto_align = TRUE, formatted values inspected may result favorable change alignment. Typically, symbols center aligned whereas words receive left alignment (words LTR languages). locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_tf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format TRUE and FALSE values — fmt_tf","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_tf.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format TRUE and FALSE values — fmt_tf","text":"fmt_tf() compatible body cells \"logical\" (preferred) \"numeric\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format . special caveat attempting format numerical values: values must either exactly 1 (analogue TRUE) exactly 0 (analogue FALSE). numerical values disregarded left . restrictions, recommended logical values undergo formatting.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_tf.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format TRUE and FALSE values — fmt_tf","text":"from_column() can used certain arguments fmt_tf() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): tf_style pattern true_val false_val na_val locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_tf.html","id":"formatting-with-the-tf-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the tf_style argument","title":"Format TRUE and FALSE values — fmt_tf","text":"can supply preset TRUE/FALSE style tf_style argument handle formatting logical values. several styles first three can handle localization supported locale (.e., pairs words style translated language locale) value. following table provides listing valid tf_style values description output values. output styles 4 10 described terms Unicode character names used TRUE FALSE values.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_tf.html","id":"adapting-output-to-a-specific-locale","dir":"Reference","previous_headings":"","what":"Adapting output to a specific locale","title":"Format TRUE and FALSE values — fmt_tf","text":"formatting function can adapt outputs according provided locale value. Examples include \"en\" English (United States) \"fr\" French (France). Note locale value provided override global locale setting performed gt()'s locale argument (settable value received functions locale argument). useful reference locales supported, can call info_locales() view info table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_tf.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format TRUE and FALSE values — fmt_tf","text":"use subset sp500 dataset create small gt table containing opening closing price data week 2013. can add logical column (dir) cols_add(); expression used determines whether close value greater open value. new column inserted open close. , use fmt_tf() generate arrows dir column. elect use green upward arrows red downward arrows (colors option). little numeric formatting changes column labels, table becomes presentable.    reactions dataset contains chemical kinetic information wide variety atmospherically-relevant compounds. might interesting get summary (small subset compounds) rate constants available selected compounds. first start selecting relevant rows columns. generate logical columns reaction types (.e., value NA measurement, FALSE). gt table created, can use fmt_tf() provide open filled circles indicate whether particular reaction measured presented literature.    census-based population values towny dataset quite small towns within . look ten smallest towns (according 2021 figures) work whether populations increased declined since 1996. Also, determine towns even website. data preparation, data made gt table fmt_tf() can used website pop_dir columns (TRUE/FALSE values). fmt_tf() calls either produce \"yes\"/\"\" \"\"/\"\" strings (set via tf_style option).    formatting words instead symbols (hyphenated tf_style keywords), words can translated different languages providing locale value. next example, manually creating tibble locale codes associated languages. yes columns receive TRUE whereas FALSE. two calls fmt_tf() pairings, get columns' namesake words. words translated, locale argument pointed toward values code column using from_column().","code":"sp500 |>   dplyr::filter(date >= \"2013-01-07\" & date <= \"2013-01-12\") |>   dplyr::arrange(date) |>   dplyr::select(-c(adj_close, volume, high, low)) |>   gt(rowname_col = \"date\") |>   cols_add(dir = close > open, .after = open) |>   fmt_tf(     columns = dir,     tf_style = \"arrows\",     colors = c(\"green\", \"red\")   ) |>   fmt_currency(columns = c(open, close)) |>   cols_label(     open = \"Opening\",     close = \"Closing\",     dir = \"\"   ) reactions |>   dplyr::filter(cmpd_type %in% c(\"carboxylic acid\", \"alkyne\", \"allene\")) |>   dplyr::select(cmpd_name, cmpd_type, ends_with(\"k298\")) |>   dplyr::mutate(across(ends_with(\"k298\"), is.na)) |>   gt(rowname_col = \"cmpd_name\", groupname_col = \"cmpd_type\") |>   tab_spanner(     label = \"Has a measured rate constant\",     columns = ends_with(\"k298\")   ) |>   tab_stub_indent(     rows = everything(),     indent = 2   ) |>   fmt_tf(     columns = ends_with(\"k298\"),     tf_style = \"circles\"   ) |>   cols_label(     OH_k298 = \"OH\",     O3_k298 = \"Ozone\",     NO3_k298 = \"Nitrate\",     Cl_k298 = \"Chlorine\"   ) |>   cols_width(     stub() ~ px(200),     ends_with(\"k298\") ~ px(80)   ) |>   opt_vertical_padding(scale = 0.35) towny |>   dplyr::arrange(population_2021) |>   dplyr::mutate(website = !is.na(website))  |>   dplyr::mutate(pop_dir = population_2021 > population_1996) |>   dplyr::select(name, website, population_1996, population_2021, pop_dir) |>   dplyr::slice_head(n = 10) |>   gt(rowname_col = \"name\") |>   tab_spanner(     label = \"Population\",     columns = starts_with(\"pop\")   ) |>   tab_stubhead(label = \"Town\") |>   fmt_tf(     columns = website,     tf_style = \"yes-no\",     auto_align = FALSE   ) |>   fmt_tf(     columns = pop_dir,     tf_style = \"up-down\",     pattern = \"It's {x}.\"   ) |>   cols_label_with(     columns = starts_with(\"population\"),     fn = function(x) sub(\"population_\", \"\", x)   ) |>   cols_label(     website = md(\"Has a  \\n website?\"),     pop_dir = \"Pop. direction?\"   ) |>   opt_horizontal_padding(scale = 2) dplyr::tibble(   code = c(\"de\", \"fr\", \"is\", \"tr\", \"ka\", \"lt\", \"ca\", \"bg\", \"lv\"),   lang = c(     \"German\", \"French\", \"Icelandic\", \"Turkish\", \"Georgian\",     \"Lithuanian\", \"Catalan\", \"Bulgarian\", \"Latvian\"   ),   yes = TRUE,   no = FALSE,   up = TRUE,   down = FALSE ) |>   gt(rowname_col = \"lang\") |>   tab_header(title = \"Common words in a few languages\") |>   fmt_tf(     columns = c(yes, no),     tf_style = \"yes-no\",     locale = from_column(\"code\")   ) |>   fmt_tf(     columns = c(up, down),     tf_style = \"up-down\",     locale = from_column(\"code\")   ) |>   cols_merge(     columns = c(lang, code),     pattern = \"{1} ({2})\"   ) |>   cols_width(     stub() ~ px(150),     everything() ~ px(80)   )"},{"path":"https://gt.rstudio.com/reference/fmt_tf.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format TRUE and FALSE values — fmt_tf","text":"3-18","code":""},{"path":"https://gt.rstudio.com/reference/fmt_tf.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format TRUE and FALSE values — fmt_tf","text":"v0.11.0 (July 9, 2024)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as times — fmt_time","title":"Format values as times — fmt_time","text":"Format input values time values using one 25 preset time styles. Input can form POSIXt (.e., datetimes), character (must ISO 8601 forms HH:MM:SS YYYY-MM-DD HH:MM:SS), Date (always results formatting 00:00:00).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as times — fmt_time","text":"","code":"fmt_time(   data,   columns = everything(),   rows = everything(),   time_style = \"iso\",   pattern = \"{x}\",   locale = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as times — fmt_time","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). time_style Predefined style times scalar<character>|scalar<numeric|integer>(1<=val<=25) // default: \"iso\" time style use. default short name \"iso\" corresponds times formatted within ISO 8601 datetime values. 25 time styles total short names can viewed using info_time_style(). pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. locale ID can also set initial gt() function call (used automatically function locale argument) locale value provided override global locale.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as times — fmt_time","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format values as times — fmt_time","text":"fmt_time() compatible body cells \"Date\", \"POSIXt\" \"character\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format values as times — fmt_time","text":"from_column() can used certain arguments fmt_time() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): time_style pattern locale Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"formatting-with-the-time-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the time_style argument","title":"Format values as times — fmt_time","text":"need supply preset time style time_style argument. many time styles can handle localization supported locale. Many time styles termed flexible time formats means output adapt locale provided. feature makes flexible time formats better option locales \"en\" (default locale). following table provides listing time styles output values (corresponding input time 14:35:00). noted represent 12- 24-hour time. can call info_time_style() console view similar table time styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"adapting-output-to-a-specific-locale","dir":"Reference","previous_headings":"","what":"Adapting output to a specific locale","title":"Format values as times — fmt_time","text":"formatting function can adapt outputs according provided locale value. Examples include \"en\" English (United States) \"fr\" French (France). Note locale value provided override global locale setting performed gt()'s locale argument (settable value received functions locale argument). useful reference locales supported, can use info_locales() view info table.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as times — fmt_time","text":"use exibble dataset create simple, two-column gt table (keeping date time columns). Format time column fmt_time() display times formatted \"h_m_s_p\" time style.    using exibble dataset, format time column mixed time formats, times 16:00 different others expressions used rows argument. involve two calls fmt_time() different statements provided rows. first call (times 16:00) time style \"h_m_s_p\" used; second call, \"h_m_p\" named time style supplied time_style.    Use exibble dataset create single-column gt table (time column). Format time values using \"EBhms\" time style (one 'flexible' styles). Also, set locale \"sv\" get times Swedish.","code":"exibble |>   dplyr::select(date, time) |>   gt() |>   fmt_time(     columns = time,     time_style = \"h_m_s_p\"   ) exibble |>   dplyr::select(date, time) |>   gt() |>   fmt_time(     columns = time,     rows = time > \"16:00\",     time_style = \"h_m_s_p\"   ) |>   fmt_time(     columns = time,     rows = time <= \"16:00\",     time_style = \"h_m_p\"   ) exibble |>   dplyr::select(time) |>   gt() |>   fmt_time(     columns = time,     time_style = \"EBhms\",     locale = \"sv\"   )"},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format values as times — fmt_time","text":"3-14","code":""},{"path":"https://gt.rstudio.com/reference/fmt_time.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format values as times — fmt_time","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Format measurement units — fmt_units","title":"Format measurement units — fmt_units","text":"fmt_units() lets better format measurement units table body. must conform gt's specialized units notation (e.g., \"J Hz^-1 mol^-1\" can used generate units molar Planck constant) best conversion. notation provides several conveniences defining units, long values formatted conform syntax, obtain nicely-formatted units matter table output format might (.e., HTML, LaTeX, RTF, etc.). Details pertaining units notation can found section entitled use gt's units notation.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format measurement units — fmt_units","text":"","code":"fmt_units(data, columns = everything(), rows = everything())"},{"path":"https://gt.rstudio.com/reference/fmt_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format measurement units — fmt_units","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50).","code":""},{"path":"https://gt.rstudio.com/reference/fmt_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format measurement units — fmt_units","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_units.html","id":"how-to-use-gt-s-units-notation","dir":"Reference","previous_headings":"","what":"How to use gt's units notation","title":"Format measurement units — fmt_units","text":"units notation involves shorthand writing units feels familiar fine-tuned task hand. unit treated separate entity (parentheses symbols included) addition subscript text exponents flexible relatively easy formulate. best shown examples: \"m/s\" \"m / s\" render \"m/s\" \"m s^-1\" appear \"-1\" exponent intact \"m /s\" gives result, \"/<unit>\" equivalent \"<unit>^-1\" \"E_h\" render \"E\" \"h\" subscript \"t_i^2.5\" provides t \"\" subscript \"2.5\" exponent \"m[_0^2]\" use overstriking set scripts vertically \"g/L %C6H12O6%\" uses chemical formula (enclosed pair \"%\" characters) unit partial, formula render correctly subscripted numbers Common units difficult write using ASCII text may implicitly converted correct characters (e.g., \"u\" \"ug\", \"um\", \"uL\", \"umol\" converted Greek mu symbol; \"degC\" \"degF\" render degree sign temperature unit) can transform shorthand symbol/unit names enclosed \":\" (e.g., \":angstrom:\", \":ohm:\", etc.) proper symbols Greek letters can added enclosing letter name \":\"; can use lowercase letters (e.g., \":beta:\", \":sigma:\", etc.) uppercase letters (e.g., \":Alpha:\", \":Zeta:\", etc.) components unit (unit name, subscript, exponent) can fully partially italicized/emboldened surrounding text \"*\" \"**\"","code":""},{"path":"https://gt.rstudio.com/reference/fmt_units.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format measurement units — fmt_units","text":"use illness dataset create new gt table. units column contains character values gt's specialized units notation (e.g., \"x10^9 / L\") fmt_units() function used better format units.    constants dataset contains values hundreds fundamental physical constants. take subset values molar basis generate gt table . Like illness dataset, one units column , , fmt_units() function used format units. , preference typesetting measurement units positive negative exponents (e.g., \"<unit_1> / <unit_2>\" rather \"<unit_1> <unit_2>^-1\").","code":"illness |>   gt() |>   fmt_units(columns = units) |>   sub_missing(columns = -starts_with(\"norm\")) |>   sub_missing(columns = c(starts_with(\"norm\"), units), missing_text = \"\") |>   sub_large_vals(rows = test == \"MYO\", threshold = 1200) |>   fmt_number(     decimals = 2,     drop_trailing_zeros = TRUE   ) |>   tab_header(title = \"Laboratory Findings for the YF Patient\") |>   tab_spanner(label = \"Day\", columns = starts_with(\"day\")) |>   cols_label_with(fn = ~ gsub(\"day_\", \"\", .)) |>   cols_merge_range(col_begin = norm_l, col_end = norm_u) |>   cols_label(     starts_with(\"norm\") ~ \"Normal Range\",     test ~ \"Test\",     units ~ \"Units\"   ) |>   cols_width(     starts_with(\"day\") ~ px(80),     everything() ~ px(120)   ) |>   tab_style(     style = cell_text(align = \"center\"),     locations = cells_column_labels(columns = starts_with(\"day\"))   ) |>   tab_style(     style = cell_fill(color = \"aliceblue\"),     locations = cells_body(columns = c(test, units))   ) |>   opt_vertical_padding(scale = 0.4) |>   opt_align_table_header(align = \"left\") |>   tab_options(heading.padding = px(10)) constants |>   dplyr::filter(grepl(\"molar\", name)) |>   gt() |>   cols_hide(columns = c(uncert, starts_with(\"sf\"))) |>   fmt_units(columns = units) |>   fmt_scientific(columns = value, decimals = 3) |>   tab_header(title = \"Physical Constants Having a Molar Basis\") |>   tab_options(column_labels.hidden = TRUE)"},{"path":"https://gt.rstudio.com/reference/fmt_units.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format measurement units — fmt_units","text":"3-19","code":""},{"path":"https://gt.rstudio.com/reference/fmt_units.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format measurement units — fmt_units","text":"v0.10.0 (October 7, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmt_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Format URLs to generate links — fmt_url","title":"Format URLs to generate links — fmt_url","text":"cells contain URLs, fmt_url() can used make navigable links. expressly used columns contain URL text (.e., URLs part larger block text). column data, options links styled. can conventional style (underlines text coloring sets apart text), , can appear button-like (surrounding box can filled color choosing). URLs data cells detected two ways. first using simple Markdown notation URLs form: [label](URL). second assumes text URL. latter case URL also used label option use label argument modify text.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format URLs to generate links — fmt_url","text":"","code":"fmt_url(   data,   columns = everything(),   rows = everything(),   label = NULL,   as_button = FALSE,   color = \"auto\",   show_underline = \"auto\",   button_fill = \"auto\",   button_width = \"auto\",   button_outline = \"auto\",   target = NULL,   rel = NULL,   referrerpolicy = NULL,   hreflang = NULL )"},{"path":"https://gt.rstudio.com/reference/fmt_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format URLs to generate links — fmt_url","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range() everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows undergo formatting. default everything() results rows columns formatted. Alternatively, can supply vector row captions within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). label Link label scalar<character> // default: NULL (optional) visible 'label' use link. NULL (default) URL serve label. two non-NULL options: (1) piece static text can used label providing string, (2) function can provided fashion label every URL. as_button Style link button scalar<logical> // default: FALSE option style link button. default, FALSE. option chosen button_fill argument becomes usable. color Link color scalar<character> // default: \"auto\" color used resulting link underline. \"auto\" default; allows gt choose appropriate color based various factors (background button_fill as_button TRUE). show_underline Show link underline scalar<character>|scalar<logical> // default: \"auto\" link decorated underline? default \"auto\" means gt choose TRUE as_button = FALSE FALSE case. link underline color set color option. button_fill, button_width, button_outline Button options scalar<character> // default: \"auto\" Options styling link--button (applies as_button = TRUE). options default set \"auto\", allowing gt choose appropriate fill, width, outline values. target, rel, referrerpolicy, hreflang Anchor element attributes scalar<character> // default: NULL Additional anchor element attributes. descriptions attribute allowed values, refer MDN Web Docs reference anchor HTML element.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format URLs to generate links — fmt_url","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_url.html","id":"compatibility-of-formatting-function-with-data-values","dir":"Reference","previous_headings":"","what":"Compatibility of formatting function with data values","title":"Format URLs to generate links — fmt_url","text":"fmt_url() compatible body cells \"character\" \"factor\" types. types body cells ignored formatting. say cells incompatible data types may targeted, attempt format .","code":""},{"path":"https://gt.rstudio.com/reference/fmt_url.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Format URLs to generate links — fmt_url","text":"from_column() can used certain arguments fmt_url() obtain varying parameter values specified column within table. means row formatted little bit differently. arguments provide support from_column(): label as_button color show_underline button_fill button_width button_outline Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Finally, limitation many arguments from_column() helper applied long arguments belong closed set.","code":""},{"path":"https://gt.rstudio.com/reference/fmt_url.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format URLs to generate links — fmt_url","text":"Using portion towny dataset, create gt table. can use fmt_url() website column generate navigable links websites. default links underlined color chosen (dark cyan).    try something else. can set static text label link label argument (use word \"site\" ). link underline removable show_underline = FALSE. change, seems sensible merge link \"name\" column enclose link text parentheses (cols_merge() handles ).    fmt_url() allows styling links 'buttons'. easy setting as_button = TRUE. unlocks ability  set button_fill color. color can automatically selected gt (default) using \"steelblue\". label argument also accepts function! can choose adapt label text URLs eliminating leading \"https://\" \"www.\" parts.    perhaps inevitable come across missing values column URLs. fmt_url() preserve input NA values, allowing handle sub_missing(). example .    Links can presented icons. take look example type presentation table based films dataset. imdb_url column contains URL information fmt_url() call, can use fontawesome::fa() specify label. case elect use \"link\" icon can make sizing adjustments icon ensure layout looks optimal. also use cols_merge() combine film's title, original title (present), link icon.","code":"towny |>   dplyr::filter(csd_type == \"city\") |>   dplyr::arrange(desc(population_2021)) |>   dplyr::select(name, website, population_2021) |>   dplyr::slice_head(n = 10) |>   gt() |>   tab_header(     title = md(\"The 10 Largest Municipalities in `towny`\"),     subtitle = \"Population values taken from the 2021 census.\"   ) |>   fmt_integer() |>   fmt_url(columns = website) |>   cols_label(     name = \"Name\",     website = \"Site\",     population_2021 = \"Population\"   ) towny |>   dplyr::filter(csd_type == \"city\") |>   dplyr::arrange(desc(population_2021)) |>   dplyr::select(name, website, population_2021) |>   dplyr::slice_head(n = 10) |>   gt() |>   tab_header(     title = md(\"The 10 Largest Municipalities in `towny`\"),     subtitle = \"Population values taken from the 2021 census.\"   ) |>   fmt_integer() |>   fmt_url(     columns = website,     label = \"site\",     show_underline = FALSE   ) |>   cols_merge(     columns = c(name, website),     pattern = \"{1} ({2})\"   ) |>   cols_label(     name = \"Name\",     population_2021 = \"Population\"   ) towny |>   dplyr::filter(csd_type == \"city\") |>   dplyr::arrange(desc(population_2021)) |>   dplyr::select(name, website, population_2021) |>   dplyr::slice_head(n = 10) |>   dplyr::mutate(ranking = dplyr::row_number()) |>   gt(rowname_col = \"ranking\") |>   tab_header(     title = md(\"The 10 Largest Municipalities in `towny`\"),     subtitle = \"Population values taken from the 2021 census.\"   ) |>   fmt_integer() |>   fmt_url(     columns = website,     label = function(x) gsub(\"https://|www.\", \"\", x),     as_button = TRUE,     button_fill = \"steelblue\",     button_width = px(150)   ) |>   cols_move_to_end(columns = website) |>   cols_align(align = \"center\", columns = website) |>   cols_width(     ranking ~ px(40),     website ~ px(200)   ) |>   tab_options(column_labels.hidden = TRUE) |>   tab_style(     style = cell_text(weight = \"bold\"),     locations = cells_stub()   ) |>   opt_vertical_padding(scale = 0.75) towny |>   dplyr::arrange(population_2021) |>   dplyr::select(name, website, population_2021) |>   dplyr::slice_head(n = 10) |>   gt() |>   tab_header(     title = md(\"The 10 Smallest Municipalities in `towny`\"),     subtitle = \"Population values taken from the 2021 census.\"   ) |>   fmt_integer() |>   fmt_url(columns = website) |>   cols_label(     name = \"Name\",     website = \"Site\",     population_2021 = \"Population\"   ) |>   sub_missing() films |>   dplyr::filter(year == 2021) |>   dplyr::select(     contains(\"title\"), run_time, director, imdb_url   ) |>   gt() |>   tab_header(title = \"Feature Films in Competition at the 2021 Festival\") |>   fmt_url(     columns = imdb_url,     label = fontawesome::fa(       name = \"link\",       height = \"0.75em\",       vertical_align = \"0em\"      ),     color = \"gray65\"   ) |>   cols_merge(     columns = c(title, original_title, imdb_url),     pattern = \"{1}<< ({2})>> {3}\"   ) |>   cols_label(     title = \"Film\",     run_time = \"Length\",     director = \"Director(s)\",   ) |>   tab_options(heading.title.font.size = px(26)) |>   opt_vertical_padding(scale = 0.4) |>   opt_horizontal_padding(scale = 2) |>   opt_align_table_header(align = \"left\")"},{"path":"https://gt.rstudio.com/reference/fmt_url.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format URLs to generate links — fmt_url","text":"3-21","code":""},{"path":"https://gt.rstudio.com/reference/fmt_url.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format URLs to generate links — fmt_url","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/fmts.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting functions — fmts","title":"Formatting functions — fmts","text":"formatting functions gt quite consistent. functions start common fmt_*() prefix following points common","code":""},{"path":"https://gt.rstudio.com/reference/fmts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Formatting functions — fmts","text":"use exibble data .","code":""},{"path":"https://gt.rstudio.com/reference/fmts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting functions — fmts","text":"","code":"gt_tbl <- gt(exibble)  # # They all have `columns` and `rows` to specify target cells and default to # styling all compatible cells. # # By default, they apply styling to all compatible columns.  # Will style all numeric columns gt_tbl %>% fmt_number()     num       char       fctr       date       time       datetime       currency       row       group     0.11 apricot one 2015-01-15 13:35 2018-01-01 02:22 49.95 row_1 grp_a2.22 banana two 2015-02-15 14:40 2018-02-02 14:33 17.95 row_2 grp_a33.33 coconut three 2015-03-15 15:45 2018-03-03 03:44 1.39 row_3 grp_a444.40 durian four 2015-04-15 16:50 2018-04-04 15:55 65,100.00 row_4 grp_a5,550.00 NA five 2015-05-15 17:55 2018-05-05 04:00 1,325.81 row_5 grp_bNA fig six 2015-06-15 NA 2018-06-06 16:11 13.26 row_6 grp_b777,000.00 grapefruit seven NA 19:10 2018-07-07 05:22 NA row_7 grp_b8,880,000.00 honeydew eight 2015-08-15 20:20 NA 0.44 row_8 grp_b # will style the time column gt_tbl %>% fmt_time(columns = time)     num       char       fctr       date       time       datetime       currency       row       group     1.111e-01 apricot one 2015-01-15 13:35:00 2018-01-01 02:22 49.950 row_1 grp_a2.222e+00 banana two 2015-02-15 14:40:00 2018-02-02 14:33 17.950 row_2 grp_a3.333e+01 coconut three 2015-03-15 15:45:00 2018-03-03 03:44 1.390 row_3 grp_a4.444e+02 durian four 2015-04-15 16:50:00 2018-04-04 15:55 65100.000 row_4 grp_a5.550e+03 NA five 2015-05-15 17:55:00 2018-05-05 04:00 1325.810 row_5 grp_bNA fig six 2015-06-15 NA 2018-06-06 16:11 13.255 row_6 grp_b7.770e+05 grapefruit seven NA 19:10:00 2018-07-07 05:22 NA row_7 grp_b8.880e+06 honeydew eight 2015-08-15 20:20:00 NA 0.440 row_8 grp_b # Will style nothing since is only compatible with logical values gt_tbl %>% fmt_tf() #> Warning: invalid factor level, NA generated #> Warning: invalid factor level, NA generated     num       char       fctr       date       time       datetime       currency       row       group     0.1111 apricot one 2015-01-15 13:35 2018-01-01 02:22 49.95 row_1 grp_a2.222 banana two 2015-02-15 14:40 2018-02-02 14:33 17.95 row_2 grp_a33.33 coconut three 2015-03-15 15:45 2018-03-03 03:44 1.39 row_3 grp_a444.4 durian four 2015-04-15 16:50 2018-04-04 15:55 65100 row_4 grp_a5550 NA five 2015-05-15 17:55 2018-05-05 04:00 1325.81 row_5 grp_bNA fig six 2015-06-15 NA 2018-06-06 16:11 13.255 row_6 grp_b777000 grapefruit seven NA 19:10 2018-07-07 05:22 NA row_7 grp_b8880000 honeydew eight 2015-08-15 20:20 NA 0.44 row_8 grp_b # # Their order has importance as the last styling will have priority. #  # Will style all numeric columns as integer # fmt_number() will have no effect gt_tbl %>% fmt_number() %>% fmt_integer()     num       char       fctr       date       time       datetime       currency       row       group     0 apricot one 2015-01-15 13:35 2018-01-01 02:22 50 row_1 grp_a2 banana two 2015-02-15 14:40 2018-02-02 14:33 18 row_2 grp_a33 coconut three 2015-03-15 15:45 2018-03-03 03:44 1 row_3 grp_a444 durian four 2015-04-15 16:50 2018-04-04 15:55 65,100 row_4 grp_a5,550 NA five 2015-05-15 17:55 2018-05-05 04:00 1,326 row_5 grp_bNA fig six 2015-06-15 NA 2018-06-06 16:11 13 row_6 grp_b777,000 grapefruit seven NA 19:10 2018-07-07 05:22 NA row_7 grp_b8,880,000 honeydew eight 2015-08-15 20:20 NA 0 row_8 grp_b # # Therefore, to apply different styling, it is important to specify columns or rows. #  # Will style all numeric columns as number and as currency the currency column. # fmt_number() will have no effect gt_tbl %>% fmt_number() %>% fmt_integer(currency)     num       char       fctr       date       time       datetime       currency       row       group     0.11 apricot one 2015-01-15 13:35 2018-01-01 02:22 50 row_1 grp_a2.22 banana two 2015-02-15 14:40 2018-02-02 14:33 18 row_2 grp_a33.33 coconut three 2015-03-15 15:45 2018-03-03 03:44 1 row_3 grp_a444.40 durian four 2015-04-15 16:50 2018-04-04 15:55 65,100 row_4 grp_a5,550.00 NA five 2015-05-15 17:55 2018-05-05 04:00 1,326 row_5 grp_bNA fig six 2015-06-15 NA 2018-06-06 16:11 13 row_6 grp_b777,000.00 grapefruit seven NA 19:10 2018-07-07 05:22 NA row_7 grp_b8,880,000.00 honeydew eight 2015-08-15 20:20 NA 0 row_8 grp_b"},{"path":"https://gt.rstudio.com/reference/from_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference a column of values for certain parameters — from_column","title":"Reference a column of values for certain parameters — from_column","text":"can useful obtain parameter values column gt functions operate table body stub cells. example, might want indent row labels stub. call tab_stub_indent() indent different rows various indentation levels. However, level indentation applied necessitates new call function. make better, can use indentation values available table column via from_column() helper function. tab_stub_indent() case, invoke helper indent argument specify column values.","code":""},{"path":"https://gt.rstudio.com/reference/from_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference a column of values for certain parameters — from_column","text":"","code":"from_column(column, na_value = NULL, fn = NULL)"},{"path":"https://gt.rstudio.com/reference/from_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reference a column of values for certain parameters — from_column","text":"column Column name scalar<character> // required single column name quotation marks. Values extracted column provided compatible arguments. na_value Default replacement NA values scalar<character|numeric|logical> // default: NULL (optional) single value replace NA values column. Take care provide value type column values avoid undesirable coercion. fn Function apply function|formula // default: NULL (optional) function provided , values extracted table column (except NA values) can mutated.","code":""},{"path":"https://gt.rstudio.com/reference/from_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reference a column of values for certain parameters — from_column","text":"list object class gt_column.","code":""},{"path":"https://gt.rstudio.com/reference/from_column.html","id":"functions-that-allow-the-use-of-the-from-column-helper","dir":"Reference","previous_headings":"","what":"Functions that allow the use of the from_column() helper","title":"Reference a column of values for certain parameters — from_column","text":"certain functions (furthermore subset arguments within ) support use from_column() accessing varying parameter values. functions : tab_stub_indent() fmt_number() fmt_integer() fmt_scientific() fmt_engineering() fmt_percent() fmt_partsper() fmt_fraction() fmt_currency() fmt_roman() fmt_index() fmt_spelled_num() fmt_bytes() fmt_date() fmt_time() fmt_datetime() fmt_url() fmt_image() fmt_flag() fmt_markdown() fmt_passthrough() Within help documents functions find Compatibility arguments from_column() helper function section sections like describe arguments support use from_column().","code":""},{"path":"https://gt.rstudio.com/reference/from_column.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reference a column of values for certain parameters — from_column","text":"from_column() can used variety formatting functions values common options static, can change every row (long column compatible option values). example table repeating numeric values along column currency codes. can format numbers currencies fmt_currency() use from_column() reference column currency codes, giving us values formatted different currency.    summarize gtcars dataset get set rankings car manufacturer country origin. n column represents number cars manufacturer within dataset can use column way size text. tab_style() call; from_column() function used within cell_text() statement fashion different font sizes n column. done conjunction fn argument from_column(), helps tweak values n get useful range font sizes.","code":"dplyr::tibble(   amount = rep(30.75, 6),   curr = c(\"USD\", \"EUR\", \"GBP\", \"CAD\", \"AUD\", \"JPY\"), ) |>   gt() |>   fmt_currency(currency = from_column(column = \"curr\")) gtcars |>   dplyr::count(mfr, ctry_origin) |>   dplyr::arrange(ctry_origin) |>   gt(groupname_col = \"ctry_origin\") |>   tab_style(     style = cell_text(       size = from_column(         column = \"n\",         fn = function(x) paste0(5 + (x * 3), \"px\")       )     ),     locations = cells_body()   ) |>   tab_style(     style = cell_text(align = \"center\"),     locations = cells_row_groups()   ) |>   cols_hide(columns = n) |>   tab_options(column_labels.hidden = TRUE) |>   opt_all_caps() |>   opt_vertical_padding(scale = 0.25) |>   cols_align(align = \"center\", columns = mfr)"},{"path":"https://gt.rstudio.com/reference/from_column.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Reference a column of values for certain parameters — from_column","text":"8-5","code":""},{"path":"https://gt.rstudio.com/reference/from_column.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Reference a column of values for certain parameters — from_column","text":"v0.10.0 (October 7, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/ggplot_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for adding a ggplot — ggplot_image","title":"Helper function for adding a ggplot — ggplot_image","text":"can add ggplot2 plot inside table help ggplot_image() function. function provides convenient way generate HTML fragment ggplot object. function currently HTML-based, useful HTML table output. use function inside data cells, recommended text_transform() used. function, can specify data cells target include call ggplot_image() within required user-defined function (fn argument). want include plot places (e.g., header, within footnote text, etc.) need use ggplot_image() within html() helper function. , function creates HTML image tag image URI embedded within (100 dpi PNG). can easily experiment ggplot2 plot object, using within ggplot_image(plot_object = <plot object> evaluates : <img src=<data URI> style=\\\"height:100px;\\\"> height 100px default height chosen work well within heights table rows. option modify aspect ratio plot (default aspect_ratio 1.0) useful elongating given plot fit better within table construct.","code":""},{"path":"https://gt.rstudio.com/reference/ggplot_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for adding a ggplot — ggplot_image","text":"","code":"ggplot_image(plot_object, height = 100, aspect_ratio = 1)"},{"path":"https://gt.rstudio.com/reference/ggplot_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for adding a ggplot — ggplot_image","text":"plot_object ggplot plot object obj:<ggplot> // required ggplot plot object. height Height image scalar<numeric|integer> // default: 100 absolute height output image table cell (\"px\" units). default, set \"100px\". aspect_ratio final aspect ratio plot scalar<numeric|integer> // default: 1.0 plot's final aspect ratio. height plot fixed using height argument, aspect_ratio either compress (aspect_ratio < 1.0) expand (aspect_ratio > 1.0) plot horizontally. default value 1.0 neither compress expand plot.","code":""},{"path":"https://gt.rstudio.com/reference/ggplot_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for adding a ggplot — ggplot_image","text":"character object HTML fragment can placed inside cell.","code":""},{"path":"https://gt.rstudio.com/reference/ggplot_image.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for adding a ggplot — ggplot_image","text":"Create ggplot plot.   Create tibble contains two cells (one placeholder image), , create gt table. Use text_transform() function insert plot using calling ggplot_object() within user- defined function.","code":"library(ggplot2)  plot_object <-   ggplot(     data = gtcars,     aes(x = hp, y = trq, size = msrp)   ) +   geom_point(color = \"blue\") +   theme(legend.position = \"none\") dplyr::tibble(   text = \"Here is a ggplot:\",   ggplot = NA ) |>   gt() |>   text_transform(     locations = cells_body(columns = ggplot),     fn = function(x) {       plot_object |>         ggplot_image(height = px(200))     }   )"},{"path":"https://gt.rstudio.com/reference/ggplot_image.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper function for adding a ggplot — ggplot_image","text":"9-3","code":""},{"path":"https://gt.rstudio.com/reference/ggplot_image.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Helper function for adding a ggplot — ggplot_image","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gibraltar.html","id":null,"dir":"Reference","previous_headings":"","what":"Weather conditions in Gibraltar, May 2023 — gibraltar","title":"Weather conditions in Gibraltar, May 2023 — gibraltar","text":"gibraltar dataset meteorological data Gibraltar Airport Station May 1 May 31, 2023. Gibraltar British Overseas Territory city located southern end Iberian Peninsula, Bay Gibraltar. weather station located airport (GIB), elevation 5 meters mean sea level (AMSL).","code":""},{"path":"https://gt.rstudio.com/reference/gibraltar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weather conditions in Gibraltar, May 2023 — gibraltar","text":"","code":"gibraltar"},{"path":"https://gt.rstudio.com/reference/gibraltar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Weather conditions in Gibraltar, May 2023 — gibraltar","text":"tibble 1,431 rows 10 variables: date, time date time observation. temp, dew_point air temperature dew point values, degrees Celsius. humidity relative humidity value 0 1 wind_dir, wind_speed, wind_gust Observations related wind. wind direction given typical 'blowing ' value, simplified one 16 compass directions. wind speed provided units meters per second. measurable wind gust, maximum gust speed recorded m/s values (otherwise value 0). pressure atmospheric pressure hectopascals (hPa). condition weather condition.","code":""},{"path":"https://gt.rstudio.com/reference/gibraltar.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"Weather conditions in Gibraltar, May 2023 — gibraltar","text":"DATA-11","code":""},{"path":"https://gt.rstudio.com/reference/gibraltar.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"Weather conditions in Gibraltar, May 2023 — gibraltar","text":"v0.11.0 (July 9, 2024)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gibraltar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weather conditions in Gibraltar, May 2023 — gibraltar","text":"","code":"dplyr::glimpse(gibraltar) #> Rows: 1,431 #> Columns: 10 #> $ date       <date> 2023-05-01, 2023-05-01, 2023-05-01, 2023-05-01, 2023-05-01… #> $ time       <chr> \"00:20\", \"00:50\", \"01:20\", \"01:50\", \"02:20\", \"02:50\", \"03:2… #> $ temp       <dbl> 18.9, 18.9, 17.8, 18.9, 18.9, 17.8, 17.8, 17.8, 18.9, 18.9,… #> $ dew_point  <dbl> 12.8, 13.9, 13.9, 13.9, 12.8, 12.8, 12.8, 12.8, 12.2, 12.2,… #> $ humidity   <dbl> 0.68, 0.73, 0.77, 0.73, 0.68, 0.73, 0.73, 0.73, 0.64, 0.64,… #> $ wind_dir   <chr> \"W\", \"WSW\", \"W\", \"W\", \"WSW\", \"WSW\", \"W\", \"SW\", \"SW\", \"WSW\",… #> $ wind_speed <dbl> 6.7, 7.2, 6.7, 6.7, 6.7, 6.7, 7.2, 6.3, 4.0, 3.1, 3.6, 2.2,… #> $ wind_gust  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ pressure   <dbl> 1015.2, 1015.2, 1014.6, 1014.6, 1014.6, 1014.6, 1014.6, 101… #> $ condition  <chr> \"Fair\", \"Fair\", \"Fair\", \"Fair\", \"Fair\", \"Fair\", \"Fair\", \"Fa…"},{"path":"https://gt.rstudio.com/reference/google_font.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for specifying a font from the Google Fonts service — google_font","title":"Helper function for specifying a font from the Google Fonts service — google_font","text":"google_font() can used wherever font name specified. two instances helper can used: name argument opt_table_font() (setting table font) cell_text() (used tab_style()). get helpful listing fonts work well tables, call info_google_fonts().","code":""},{"path":"https://gt.rstudio.com/reference/google_font.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for specifying a font from the Google Fonts service — google_font","text":"","code":"google_font(name)"},{"path":"https://gt.rstudio.com/reference/google_font.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for specifying a font from the Google Fonts service — google_font","text":"name Google Font name scalar<character> // required complete name font available Google Fonts.","code":""},{"path":"https://gt.rstudio.com/reference/google_font.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for specifying a font from the Google Fonts service — google_font","text":"object class font_css.","code":""},{"path":"https://gt.rstudio.com/reference/google_font.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for specifying a font from the Google Fonts service — google_font","text":"Use exibble dataset create gt table two columns eight rows. replace missing values em dashes using sub_missing(). text time column, use font called \"IBM Plex Mono\" available Google Fonts. defined inside google_font() call, part vector includes fonts returned default_fonts() (fonts serve fallbacks just case font supplied Google Fonts accessible). terms placement, given font argument cell_text() given style argument tab_style().    can use subset sp500 dataset create small gt table. fmt_currency(), can display dollar sign first row monetary values. , set larger font size table opt use \"Merriweather\" font calling google_font() within opt_table_font(). cases font may materialize, include two font fallbacks: \"Cochin\" catchall \"Serif\" group.","code":"exibble |>   dplyr::select(char, time) |>   gt() |>   sub_missing() |>   tab_style(     style = cell_text(       font = c(         google_font(name = \"IBM Plex Mono\"),         default_fonts()       )     ),     locations = cells_body(columns = time)   ) sp500 |>   dplyr::slice(1:10) |>   dplyr::select(-volume, -adj_close) |>   gt() |>   fmt_currency(     rows = 1,     currency = \"USD\",     use_seps = FALSE   ) |>   tab_options(table.font.size = px(20)) |>   opt_table_font(     font = list(       google_font(name = \"Merriweather\"),       \"Cochin\", \"Serif\"     )   )"},{"path":"https://gt.rstudio.com/reference/google_font.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper function for specifying a font from the Google Fonts service — google_font","text":"8-31","code":""},{"path":"https://gt.rstudio.com/reference/google_font.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Helper function for specifying a font from the Google Fonts service — google_font","text":"v0.2.2 (August 5, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Add grand summary rows using aggregation functions — grand_summary_rows","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"Add grand summary rows using table data suitable aggregation functions. grand summary rows, available data gt table incorporated (regardless whether data part row groups). Multiple grand summary rows can added via expressions given fns. can selectively format values resulting grand summary cells use formatting expressions fmt.","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"","code":"grand_summary_rows(   data,   columns = everything(),   fns = NULL,   fmt = NULL,   side = c(\"bottom\", \"top\"),   missing_text = \"---\",   formatter = NULL,   ... )"},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() columns summaries calculated. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). fns Aggregation Expressions <expression|list expressions> Functions used aggregations. can include base functions like mean, min, max, median, sd, sum user-defined aggregation function. Multiple functions, generate different row, supplied within list(). can specify functions use function names quotes (e.g., \"sum\"), bare functions (e.g., sum), formula form (e.g., minimum ~ min(.)) LHS used supply summary row label ID values. information can found Aggregation expressions fns section. fmt Formatting expressions <expression|list expressions> Formatting expressions formula form. RHS ~ contain formatting call (e.g., ~ fmt_number(., decimals = 3, use_seps = FALSE). Optionally, LHS contain group-targeting expression (e.g., \"group_a\" ~ fmt_number(.)). information can found Formatting expressions fmt section. side Side used placement grand summary rows singl-kw:[bottom|top] // default: \"bottom\" grand summary rows placed \"bottom\" (default) \"top\" table? missing_text Replacement text NA values scalar<character> // default: \"---\" text used place NA values summary cells data outputs. formatter Deprecated Formatting function <expression> Deprecated, please use fmt instead. previously used way input formatting function name, fmt_*() functions available package (e.g., fmt_number(), fmt_percent(), etc.), custom function using fmt(). options formatter can accessed .... ... Deprecated Formatting arguments <Named arguments> Deprecated (along formatter) otherwise used argument values formatting function supplied formatter. example, using formatter = fmt_number, options decimals = 1, use_seps = FALSE, like can used .","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"using-columns-to-target-column-data-for-aggregation","dir":"Reference","previous_headings":"","what":"Using columns to target column data for aggregation","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"Targeting column data aggregates generated done columns argument. can declare column names c() (bare column names names quotes) can use tidyselect-style expressions. can basic supplying select helper like starts_with(), , providing complex incantation like (~ .numeric(.x) & max(.x, na.rm = TRUE) > 1E6) targets numeric columns maximum value greater 1,000,000 (excluding NAs consideration). default columns selected (everything() default). default may needed unless columns can undergo useful aggregation expressions supplied fns.","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"aggregation-expressions-for-fns","dir":"Reference","previous_headings":"","what":"Aggregation expressions for fns","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"number ways express aggregation work summary row. addition , ability pass important information summary row ID value label (former necessary targeting within tab_style() tab_footnote() latter used display rendered table). number instructive examples supply expressions.","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"double-sided-formula-with-everything-supplied","dir":"Reference","previous_headings":"","what":"Double-sided formula with everything supplied","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"can explicit provide double-sided formula (form <LHS> ~ <RHS>) expresses everything summary row. , aggregation expression (. represents data focused column). example: list(id = \"minimum\", label = \"min\") ~ min(., na.rm = TRUE) left side (list) contains named elements identify id label summary row. right side expression obtaining minimum value (dropping NA values calculation). list() can replaced c() advantage list allowing use md() html() helper functions. example can written : list(id = \"minimum\", label = md(\"**Minimum**\")) ~ min(., na.rm = TRUE) can label value interpreted Markdown text.","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"function-names-in-quotes","dir":"Reference","previous_headings":"","what":"Function names in quotes","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"fns = \"min\" get equivalent fuller expression: list(id = \"min\", label = \"min\") ~ min(., na.rm = TRUE) sake convenience, common aggregation functions na.rm argument rewritten na.rm = TRUE option. functions : \"min\", \"max\", \"mean\", \"median\", \"sd\", \"sum\". need specify multiple aggregation functions way (giving multiple summary rows), use c() list().","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"rhs-formula-expressions","dir":"Reference","previous_headings":"","what":"RHS formula expressions","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"fns = ~ min(.) fns = list(~ min(.)), gt use function name id label. expansion shorthand full form looks like : list(id = \"min\", label = \"min\") ~ min(.) RHS expression kept written name portion id label.","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"named-vector-or-list-with-rhs-formula-expression","dir":"Reference","previous_headings":"","what":"Named vector or list with RHS formula expression","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"Using fns = c(minimum = ~ min(.)) fns = list(minimum = ~ min(.)) expands : list(id = \"minimum\", label = \"minimum\") ~ min(.)","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"unnamed-vector-or-list-with-rhs-formula-expression","dir":"Reference","previous_headings":"","what":"Unnamed vector or list with RHS formula expression","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"fns = c(\"minimum\", \"min\") ~ min(.) fns = list(\"minimum\", \"min\") ~ min(.) LHS contains label id values , importantly, order label first id second. can rewritten : list(id = \"min\", label = \"minimum\") ~ min(.) vector list partially named, gt enough go disambiguate unnamed element. fns = c(\"minimum\", label = \"min\") ~ min(.), \"min\" indeed label \"minimum\" taken id value.","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"a-fully-named-list-with-three-specific-elements","dir":"Reference","previous_headings":"","what":"A fully named list with three specific elements","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"can avoid using formula satisfied default options function (except functions na.rm options, see ). Instead, list named elements id, label, fn used. can look like : fns = list(id = \"mean_id\", label = \"average\", fn = \"mean\") translates list(id = \"mean_id\", label = \"average\") ~ mean(., na.rm = TRUE)","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"formatting-expressions-for-fmt","dir":"Reference","previous_headings":"","what":"Formatting expressions for fmt","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"Given generating new data table, might also want take opportunity format new values right away. can fmt argument, either single expression number list. can supply one-sided (RHS ) expression fmt, , several can provided list. expression uses formatting function (e.g., fmt_number(), fmt_currency(), etc.) must contain initial . stands data object. performing numeric formatting columns new grand summary rows, might look something like : fmt = ~ fmt_number(., decimals = 1, use_seps = FALSE) can use columns rows arguments available every formatting function. allows us format subset columns rows. Summary rows can targeted using ID values settable within expressions given fns (see Aggregation expressions fns section details ). example hypothetical column row names: fmt = ~ fmt_number(., columns = num, rows = \"mean\", decimals = 3)","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"extraction-of-summary-rows","dir":"Reference","previous_headings":"","what":"Extraction of summary rows","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"need obtain summary data external purposes, extract_summary() can used gt_tbl object summary rows added via grand_summary_rows() summary_rows().","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"Use modified version sp500 dataset create gt table row groups row labels. Create grand summary rows min, max, avg table grand_summary_rows().    take countrypops dataset process bit handing gt. can create single grand summary row totals appears top table body (side = \"top\"). can define aggregation list contains parameters grand summary row label (\"TOTALS\"), ID value row (\"totals\"), aggregation function (expressed \"sum\", gt recognizes sum() function). Finally, add background fill grand summary row tab_style().","code":"sp500 |>   dplyr::filter(date >= \"2015-01-05\" & date <= \"2015-01-16\") |>   dplyr::arrange(date) |>   dplyr::mutate(week = paste0(\"W\", strftime(date, format = \"%V\"))) |>   dplyr::select(-adj_close, -volume) |>   gt(     rowname_col = \"date\",     groupname_col = \"week\"   ) |>   grand_summary_rows(     columns = c(open, high, low, close),     fns = list(       min ~ min(.),       max ~ max(.),       avg ~ mean(.)     ),     fmt = ~ fmt_number(., use_seps = FALSE)   ) countrypops |>   dplyr::filter(country_code_2 %in% c(\"BE\", \"NL\", \"LU\")) |>   dplyr::filter(year %% 10 == 0) |>   dplyr::select(country_name, year, population) |>   tidyr::pivot_wider(names_from = year, values_from = population) |>   gt(rowname_col = \"country_name\") |>   tab_header(title = \"Populations of the Benelux Countries\") |>   tab_spanner(columns = everything(), label = \"Year\") |>   fmt_integer() |>   grand_summary_rows(     fns =  list(label = \"TOTALS\", id = \"totals\", fn = \"sum\"),     fmt = ~ fmt_integer(.),     side = \"top\"   ) |>   tab_style(     locations = cells_grand_summary(),     style = cell_fill(color = \"lightblue\" |> adjust_luminance(steps = +1))   )"},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"6-2","code":""},{"path":"https://gt.rstudio.com/reference/grand_summary_rows.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Add grand summary rows using aggregation functions — grand_summary_rows","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/grp_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add one or more gt tables to a gt_group container object — grp_add","title":"Add one or more gt tables to a gt_group container object — grp_add","text":"gt_group object, created use gt_group() function, might want add gt tables container. common generate gt_group object collection gt_tbl objects, one can also create 'empty' gt_group object. Whatever workflow might , grp_add() function makes possible flexibly add one new gt tables, returning refreshed gt_group object.","code":""},{"path":"https://gt.rstudio.com/reference/grp_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add one or more gt tables to a gt_group container object — grp_add","text":"","code":"grp_add(.data, ..., .list = list2(...), .before = NULL, .after = NULL)"},{"path":"https://gt.rstudio.com/reference/grp_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add one or more gt tables to a gt_group container object — grp_add","text":".data gt table group object obj:<gt_group> // required gt_group container object. typically generated use gt_group() along one gt_tbl objects, , made splitting gt table gt_split(). ... One gt table objects obj:<gt_tbl> // required (, use .list) One gt table (gt_tbl) objects, typically generated via gt() function. .list Alternative ... <list multiple expressions> // (, use ...) Allows use list input alternative .... ., .Table used anchor scalar<numeric|integer> // default: NULL (optional) single index either .., specifying supplied gt_tbl objects placed amongst existing collection gt tables. nothing provided either argument incoming gt_tbl objects appended.","code":""},{"path":"https://gt.rstudio.com/reference/grp_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add one or more gt tables to a gt_group container object — grp_add","text":"object class gt_group.","code":""},{"path":"https://gt.rstudio.com/reference/grp_add.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add one or more gt tables to a gt_group container object — grp_add","text":"14-4","code":""},{"path":"https://gt.rstudio.com/reference/grp_add.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Add one or more gt tables to a gt_group container object — grp_add","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/grp_clone.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone one or more gt tables in a gt_group container object — grp_clone","title":"Clone one or more gt tables in a gt_group container object — grp_clone","text":"gt_group object, created use gt_group() function, may certain circumstances want create replicas gt_tbl objects collection. can done grp_clone() function placement cloned gt tables can controlled either arguments.","code":""},{"path":"https://gt.rstudio.com/reference/grp_clone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone one or more gt tables in a gt_group container object — grp_clone","text":"","code":"grp_clone(data, which = NULL, before = NULL, after = NULL)"},{"path":"https://gt.rstudio.com/reference/grp_clone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone one or more gt tables in a gt_group container object — grp_clone","text":"data gt table group object obj:<gt_group> // required gt_group container object. typically generated use gt_group() along one gt_tbl objects, , made splitting gt table gt_split(). tables clone vector<numeric|integer> // default: NULL (optional) vector index values denoting gt tables cloned inside gt_group object. , Table used anchor scalar<numeric|integer> // default: NULL (optional) single index either , specifies cloned gt_tbl objects placed amongst existing collection gt tables. nothing provided either argument, incoming gt_tbl objects appended.","code":""},{"path":"https://gt.rstudio.com/reference/grp_clone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone one or more gt tables in a gt_group container object — grp_clone","text":"object class gt_group.","code":""},{"path":"https://gt.rstudio.com/reference/grp_clone.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Clone one or more gt tables in a gt_group container object — grp_clone","text":"14-5","code":""},{"path":"https://gt.rstudio.com/reference/grp_clone.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Clone one or more gt tables in a gt_group container object — grp_clone","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/grp_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify table options for all tables within a gt_group object — grp_options","title":"Modify table options for all tables within a gt_group object — grp_options","text":"Modify options collection gt tables gt_group object. options named components, subcomponents, element can adjusted.","code":""},{"path":"https://gt.rstudio.com/reference/grp_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify table options for all tables within a gt_group object — grp_options","text":"","code":"grp_options(   data,   table.width = NULL,   table.layout = NULL,   table.align = NULL,   table.margin.left = NULL,   table.margin.right = NULL,   table.background.color = NULL,   table.additional_css = NULL,   table.font.names = NULL,   table.font.size = NULL,   table.font.weight = NULL,   table.font.style = NULL,   table.font.color = NULL,   table.font.color.light = NULL,   table.border.top.style = NULL,   table.border.top.width = NULL,   table.border.top.color = NULL,   table.border.right.style = NULL,   table.border.right.width = NULL,   table.border.right.color = NULL,   table.border.bottom.style = NULL,   table.border.bottom.width = NULL,   table.border.bottom.color = NULL,   table.border.left.style = NULL,   table.border.left.width = NULL,   table.border.left.color = NULL,   heading.background.color = NULL,   heading.align = NULL,   heading.title.font.size = NULL,   heading.title.font.weight = NULL,   heading.subtitle.font.size = NULL,   heading.subtitle.font.weight = NULL,   heading.padding = NULL,   heading.padding.horizontal = NULL,   heading.border.bottom.style = NULL,   heading.border.bottom.width = NULL,   heading.border.bottom.color = NULL,   heading.border.lr.style = NULL,   heading.border.lr.width = NULL,   heading.border.lr.color = NULL,   column_labels.background.color = NULL,   column_labels.font.size = NULL,   column_labels.font.weight = NULL,   column_labels.text_transform = NULL,   column_labels.padding = NULL,   column_labels.padding.horizontal = NULL,   column_labels.vlines.style = NULL,   column_labels.vlines.width = NULL,   column_labels.vlines.color = NULL,   column_labels.border.top.style = NULL,   column_labels.border.top.width = NULL,   column_labels.border.top.color = NULL,   column_labels.border.bottom.style = NULL,   column_labels.border.bottom.width = NULL,   column_labels.border.bottom.color = NULL,   column_labels.border.lr.style = NULL,   column_labels.border.lr.width = NULL,   column_labels.border.lr.color = NULL,   column_labels.hidden = NULL,   column_labels.units_pattern = NULL,   row_group.background.color = NULL,   row_group.font.size = NULL,   row_group.font.weight = NULL,   row_group.text_transform = NULL,   row_group.padding = NULL,   row_group.padding.horizontal = NULL,   row_group.border.top.style = NULL,   row_group.border.top.width = NULL,   row_group.border.top.color = NULL,   row_group.border.bottom.style = NULL,   row_group.border.bottom.width = NULL,   row_group.border.bottom.color = NULL,   row_group.border.left.style = NULL,   row_group.border.left.width = NULL,   row_group.border.left.color = NULL,   row_group.border.right.style = NULL,   row_group.border.right.width = NULL,   row_group.border.right.color = NULL,   row_group.default_label = NULL,   row_group.as_column = NULL,   table_body.hlines.style = NULL,   table_body.hlines.width = NULL,   table_body.hlines.color = NULL,   table_body.vlines.style = NULL,   table_body.vlines.width = NULL,   table_body.vlines.color = NULL,   table_body.border.top.style = NULL,   table_body.border.top.width = NULL,   table_body.border.top.color = NULL,   table_body.border.bottom.style = NULL,   table_body.border.bottom.width = NULL,   table_body.border.bottom.color = NULL,   stub.background.color = NULL,   stub.font.size = NULL,   stub.font.weight = NULL,   stub.text_transform = NULL,   stub.border.style = NULL,   stub.border.width = NULL,   stub.border.color = NULL,   stub.indent_length = NULL,   stub_row_group.font.size = NULL,   stub_row_group.font.weight = NULL,   stub_row_group.text_transform = NULL,   stub_row_group.border.style = NULL,   stub_row_group.border.width = NULL,   stub_row_group.border.color = NULL,   data_row.padding = NULL,   data_row.padding.horizontal = NULL,   summary_row.background.color = NULL,   summary_row.text_transform = NULL,   summary_row.padding = NULL,   summary_row.padding.horizontal = NULL,   summary_row.border.style = NULL,   summary_row.border.width = NULL,   summary_row.border.color = NULL,   grand_summary_row.background.color = NULL,   grand_summary_row.text_transform = NULL,   grand_summary_row.padding = NULL,   grand_summary_row.padding.horizontal = NULL,   grand_summary_row.border.style = NULL,   grand_summary_row.border.width = NULL,   grand_summary_row.border.color = NULL,   footnotes.background.color = NULL,   footnotes.font.size = NULL,   footnotes.padding = NULL,   footnotes.padding.horizontal = NULL,   footnotes.border.bottom.style = NULL,   footnotes.border.bottom.width = NULL,   footnotes.border.bottom.color = NULL,   footnotes.border.lr.style = NULL,   footnotes.border.lr.width = NULL,   footnotes.border.lr.color = NULL,   footnotes.marks = NULL,   footnotes.spec_ref = NULL,   footnotes.spec_ftr = NULL,   footnotes.multiline = NULL,   footnotes.sep = NULL,   source_notes.background.color = NULL,   source_notes.font.size = NULL,   source_notes.padding = NULL,   source_notes.padding.horizontal = NULL,   source_notes.border.bottom.style = NULL,   source_notes.border.bottom.width = NULL,   source_notes.border.bottom.color = NULL,   source_notes.border.lr.style = NULL,   source_notes.border.lr.width = NULL,   source_notes.border.lr.color = NULL,   source_notes.multiline = NULL,   source_notes.sep = NULL,   row.striping.background_color = NULL,   row.striping.include_stub = NULL,   row.striping.include_table_body = NULL,   container.width = NULL,   container.height = NULL,   container.padding.x = NULL,   container.padding.y = NULL,   container.overflow.x = NULL,   container.overflow.y = NULL,   ihtml.active = NULL,   ihtml.use_pagination = NULL,   ihtml.use_pagination_info = NULL,   ihtml.use_sorting = NULL,   ihtml.use_search = NULL,   ihtml.use_filters = NULL,   ihtml.use_resizers = NULL,   ihtml.use_highlight = NULL,   ihtml.use_compact_mode = NULL,   ihtml.use_text_wrapping = NULL,   ihtml.use_page_size_select = NULL,   ihtml.page_size_default = NULL,   ihtml.page_size_values = NULL,   ihtml.pagination_type = NULL,   page.orientation = NULL,   page.numbering = NULL,   page.header.use_tbl_headings = NULL,   page.footer.use_tbl_notes = NULL,   page.width = NULL,   page.height = NULL,   page.margin.left = NULL,   page.margin.right = NULL,   page.margin.top = NULL,   page.margin.bottom = NULL,   page.header.height = NULL,   page.footer.height = NULL )"},{"path":"https://gt.rstudio.com/reference/grp_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify table options for all tables within a gt_group object — grp_options","text":"data gt table group object obj:<gt_group> // required gt_group container object. typically generated use gt_group() along one gt_tbl objects, , made splitting gt table gt_split(). table.width Table width table width can specified single-length character units pixels percentage. provided single-length numeric vector, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percent units. table.layout table-layout property value table-layout CSS style HTML output context. default, \"fixed\" another valid option \"auto\". table.align Horizontal alignment table table.align option lets us set horizontal alignment table container. default, \"center\". options \"left\" \"right\". automatically set table.margin.left table.margin.right appropriate values. table.margin.left, table.margin.right Left right table margins size margins left right table within container can set table.margin.left table.margin.right. Can specified single-length character units pixels percentage. provided single-length numeric vector, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percent units. Using table.margin.left table.margin.right overwrite values set table.align. table.background.color, heading.background.color, column_labels.background.color, row_group.background.color, stub.background.color, summary_row.background.color, grand_summary_row.background.color, footnotes.background.color, source_notes.background.color Background colors options govern background colors parent element table following child elements: heading, column_labels, row_group, stub, summary_row, grand_summary_row, footnotes, source_notes. color name hexadecimal color code provided. table.additional_css Additional CSS table.additional_css option can used supply additional block CSS rules applied automatically generated table CSS. table.font.names Default table fonts names fonts used table can supplied table.font.names. vector several font names. first font available, next font tried (). table.font.size, heading.title.font.size, heading.subtitle.font.size, column_labels.font.size, row_group.font.size, stub.font.size, footnotes.font.size, source_notes.font.size Table font sizes font sizes parent text element table following child elements: heading.title, heading.subtitle, column_labels, row_group, footnotes, source_notes. Can specified single-length character vector units pixels (e.g., 12px) percentage (e.g., 80%). provided single-length numeric vector, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percentage units. table.font.weight, heading.title.font.weight, heading.subtitle.font.weight, column_labels.font.weight, row_group.font.weight, stub.font.weight Table font weights font weights table, heading.title, heading.subtitle, column_labels, row_group, stub text elements. Can text-based keyword \"normal\", \"bold\", \"lighter\", \"bolder\", , numeric value 1 1000, inclusive. Note variable fonts may support numeric mapping weight. table.font.style Default table font style default font style table. Can one either \"normal\", \"italic\", \"oblique\". table.font.color, table.font.color.light Default dark light text table options define text colors used throughout table. two variants: table.font.color text overlaid lighter background colors, table.font.color.light automatically used text needs overlaid darker background colors. color name hexadecimal color code provided. table.border.top.style, table.border.top.width, table.border.top.color, table.border.right.style, table.border.right.width, table.border.right.color, table.border.bottom.style, table.border.bottom.width, table.border.bottom.color, table.border.left.style, table.border.left.width, table.border.left.color Top border properties style, width, color properties table's absolute top absolute bottom borders. heading.align Horizontal alignment table header Controls horizontal alignment heading title subtitle. can either use \"center\", \"left\", \"right\". heading.padding, column_labels.padding, data_row.padding, row_group.padding, summary_row.padding, grand_summary_row.padding, footnotes.padding, source_notes.padding Vertical padding throughout table amount vertical padding incorporate heading (title subtitle), column_labels (includes column spanners), row group labels (row_group.padding), body/stub rows (data_row.padding), summary rows (summary_row.padding grand_summary_row.padding), footnotes source notes (footnotes.padding source_notes.padding). heading.padding.horizontal, column_labels.padding.horizontal, data_row.padding.horizontal, row_group.padding.horizontal, summary_row.padding.horizontal, grand_summary_row.padding.horizontal, footnotes.padding.horizontal, source_notes.padding.horizontal Horizontal padding throughout table amount horizontal padding incorporate heading (title subtitle), column_labels (includes column spanners), row group labels (row_group.padding.horizontal), body/stub rows (data_row.padding), summary rows (summary_row.padding.horizontal grand_summary_row.padding.horizontal), footnotes source notes (footnotes.padding.horizontal source_notes.padding.horizontal). heading.border.bottom.style, heading.border.bottom.width, heading.border.bottom.color Properties header's bottom border style, width, color properties header's bottom border. border shares space column_labels location. width border larger, visible border. heading.border.lr.style, heading.border.lr.width, heading.border.lr.color Properties header's left right borders style, width, color properties left right borders heading location. column_labels.text_transform, row_group.text_transform, stub.text_transform, summary_row.text_transform, grand_summary_row.text_transform Text transforms throughout table Options apply text transformations column_labels, row_group, stub, summary_row, grand_summary_row text elements. Either \"uppercase\", \"lowercase\", \"capitalize\" keywords can used. column_labels.vlines.style, column_labels.vlines.width, column_labels.vlines.color Properties vertical lines column labels style, width, color properties vertical lines ('vlines') column_labels. column_labels.border.top.style, column_labels.border.top.width, column_labels.border.top.color Properties border column labels style, width, color properties top border column_labels location. border shares space heading location. width border larger, visible border. column_labels.border.bottom.style, column_labels.border.bottom.width, column_labels.border.bottom.color Properties border column labels style, width, color properties bottom border column_labels location. column_labels.border.lr.style, column_labels.border.lr.width, column_labels.border.lr.color Properties left right borders next column labels style, width, color properties left right borders column_labels location. column_labels.hidden Hiding column labels option hide column labels. providing TRUE entire column_labels location seen table header (present) collapse downward. column_labels.units_pattern Pattern combine column labels units default pattern combining column labels defined units column labels. pattern initialized \"{1}, {2}\", \"{1}\" refers column label text \"{2}\" text related associated units. using cols_units(), opportunity provide specific pattern overrides units pattern unit. , specifying units directly cols_label() (units syntax surrounded \"{{\"/\"}}\") need units pattern value disregarded. row_group.border.top.style, row_group.border.top.width, row_group.border.top.color, row_group.border.bottom.style, row_group.border.bottom.width, row_group.border.bottom.color, row_group.border.left.style, row_group.border.left.width, row_group.border.left.color, row_group.border.right.style, row_group.border.right.width, row_group.border.right.color Border properties associated row_group location style, width, color properties top, bottom, left, right borders row_group location. row_group.default_label default row group label option set default row group label rows formally placed row group named group call tab_row_group(). set NA_character_ rows placed row group (one row groups already exist), rows automatically placed row group without label. row_group.as_column Structure row groups column row groups structured? default, separate rows lie groups. Setting TRUE structure row group labels separate column table stub. table_body.hlines.style, table_body.hlines.width, table_body.hlines.color, table_body.vlines.style, table_body.vlines.width, table_body.vlines.color Properties horizontal vertical lines table body style, width, color properties horizontal lines ('hlines') vertical lines ('vlines') table_body. table_body.border.top.style, table_body.border.top.width, table_body.border.top.color, table_body.border.bottom.style, table_body.border.bottom.width, table_body.border.bottom.color Properties top bottom borders table body style, width, color properties top bottom borders table_body location. stub.border.style, stub.border.width, stub.border.color Properties vertical border table stub style, width, color properties vertical border table stub. stub.indent_length Width indentation width indentation level row labels stub. indentation can set using tab_stub_indent(). default \"5px\". stub_row_group.font.size, stub_row_group.font.weight, stub_row_group.text_transform, stub_row_group.border.style, stub_row_group.border.width, stub_row_group.border.color Properties row group column table stub Options row group column table stub (made possible using row_group.as_column = TRUE). defaults options mirror stub.* variants (except stub_row_group.border.width, \"1px\" instead \"2px\"). summary_row.border.style, summary_row.border.width, summary_row.border.color Properties horizontal borders belonging summary rows style, width, color properties horizontal borders summary_row location. grand_summary_row.border.style, grand_summary_row.border.width, grand_summary_row.border.color Properties horizontal borders belonging grand summary rows style, width, color properties top borders grand_summary_row location. footnotes.border.bottom.style, footnotes.border.bottom.width, footnotes.border.bottom.color Properties bottom border belonging footnotes style, width, color properties bottom border footnotes location. footnotes.border.lr.style, footnotes.border.lr.width, footnotes.border.lr.color Properties left right borders belonging footnotes style, width, color properties left right borders footnotes location. footnotes.marks Sequence footnote marks set sequential marks used reference identify footnotes (input opt_footnote_marks()). can supply vector represents series footnote marks. vector recycled usage goes beyond length set. cycle, marks simply combined (e.g., * -> ** -> ***). option exists providing keywords certain types footnote marks. keyword \"numbers\" (default, indicating want use numeric marks). can use lowercase \"letters\" uppercase \"LETTERS\". option using traditional symbol set \"standard\" provides four symbols, , \"extended\" adds two symbols, making six. footnotes.spec_ref, footnotes.spec_ftr Specifications formatting footnote marks Optional specifications formatting footnote references (footnotes.spec_ref) associated marks footer section (footnotes.spec_ftr) (input opt_footnote_spec()). string containing specification control characters. default spec string \"^\", superscript text set italics. control characters can used : (1) \"b\" bold text, (2) \"(\" / \")\" enclosure footnote marks parentheses. footnotes.multiline, source_notes.multiline Typesetting multiple footnotes source notes option either put footnotes source notes separate lines (default, TRUE) render continuous line text footnotes.sep providing separator (default \" \") notes. footnotes.sep, source_notes.sep Separator characters adjacent footnotes source notes separating characters adjacent footnotes source notes respective footer sections rendered continuous line text (footnotes.multiline == FALSE). default value single space character (\" \"). source_notes.border.bottom.style, source_notes.border.bottom.width, source_notes.border.bottom.color Properties bottom border belonging source notes style, width, color properties bottom border source_notes location. source_notes.border.lr.style, source_notes.border.lr.width, source_notes.border.lr.color Properties left right borders belonging source notes style, width, color properties left right borders source_notes location. row.striping.background_color Background color row stripes background color striped table body rows. color name hexadecimal color code provided. row.striping.include_stub Inclusion table stub row stripes option whether include stub striping rows. row.striping.include_table_body Inclusion table body row stripes option whether include table body striping rows. container.width, container.height, container.padding.x, container.padding.y Table container dimensions padding width height table's container, , vertical horizontal padding table's container. container width height can specified units pixels percentage. padding specified length units pixels. provided numeric value, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percent units. container.overflow.x, container.overflow.y Table container overflow Options enable scrolling horizontal vertical directions table content overflows container dimensions. Using TRUE (default ) means horizontal vertical scrolling enabled view entire table directions. FALSE, table may clipped table width height exceeds container.width container.height. ihtml.active Display interactive HTML table option displaying interactive version HTML table (rather otherwise 'static' table). enables use controls pagination, global search, filtering, sorting. individual features controlled table.* options. default, pagination (ihtml.use_pagination) sorting (ihtml.use_sorting) features enabled. ihtml.active option, however, FALSE default. ihtml.use_pagination, ihtml.use_pagination_info Use pagination interactive HTML output, option using pagination controls (table body) can controlled ihtml.use_pagination. default, TRUE allow use page table content. informational display text regarding current page can set ihtml.use_pagination_info (TRUE default). ihtml.use_sorting Provide column sorting controls interactive HTML output, option provide controls sorting column values. default, TRUE. ihtml.use_search Provide global search field interactive HTML output, option places search field globally filtering rows requested content. default, FALSE. ihtml.use_filters Display filtering fields interactive HTML output, places search fields column header allows filtering column. default, FALSE. ihtml.use_resizers Allow column resizing interactive HTML output, allows interactive resizing columns. default, FALSE. ihtml.use_highlight Enable row highlighting hover interactive HTML output, highlights individual rows upon hover. default, FALSE. ihtml.use_compact_mode Use compact mode interactive HTML output, option reduce vertical padding thus make table consume less vertical space. default, FALSE. ihtml.use_text_wrapping Use text wrapping interactive HTML output, option control text wrapping. default (TRUE), text wrapped multiple lines; FALSE, text truncated single line. ihtml.use_page_size_select, ihtml.page_size_default, ihtml.page_size_values Change page size properties interactive HTML output, ihtml.use_page_size_select provides option display dropdown menu number rows show per page data. default, vector c(10, 25, 50, 100) corresponds options 10, 25, 50, 100 rows data per page. modify page-size options, provide numeric vector ihtml.page_size_values. default page size (initially set 10) can modified ihtml.page_size_default works whether ihtml.use_page_size_select set TRUE. ihtml.pagination_type Change pagination mode interactive HTML output using pagination, one three options presentation pagination controls. default \"numbers\", series page-number buttons presented along 'previous' 'next' buttons. \"jump\" option provides input field stepper page number. \"simple\", 'previous' 'next' buttons displayed. page.orientation Set RTF page orientation RTF output, provides two options page orientation: \"portrait\" (default) \"landscape\". page.numbering Enable RTF page numbering Within RTF output, page numbering displayed? default, set FALSE TRUE page numbering text added document header. page.header.use_tbl_headings Place table headings RTF page header TRUE RTF output tables migrate table headings (including table title column labels) page header. page header content repeat across pages. default, FALSE. page.footer.use_tbl_notes Place table footer RTF page footer TRUE RTF output tables migrate table footer content (includes footnotes source notes) page footer. page footer content repeat across pages. default, FALSE. page.width, page.height Set RTF page dimensions page width height standard portrait orientation. RTF table output default values (inches) 8.5in 11.0in. page.margin.left, page.margin.right, page.margin.top, page.margin.bottom Set RTF page margins RTF table output, options correspond left, right, top, bottom page margins. default values 1.0in. page.header.height, page.footer.height Set RTF page header footer distances heights page header footer RTF table outputs. Default values 0.5in.","code":""},{"path":"https://gt.rstudio.com/reference/grp_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify table options for all tables within a gt_group object — grp_options","text":"object class gt_group.","code":""},{"path":"https://gt.rstudio.com/reference/grp_options.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Modify table options for all tables within a gt_group object — grp_options","text":"14-8","code":""},{"path":"https://gt.rstudio.com/reference/grp_options.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Modify table options for all tables within a gt_group object — grp_options","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/grp_pull.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull out a gt table from a gt_group container object — grp_pull","title":"Pull out a gt table from a gt_group container object — grp_pull","text":"gt_group object, created use gt_group(), may need extract gt table container. grp_pull() makes possible, returning gt_tbl object. thing need provide index value gt table within gt_group object.","code":""},{"path":"https://gt.rstudio.com/reference/grp_pull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull out a gt table from a gt_group container object — grp_pull","text":"","code":"grp_pull(data, which)"},{"path":"https://gt.rstudio.com/reference/grp_pull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull out a gt table from a gt_group container object — grp_pull","text":"data gt table group object obj:<gt_group> // required gt_group container object. typically generated use gt_group() along one gt_tbl objects, , made splitting gt table gt_split(). table pull group scalar<numeric|integer> // required single index value denoting gt_tbl table obtained gt_group object.","code":""},{"path":"https://gt.rstudio.com/reference/grp_pull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull out a gt table from a gt_group container object — grp_pull","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/grp_pull.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Pull out a gt table from a gt_group container object — grp_pull","text":"14-3","code":""},{"path":"https://gt.rstudio.com/reference/grp_pull.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Pull out a gt table from a gt_group container object — grp_pull","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/grp_replace.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace one or more gt tables in a gt_group container object — grp_replace","title":"Replace one or more gt tables in a gt_group container object — grp_replace","text":"gt_group() can used create container multiple gt tables. circumstances, might want replace specific gt_tbl object (multiple) different one. can done grp_replace(). important thing number gt tables provided must equal number indices tables present gt_group object.","code":""},{"path":"https://gt.rstudio.com/reference/grp_replace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace one or more gt tables in a gt_group container object — grp_replace","text":"","code":"grp_replace(.data, ..., .list = list2(...), .which)"},{"path":"https://gt.rstudio.com/reference/grp_replace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace one or more gt tables in a gt_group container object — grp_replace","text":".data gt table group object obj:<gt_group> // required gt_group container object. typically generated use gt_group() along one gt_tbl objects, , made splitting gt table gt_split(). ... One gt table objects obj:<gt_tbl> // required (, use .list) One gt table (gt_tbl) objects, typically generated via gt() function. .list Alternative ... <list multiple expressions> // (, use ...) Allows use list input alternative .... .tables replace vector<numeric|integer> // default: NULL (optional) vector index values denoting gt tables replaced inside gt_group object.","code":""},{"path":"https://gt.rstudio.com/reference/grp_replace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace one or more gt tables in a gt_group container object — grp_replace","text":"object class gt_group.","code":""},{"path":"https://gt.rstudio.com/reference/grp_replace.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Replace one or more gt tables in a gt_group container object — grp_replace","text":"14-6","code":""},{"path":"https://gt.rstudio.com/reference/grp_replace.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Replace one or more gt tables in a gt_group container object — grp_replace","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/grp_rm.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove one or more gt tables from a gt_group container object — grp_rm","title":"Remove one or more gt tables from a gt_group container object — grp_rm","text":"gt_group object, created use gt_group() function, can hold multiple gt tables. However, might want delete one gt_tbl objects table container. grp_rm(), possible safe perform. returned gt_group object specified gt_tbl objects gone. thing need provide index value gt table within gt_group object.","code":""},{"path":"https://gt.rstudio.com/reference/grp_rm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove one or more gt tables from a gt_group container object — grp_rm","text":"","code":"grp_rm(data, which)"},{"path":"https://gt.rstudio.com/reference/grp_rm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove one or more gt tables from a gt_group container object — grp_rm","text":"data gt table group object obj:<gt_group> // required gt_group container object. typically generated use gt_group() along one gt_tbl objects, , made splitting gt table gt_split(). table remove group scalar<numeric|integer> // required single index value denoting gt_tbl table removed gt_group object.","code":""},{"path":"https://gt.rstudio.com/reference/grp_rm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove one or more gt tables from a gt_group container object — grp_rm","text":"object class gt_group.","code":""},{"path":"https://gt.rstudio.com/reference/grp_rm.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Remove one or more gt tables from a gt_group container object — grp_rm","text":"14-7","code":""},{"path":"https://gt.rstudio.com/reference/grp_rm.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Remove one or more gt tables from a gt_group container object — grp_rm","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gt-options.html","id":null,"dir":"Reference","previous_headings":"","what":"gt package options — gt-options","title":"gt package options — gt-options","text":"gt package options","code":""},{"path":"https://gt.rstudio.com/reference/gt-options.html","id":"package-options","dir":"Reference","previous_headings":"","what":"Package options","title":"gt package options — gt-options","text":"gt uses following options() configure behavior: gt.locale: locale yse default gt() function. gt.row_group.sep: separator groups row group label. default \" - \". gt.html_tag_check: logical scalar indicating whether print warning HTML tags found table rendered LaTeX. default TRUE. gt.strict_column_fmt: logical scalar controls whether formatting via fmt_*() functions fail attempting format data incompatible function. FALSE default. gt.latex_packages: vector LaTeX package names use generating tables LaTeX output context. set packages loaded controlled default vector: c(\"booktabs\", \"caption\", \"longtable\", \"colortbl\", \"array\").","code":""},{"path":"https://gt.rstudio.com/reference/gt-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gt: Easily Create Presentation-Ready Display Tables — gt-package","title":"gt: Easily Create Presentation-Ready Display Tables — gt-package","text":"Build display tables tabular data easy--use set functions. progressive approach, can construct display tables cohesive set table parts. Table values can formatted using included formatting functions. Footnotes cell styles can precisely added location targeting system. way 'gt' handles things means often worry fine details.","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gt-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gt: Easily Create Presentation-Ready Display Tables — gt-package","text":"Maintainer: Richard Iannone rich@posit.co (ORCID) Authors: Joe Cheng joe@posit.co Barret Schloerke barret@posit.co (ORCID) Ellis Hughes ellis.h.hughes@gsk.com (ORCID) Alexandra Lauer alexandralauer1@gmail.com (ORCID) JooYoung Seo jseo1005@illinois.edu (ORCID) Ken Brevoort ken@brevoort.com (ORCID) Olivier Roy contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://gt.rstudio.com/reference/gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gt table object — gt","title":"Create a gt table object — gt","text":"gt() function creates gt table object provided table data. Using function first step typical gt workflow. gt table object, can perform styling transformations rendering display table various formats.","code":""},{"path":"https://gt.rstudio.com/reference/gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gt table object — gt","text":"","code":"gt(   data,   rowname_col = \"rowname\",   groupname_col = dplyr::group_vars(data),   process_md = FALSE,   caption = NULL,   rownames_to_stub = FALSE,   row_group_as_column = FALSE,   auto_align = TRUE,   id = NULL,   locale = getOption(\"gt.locale\"),   row_group.sep = getOption(\"gt.row_group.sep\", \" - \") )"},{"path":"https://gt.rstudio.com/reference/gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gt table object — gt","text":"data Input data table obj:<data.frame>|obj:<tbl_df> // required data.frame object tibble (tbl_df). rowname_col Column row names/labels data scalar<character> // default: NULL (optional) column name input data table use row labels placed table stub. rownames_to_stub option TRUE column name provided rowname_col ignored. groupname_col Column group names/labels data scalar<character> // default: NULL (optional) column name input data table use group labels generation row groups. input data table grouped_df class (use dplyr::group_by() associated group_by*() functions) input ignored. process_md Process Markdown rowname_col groupname_col scalar<logical> // default: FALSE contents rowname_col groupname_col interpreted Markdown? default happen. caption Table caption text scalar<character> // default: NULL (optional) optional table caption use cross-referencing R Markdown, Quarto, bookdown. rownames_to_stub Use data frame row labels stub scalar<logical> // default: FALSE option take rownames input data table (available) row labels display table stub. row_group_as_column Mode displaying row group labels stub scalar<logical> // default: FALSE option alters display row group labels. default FALSE row group labels appear dedicated rows respective groups rows. TRUE row group labels occupy secondary column table stub. auto_align Automatic alignment column values labels scalar<logical> // default: TRUE Optionally column data aligned depending content contained column input data. Internally, calls cols_align(align = \"auto\") columns. id table ID scalar<character> // default: NULL (optional) default (NULL) random, ten-letter ID generated using random_id(). custom table ID can used providing character value. locale Locale identifier scalar<character> // default: getOption(\"gt.locale\") (optional) optional locale identifier can set default locale functions take locale argument. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. set, options(gt.locale) also consulted. row_group.sep Separator text multiple row group labels scalar<character> // default: getOption(\"gt.row_group.sep\", \" - \") separator use consecutive group names (possibility providing data grouped_df multiple groups) displayed row group label.","code":""},{"path":"https://gt.rstudio.com/reference/gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gt table object — gt","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/gt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a gt table object — gt","text":"data ingest options can consider stage. can choose create table stub containing row labels use rowname_col argument. , stub row groups can created groupname_col argument. arguments take name column input table data. Typically, data groupname_col column consist categorical text whereas data rowname_col column contain unique labels (unique across entire table unique within different row groups). Row groups can also created passing grouped_df gt() using dplyr::group_by() table data. way, two columns categorical data can used make row groups. row_group.sep argument allows control row group labels appear display table.","code":""},{"path":"https://gt.rstudio.com/reference/gt.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gt table object — gt","text":"use exibble dataset next examples, learn make simple gt tables gt() function. basic thing just use gt() dataset input.    dataset row group columns. former contains unique values ideal labeling rows, often happens called 'stub' (reserved area serves label rows). gt() function, can immediately place contents row column stub column. , use rowname_col argument name column use quotes.    sets table stub, row labels placed within stub column, vertical dividing line placed right-hand side. group column can used divide rows discrete groups. Within column, see repetitions values grp_a grp_b. serve ID values initial label groups. groupname_col argument gt(), can set row groups immediately upon creation table.    rather perform set row groups later (.e., gt() call), possible tab_row_group() (row_group_order() can help arrangement row groups). One thing consider row groups layout. default, row group labels reside separate rows appear group. However, can use row_group_as_column = TRUE put row group labels within secondary column within table stub.    done later need , using tab_options(row_group.as_column = TRUE) way outside gt() call. datasets rownames built ; mtcars famously car model names rownames. use rownames row labels stub, rownames_to_stub = TRUE option prove useful.    default, values body gt table (column labels) automatically aligned. alignment governed types values column. like disable form auto-alignment, auto_align = FALSE option can taken.    get center-alignment table body values column labels. Note row labels stub still left-aligned; auto_align effect alignment within table stub. However way generate initial gt table object, can use huge variety functions package customize presentation. Formatting body cells commonly done family formatting functions (e.g., fmt_number(), fmt_date(), etc.). package supports formatting internationalization ('i18n' features) locale-aware functions come locale argument. avoid use argument repeatedly, gt() function locale argument. Setting locale make available globally. example works practice setting locale = \"fr\" gt() using formatting functions:    example, fmt_number() fmt_date() understand locale table \"fr\" (French), appropriate formatting locale apparent num, currency, date columns. However fmt_datetime(), explicitly use \"en\" (English) locale. overrides \"fr\" default set table end result dates formatted English locale datetime column.","code":"exibble |> gt() exibble |> gt(rowname_col = \"row\") exibble |>   gt(     rowname_col = \"row\",     groupname_col = \"group\"   ) exibble |>   gt(     rowname_col = \"row\",     groupname_col = \"group\",     row_group_as_column = TRUE   ) head(mtcars, 10) |> gt(rownames_to_stub = TRUE) exibble |> gt(rowname_col = \"row\", auto_align = FALSE) exibble |>   gt(     rowname_col = \"row\",     groupname_col = \"group\",     locale = \"fr\"   ) |>   fmt_number() |>   fmt_date(     columns = date,     date_style = \"yMEd\"   ) |>   fmt_datetime(     columns = datetime,     format = \"EEEE, MMMM d, y\",     locale = \"en\"   )"},{"path":"https://gt.rstudio.com/reference/gt.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Create a gt table object — gt","text":"1-1","code":""},{"path":"https://gt.rstudio.com/reference/gt.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Create a gt table object — gt","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gt_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gt_group container for holding multiple gt table objects — gt_group","title":"Create a gt_group container for holding multiple gt table objects — gt_group","text":"gt_group() creates container storage multiple gt tables. type object allows flexibility printing multiple tables different output formats. example, printing multiple tables paginated output environment (e.g., RTF, Word, etc.), gt table can printed independently table separation (usually page break) occurs .","code":""},{"path":"https://gt.rstudio.com/reference/gt_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gt_group container for holding multiple gt table objects — gt_group","text":"","code":"gt_group(..., .list = list2(...), .use_grp_opts = FALSE)"},{"path":"https://gt.rstudio.com/reference/gt_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gt_group container for holding multiple gt table objects — gt_group","text":"... One gt table data objects obj:<gt_tbl> // (optional) One gt table (gt_tbl) objects, typically generated via gt() function. .list Alternative ... <list multiple expressions> // (, use ...) Allows use list input alternative .... .use_grp_opts Apply options contained tables? scalar<logical> // default: FALSE options specified gt_group object applied contained gt tables? default FALSE.","code":""},{"path":"https://gt.rstudio.com/reference/gt_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gt_group container for holding multiple gt table objects — gt_group","text":"object class gt_group.","code":""},{"path":"https://gt.rstudio.com/reference/gt_group.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Create a gt_group container for holding multiple gt table objects — gt_group","text":"14-1","code":""},{"path":"https://gt.rstudio.com/reference/gt_group.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Create a gt_group container for holding multiple gt table objects — gt_group","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gt_latex_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the LaTeX dependencies required for a gt table — gt_latex_dependencies","title":"Get the LaTeX dependencies required for a gt table — gt_latex_dependencies","text":"working Rnw (Sweave) files otherwise writing LaTeX code, including gt table can problematic knowledge LaTeX dependencies. part, dependencies LaTeX packages required rendering gt table. gt_latex_dependencies() provides object can used provide LaTeX Rnw file, allowing gt tables work yield errors due missing packages.","code":""},{"path":"https://gt.rstudio.com/reference/gt_latex_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the LaTeX dependencies required for a gt table — gt_latex_dependencies","text":"","code":"gt_latex_dependencies()"},{"path":"https://gt.rstudio.com/reference/gt_latex_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the LaTeX dependencies required for a gt table — gt_latex_dependencies","text":"object class knit_asis.","code":""},{"path":"https://gt.rstudio.com/reference/gt_latex_dependencies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the LaTeX dependencies required for a gt table — gt_latex_dependencies","text":"example Rnw document shows gt_latex_dependencies() can used conjunction gt table:","code":"%!sweave=knitr  \\documentclass{article}  <<echo=FALSE>>= library(gt)  @  <<results='asis', echo=FALSE>>= gt_latex_dependencies()  @  \\begin{document}  <<results='asis', echo=FALSE>>= gt(exibble)  @  \\end{document}"},{"path":"https://gt.rstudio.com/reference/gt_latex_dependencies.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Get the LaTeX dependencies required for a gt table — gt_latex_dependencies","text":"8-30","code":""},{"path":"https://gt.rstudio.com/reference/gt_latex_dependencies.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Get the LaTeX dependencies required for a gt table — gt_latex_dependencies","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gt_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gt display table output element for Shiny — gt_output","title":"Create a gt display table output element for Shiny — gt_output","text":"Using gt_output() can render reactive gt table, process initiated using render_gt() server component Shiny app. gt_output() used Shiny ui component, position context wherein call made determines gt table rendered app page. important note ID given render_gt() needed outputId gt_output() (e.g., server: output$<id> <- render_gt(...); ui: gt_output(outputId = \"<id>\")).","code":""},{"path":"https://gt.rstudio.com/reference/gt_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gt display table output element for Shiny — gt_output","text":"","code":"gt_output(outputId)"},{"path":"https://gt.rstudio.com/reference/gt_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gt display table output element for Shiny — gt_output","text":"outputId Shiny output ID scalar<character> // required output variable read table.","code":""},{"path":"https://gt.rstudio.com/reference/gt_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gt display table output element for Shiny — gt_output","text":"object class shiny.tag.","code":""},{"path":"https://gt.rstudio.com/reference/gt_output.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gt display table output element for Shiny — gt_output","text":"Shiny app (contained within single file) (1) prepares gt table, (2) sets ui gt_output(), (3) sets server render_gt() uses gt_tbl object input expression.","code":"library(shiny)  gt_tbl <-   gtcars |>   gt() |>   fmt_currency(columns = msrp, decimals = 0) |>   cols_hide(columns = -c(mfr, model, year, mpg_c, msrp)) |>   cols_label_with(columns = everything(), fn = toupper) |>   data_color(columns = msrp, method = \"numeric\", palette = \"viridis\") |>   sub_missing() |>   opt_interactive(use_compact_mode = TRUE)  ui <- fluidPage(   gt_output(outputId = \"table\") )  server <- function(input, output, session) {   output$table <- render_gt(expr = gt_tbl) }  shinyApp(ui = ui, server = server)"},{"path":"https://gt.rstudio.com/reference/gt_output.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Create a gt display table output element for Shiny — gt_output","text":"12-2","code":""},{"path":"https://gt.rstudio.com/reference/gt_output.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Create a gt display table output element for Shiny — gt_output","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a special gt table for previewing a dataset — gt_preview","title":"Generate a special gt table for previewing a dataset — gt_preview","text":"Sometimes may want see just small portion input data. can use gt_preview() place gt() get first x rows data last y rows data (can set top_n bottom_n arguments). advised use additional gt functions modify output gt_preview(). Furthermore, pass gt object gt_preview().","code":""},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a special gt table for previewing a dataset — gt_preview","text":"","code":"gt_preview(data, top_n = 5, bottom_n = 1, incl_rownums = TRUE)"},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a special gt table for previewing a dataset — gt_preview","text":"data Input data table obj:<data.frame>|obj:<tbl_df> // required data.frame object tibble (tbl_df). top_n Top n rows display scalar<numeric|integer> // default: 5 top_n value used number rows top table display. default, 5, show first five rows table. bottom_n Bottom n rows display scalar<numeric|integer> // default: 1 bottom_n value used number rows bottom table display. default, 1, show final row table. incl_rownums Display row numbers scalar<logical> // default: TRUE option include row numbers data table stub.","code":""},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a special gt table for previewing a dataset — gt_preview","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a special gt table for previewing a dataset — gt_preview","text":"default, output table include row numbers stub (including range row numbers omitted rows). row numbering option can deactivated setting incl_rownums FALSE.","code":""},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a special gt table for previewing a dataset — gt_preview","text":"three columns gtcars dataset, create gt table preview gt_preview() function. get first five rows last row.","code":"gtcars |>   dplyr::select(mfr, model, year) |>   gt_preview()"},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Generate a special gt table for previewing a dataset — gt_preview","text":"1-2","code":""},{"path":"https://gt.rstudio.com/reference/gt_preview.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Generate a special gt table for previewing a dataset — gt_preview","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gt_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a table into a group of tables (a gt_group) — gt_split","title":"Split a table into a group of tables (a gt_group) — gt_split","text":"gt table, can split multiple tables get collection gt_group object. function useful cases want section table specific way print smaller tables across multiple pages (RTF Word outputs, primarily via gtsave()), , breaks output context HTML.","code":""},{"path":"https://gt.rstudio.com/reference/gt_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a table into a group of tables (a gt_group) — gt_split","text":"","code":"gt_split(data, row_every_n = NULL, row_slice_i = NULL, col_slice_at = NULL)"},{"path":"https://gt.rstudio.com/reference/gt_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a table into a group of tables (a gt_group) — gt_split","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. row_every_n Split every n rows scalar<numeric|integer> // default: NULL (optional) directive split every n number rows. argument expects single numerical value. row_slice_i Row-slicing indices vector<numeric|integer> // default: NULL (optional) argument splitting specific row indices. , expect either vector index values function evaluates numeric vector. col_slice_at Column-slicing locations <column-targeting expression> // default: NULL (optional) columns vertical splitting across occur. splits occur right resolved column names. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()).","code":""},{"path":"https://gt.rstudio.com/reference/gt_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a table into a group of tables (a gt_group) — gt_split","text":"object class gt_group.","code":""},{"path":"https://gt.rstudio.com/reference/gt_split.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a table into a group of tables (a gt_group) — gt_split","text":"Use subset gtcars dataset create gt table. Format msrp column display numbers currency values, set column widths cols_width(), split table every five rows gt_split(). creates gt_group object containing two tables. Printing object yields two tables separated line break.    Use smaller subset gtcars dataset create gt table. Format msrp column display numbers currency values, set table width tab_options() split table model column creates gt_group object containing two tables time get vertical split. Printing object yields two tables width.","code":"gtcars |>   dplyr::slice_head(n = 10) |>   dplyr::select(mfr, model, year, msrp) |>   gt() |>   fmt_currency(columns = msrp) |>   cols_width(     year ~ px(80),     everything() ~ px(150)   ) |>   gt_split(row_every_n = 5) gtcars |>   dplyr::slice_head(n = 5) |>   dplyr::select(mfr, model, year, msrp) |>   gt() |>   fmt_currency(columns = msrp) |>   tab_options(table.width = px(400)) |>   gt_split(col_slice_at = \"model\")"},{"path":"https://gt.rstudio.com/reference/gt_split.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Split a table into a group of tables (a gt_group) — gt_split","text":"14-2","code":""},{"path":"https://gt.rstudio.com/reference/gt_split.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Split a table into a group of tables (a gt_group) — gt_split","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gt_update_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a gt selection in Shiny — gt_update_select","title":"Update a gt selection in Shiny — gt_update_select","text":"Update selection interactive gt table rendered using render_gt(). table must interactive selection enabled (see opt_interactive()).","code":""},{"path":"https://gt.rstudio.com/reference/gt_update_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a gt selection in Shiny — gt_update_select","text":"","code":"gt_update_select(outputId, rows, session = shiny::getDefaultReactiveDomain())"},{"path":"https://gt.rstudio.com/reference/gt_update_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a gt selection in Shiny — gt_update_select","text":"outputId Shiny output ID scalar<character> // required id gt_output() element update. rows Row indices <integer> // required id gt_output() element update. session Shiny session scalar<ShinySession> // required session gt_output() element can found. almost certainly want leave default value.","code":""},{"path":"https://gt.rstudio.com/reference/gt_update_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a gt selection in Shiny — gt_update_select","text":"call JavaScript binding table.","code":""},{"path":"https://gt.rstudio.com/reference/gt_update_select.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Update a gt selection in Shiny — gt_update_select","text":"12-3","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gtcars.html","id":null,"dir":"Reference","previous_headings":"","what":"Deluxe automobiles from the 2014-2017 period — gtcars","title":"Deluxe automobiles from the 2014-2017 period — gtcars","text":"Expensive fast cars. father's mtcars. row describes car certain make, model, year, trim. Basic specifications horsepower, torque, EPA MPG ratings, type drivetrain, transmission characteristics provided. country origin car manufacturer also given.","code":""},{"path":"https://gt.rstudio.com/reference/gtcars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deluxe automobiles from the 2014-2017 period — gtcars","text":"","code":"gtcars"},{"path":"https://gt.rstudio.com/reference/gtcars.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Deluxe automobiles from the 2014-2017 period — gtcars","text":"tibble 47 rows 15 variables: mfr name car manufacturer. model car's model name. year car's model year. trim short description car model's trim. bdy_style identifier car's body style, either \"coupe\", \"convertible\", \"sedan\", \"hatchback\". hp, hp_rpm car's horsepower associated RPM level. trq, trq_rpm car's torque associated RPM level. mpg_c, mpg_h miles per gallon fuel efficiency rating city highway driving. drivetrain car's drivetrain , dataset, either \"rwd\" (Rear Wheel Drive) \"awd\" (Wheel Drive). trsmn encoding transmission type, number part number gears. car automatic transmission (\"\"), manual transmission (\"m\"), option switch types (\"\"), , direct drive (\"dd\") ctry_origin country name vehicle manufacturer headquartered. msrp Manufacturer's suggested retail price U.S. dollars (USD).","code":""},{"path":"https://gt.rstudio.com/reference/gtcars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deluxe automobiles from the 2014-2017 period — gtcars","text":"gtcars something else common (aside high asking prices): grand tourer vehicles. proper GT cars blend pure driving thrills level comfort expected fine limousine (e.g., Rolls-Royce Phantom EWB). find , cars, comfort emphasized -performance. Nevertheless, driving experience also mean motoring speed, style safety.","code":""},{"path":"https://gt.rstudio.com/reference/gtcars.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"Deluxe automobiles from the 2014-2017 period — gtcars","text":"DATA-3","code":""},{"path":"https://gt.rstudio.com/reference/gtcars.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"Deluxe automobiles from the 2014-2017 period — gtcars","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/gtcars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deluxe automobiles from the 2014-2017 period — gtcars","text":"","code":"dplyr::glimpse(gtcars) #> Rows: 47 #> Columns: 15 #> $ mfr         <chr> \"Ford\", \"Ferrari\", \"Ferrari\", \"Ferrari\", \"Ferrari\", \"Ferra… #> $ model       <chr> \"GT\", \"458 Speciale\", \"458 Spider\", \"458 Italia\", \"488 GTB… #> $ year        <dbl> 2017, 2015, 2015, 2014, 2016, 2015, 2017, 2015, 2015, 2015… #> $ trim        <chr> \"Base Coupe\", \"Base Coupe\", \"Base\", \"Base Coupe\", \"Base Co… #> $ bdy_style   <chr> \"coupe\", \"coupe\", \"convertible\", \"coupe\", \"coupe\", \"conver… #> $ hp          <dbl> 647, 597, 562, 562, 661, 553, 680, 652, 731, 949, 573, 545… #> $ hp_rpm      <dbl> 6250, 9000, 9000, 9000, 8000, 7500, 8250, 8000, 8250, 9000… #> $ trq         <dbl> 550, 398, 398, 398, 561, 557, 514, 504, 509, 664, 476, 436… #> $ trq_rpm     <dbl> 5900, 6000, 6000, 6000, 3000, 4750, 5750, 6000, 6000, 6750… #> $ mpg_c       <dbl> 11, 13, 13, 13, 15, 16, 12, 11, 11, 12, 21, 16, 11, 16, 12… #> $ mpg_h       <dbl> 18, 17, 17, 17, 22, 23, 17, 16, 16, 16, 22, 22, 18, 20, 20… #> $ drivetrain  <chr> \"rwd\", \"rwd\", \"rwd\", \"rwd\", \"rwd\", \"rwd\", \"awd\", \"awd\", \"r… #> $ trsmn       <chr> \"7a\", \"7a\", \"7a\", \"7a\", \"7a\", \"7a\", \"7a\", \"7a\", \"7a\", \"7a\"… #> $ ctry_origin <chr> \"United States\", \"Italy\", \"Italy\", \"Italy\", \"Italy\", \"Ital… #> $ msrp        <dbl> 447000, 291744, 263553, 233509, 245400, 198973, 298000, 29…"},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a gt table as a file — gtsave","title":"Save a gt table as a file — gtsave","text":"gtsave() makes easy save gt table file. function guesses file type extension provided output filename, producing either HTML, PDF, PNG, LaTeX, RTF, Word (.docx) file.","code":""},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a gt table as a file — gtsave","text":"","code":"gtsave(data, filename, path = NULL, ...)"},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a gt table as a file — gtsave","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. filename Output filename scalar<character> // required file name create disk. Ensure extension compatible output types provided (.html, .tex, .ltx, .rtf, .docx). custom save function provided file extension disregarded. path Output path scalar<character> // default: NULL (optional) optional path file saved (combined filename). ... Additional options <named arguments> options passed appropriate internal saving function.","code":""},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a gt table as a file — gtsave","text":"file name (invisibly) export process successful.","code":""},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save a gt table as a file — gtsave","text":"Output filenames either .html .htm extensions produce HTML document. case, can pass TRUE FALSE value inline_css option obtain HTML document inlined CSS styles (default FALSE). details CSS inlining available as_raw_html(). can pass values arguments htmltools::save_html() .... arguments either background libdir, please refer htmltools documentation details use arguments. output filename expressed .rtf extension RTF file generated. case, option can passed ...: page_numbering. controls RTF document page numbering , default, page numbering enabled (.e., page_numbering = \"none\"). can create image file based HTML version gt table. filename extension .png, get PNG image file. PDF document can generated using .pdf extension. process facilitated webshot2 package, , package needs installed attempting save table image file. option passing values underlying webshot2::webshot() function .... useful arguments PNG saving zoom (defaults scale level 2) expand (adds whitespace pixels around cropped table image, default value 5), selector (default value \"table\"). several options available look webshot2 documentation details. output filename extension either .tex, .ltx, .rnw, LaTeX document produced. output filename .rtf generate RTF document. LaTeX RTF saving functions options pass .... output filename extension .docx, Word document file produced. process facilitated rmarkdown package, package needs installed attempting save table .docx document.","code":""},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a gt table as a file — gtsave","text":"Using small subset gtcars dataset, can create gt table row labels. add stubhead label tab_stubhead() function describe stub.   Export gt table HTML file inlined CSS (necessary including table part HTML email) using gtsave() inline_css = TRUE option.   leaving inline_css option, get conventional HTML file embedded CSS styles.   Saving PNG file results cropped image HTML table. amount whitespace can set expand option.   use .tex, .ltx, .rnw result output LaTeX document.   .rtf extension, get RTF document.   .docx extension, get word/docx document.","code":"tab_1 <-   gtcars |>   dplyr::select(model, year, hp, trq) |>   dplyr::slice(1:5) |>   gt(rowname_col = \"model\") |>   tab_stubhead(label = \"car\") tab_1 |> gtsave(filename = \"tab_1.html\", inline_css = TRUE) tab_1 |> gtsave(filename = \"tab_1.html\") tab_1 |> gtsave(\"tab_1.png\", expand = 10) tab_1 |> gtsave(\"tab_1.tex\") tab_1 |> gtsave(\"tab_1.rtf\") tab_1 |> gtsave(\"tab_1.docx\")"},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Save a gt table as a file — gtsave","text":"13-1","code":""},{"path":"https://gt.rstudio.com/reference/gtsave.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Save a gt table as a file — gtsave","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/html.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpret input text as HTML-formatted text — html","title":"Interpret input text as HTML-formatted text — html","text":"certain pieces text (like column labels table headings) may want express raw HTML. fact, HTML, anything goes can much just text. html() function guard input HTML escaping, , HTML tags come HTML rendered... HTML.","code":""},{"path":"https://gt.rstudio.com/reference/html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpret input text as HTML-formatted text — html","text":"","code":"html(text, ...)"},{"path":"https://gt.rstudio.com/reference/html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpret input text as HTML-formatted text — html","text":"text HTML text scalar<character> // required text understood HTML text, preserved HTML output context. ... Optional parameters htmltools::HTML() <multiple expressions> // (optional) htmltools::HTML() function contains ... anything provided passed internal function call.","code":""},{"path":"https://gt.rstudio.com/reference/html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpret input text as HTML-formatted text — html","text":"character object class html. tagged HTML fragment sanitized.","code":""},{"path":"https://gt.rstudio.com/reference/html.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpret input text as HTML-formatted text — html","text":"Use exibble dataset create gt table. adding title tab_header(), use html() helper signify gt using HTML formatting.","code":"exibble |>   dplyr::select(currency, char) |>   gt() |>   tab_header(title = html(\"<em>HTML<\/em>\"))"},{"path":"https://gt.rstudio.com/reference/html.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Interpret input text as HTML-formatted text — html","text":"8-2","code":""},{"path":"https://gt.rstudio.com/reference/html.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Interpret input text as HTML-formatted text — html","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/illness.html","id":null,"dir":"Reference","previous_headings":"","what":"Lab tests for one suffering from an illness — illness","title":"Lab tests for one suffering from an illness — illness","text":"dataset artificial daily lab data patient Yellow Fever (YF). table comprises laboratory findings patient day 3 illness onset day 9 (patient died). YF viral DNA found serum samples day 3, viral load reached 14,000 copies per mL. Several medical interventions taken help patient, including administration fresh frozen plasma, platelets, red cells, coagulation factor VIII. patient also received advanced support treatment form mechanical ventilation plasmapheresis. Though patient's temperature remained stable illness, unfortunately, patient's condition improve. days 7 8, patient's health declined , symptoms nosebleeds, gastrointestinal bleeding, hematoma.","code":""},{"path":"https://gt.rstudio.com/reference/illness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lab tests for one suffering from an illness — illness","text":"","code":"illness"},{"path":"https://gt.rstudio.com/reference/illness.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lab tests for one suffering from an illness — illness","text":"tibble 39 rows 11 variables: test name test. units measurement units test. day_3,day_4,day_5,day_6,day_7,day_8,day_9 Measurement values associated test administered days 3 9. NA value indicates test performed day. norm_l,norm_u Lower upper bounds normal range associated test.","code":""},{"path":"https://gt.rstudio.com/reference/illness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lab tests for one suffering from an illness — illness","text":"various tests identified test column. following listing provides full names abbreviations seen column. \"WBC\": white blood cells. \"RBC\": red blood cells. \"Hb\": hemoglobin. \"PLT\": platelets. \"ALT\": alanine aminotransferase. \"AST\": aspartate aminotransferase. \"TBIL\": total bilirubin. \"DBIL\": direct bilirubin. \"NH3\": hydrogen nitride. \"PT\": prothrombin time. \"APTT\": activated partial thromboplastin time. \"PTA\": prothrombin time activity. \"DD\": D-dimer. \"FDP\": fibrinogen degradation products. \"LDH\": lactate dehydrogenase. \"HBDH\": hydroxybutyrate dehydrogenase. \"CK\": creatine kinase. \"CKMB\": MB fraction creatine kinase. \"BNP\": B-type natriuretic peptide. \"MYO\": myohemoglobin. \"TnI\": troponin inhibitory. \"CREA\": creatinine. \"BUN\": blood urea nitrogen. \"AMY\": amylase. \"LPS\": lipase. \"K\": kalium. \"Na\": sodium. \"Cl\": chlorine. \"Ca\": calcium. \"P\": phosphorus. \"Lac\": lactate, blood. \"CRP\": c-reactive protein. \"PCT\": procalcitonin. \"IL-6\": interleukin-6. \"CD3+CD4+\": CD4+T lymphocytes. \"CD3+CD8+\": CD8+T lymphocytes.","code":""},{"path":"https://gt.rstudio.com/reference/illness.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"Lab tests for one suffering from an illness — illness","text":"DATA-13","code":""},{"path":"https://gt.rstudio.com/reference/illness.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"Lab tests for one suffering from an illness — illness","text":"v0.10.0 (October 7, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/illness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lab tests for one suffering from an illness — illness","text":"","code":"dplyr::glimpse(illness) #> Rows: 39 #> Columns: 11 #> $ test   <chr> \"Viral load\", \"WBC\", \"Neutrophils\", \"RBC\", \"Hb\", \"PLT\", \"ALT\", … #> $ units  <chr> \"copies per mL\", \"x10^9 / L\", \"x10^9 / L\", \"x10^12 / L\", \"g / L… #> $ day_3  <dbl> 12000.000, 5.260, 4.870, 5.720, 153.000, 67.000, 12835.000, 236… #> $ day_4  <dbl> 4200.000, 4.260, 4.720, 5.980, 135.000, 38.600, 12632.000, 2136… #> $ day_5  <dbl> 1600.000, 9.920, 7.920, 4.230, 126.000, 27.400, 6426.700, 14730… #> $ day_6  <dbl> 830.000, 10.490, 18.210, 4.830, 115.000, 26.200, 4263.100, 8691… #> $ day_7  <dbl> 760.000, 24.770, 22.080, 4.120, 75.000, 74.100, 1623.700, 2189.… #> $ day_8  <dbl> 520.000, 30.260, 27.170, 2.680, 87.000, 36.200, 672.600, 1145.0… #> $ day_9  <dbl> 250.000, 19.030, 16.590, 3.320, 95.000, 25.600, 512.400, 782.50… #> $ norm_l <dbl> NA, 4.0, 2.0, 4.0, 120.0, 100.0, 9.0, 15.0, 0.0, 0.0, 10.0, 9.4… #> $ norm_u <dbl> NA, 10.000, 8.000, 5.500, 160.000, 300.000, 50.000, 40.000, 18.…"},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table with info on supported currencies — info_currencies","title":"View a table with info on supported currencies — info_currencies","text":"fmt_currency() lets us format numeric values currencies. table generated info_currencies() provides quick reference available currencies. currency identifiers provided (name, 3-letter currency code, 3-digit currency code) along currency's exponent value (number digits currency subunits). formatted example provided (based value 49.95) demonstrate default formatting currency.","code":""},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table with info on supported currencies — info_currencies","text":"","code":"info_currencies(type = c(\"code\", \"symbol\"), begins_with = NULL)"},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View a table with info on supported currencies — info_currencies","text":"type Type currency singl-kw:[code|symbol] // default: \"code\" type currency information provided. Can either \"code\" currency information corresponding 3-letter/3-number currency codes provided, \"symbol\" currency info common currency names/symbols (e.g., dollar, pound, yen, etc.) returned. begins_with Show currencies beginning specific letter scalar<character> // default: NULL (optional) Providing single letter filter currencies begin letter currency code. default (NULL) produce table currencies displayed. option constrains information table type == \"code\".","code":""},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table with info on supported currencies — info_currencies","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View a table with info on supported currencies — info_currencies","text":"172 currencies, can lead verbose display table. make presentation focused retrieval, can provide initial letter corresponding 3-letter currency code begins_with. filter currencies info table just set beginning supplied letter.","code":""},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table with info on supported currencies — info_currencies","text":"Get table info currencies three-letter code begins \"h\".    Get table info common currency name/symbols can used fmt_currency().","code":"info_currencies(begins_with = \"h\") info_currencies(type = \"symbol\")"},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table with info on supported currencies — info_currencies","text":"11-3","code":""},{"path":"https://gt.rstudio.com/reference/info_currencies.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"View a table with info on supported currencies — info_currencies","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/info_date_style.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table with info on date styles — info_date_style","title":"View a table with info on date styles — info_date_style","text":"fmt_date() lets us format date-based values convenient manner using preset styles. table generated info_date_style() provides quick reference styles, associated format names example outputs using fixed date (2000-02-29).","code":""},{"path":"https://gt.rstudio.com/reference/info_date_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table with info on date styles — info_date_style","text":"","code":"info_date_style(locale = NULL)"},{"path":"https://gt.rstudio.com/reference/info_date_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View a table with info on date styles — info_date_style","text":"locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used displaying formatted date values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported.","code":""},{"path":"https://gt.rstudio.com/reference/info_date_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table with info on date styles — info_date_style","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_date_style.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table with info on date styles — info_date_style","text":"Get table info different date-formatting styles (used supplying number code fmt_date()).","code":"info_date_style()"},{"path":"https://gt.rstudio.com/reference/info_date_style.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table with info on date styles — info_date_style","text":"11-1","code":""},{"path":"https://gt.rstudio.com/reference/info_date_style.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"View a table with info on date styles — info_date_style","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/info_flags.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table with all available flags for fmt_flag() — info_flags","title":"View a table with all available flags for fmt_flag() — info_flags","text":"fmt_flag() can used render flag icons within body cells 2-letter country codes. lot countries, , calling info_flags() can helpful showing valid supported country codes along flag icons.","code":""},{"path":"https://gt.rstudio.com/reference/info_flags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table with all available flags for fmt_flag() — info_flags","text":"","code":"info_flags()"},{"path":"https://gt.rstudio.com/reference/info_flags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table with all available flags for fmt_flag() — info_flags","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_flags.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table with all available flags for fmt_flag() — info_flags","text":"Get table info available flag icons.","code":"info_flags()"},{"path":"https://gt.rstudio.com/reference/info_flags.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table with all available flags for fmt_flag() — info_flags","text":"11-7","code":""},{"path":"https://gt.rstudio.com/reference/info_flags.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"View a table with all available flags for fmt_flag() — info_flags","text":"v0.10.0 (October 7, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/info_google_fonts.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table on recommended Google Fonts — info_google_fonts","title":"View a table on recommended Google Fonts — info_google_fonts","text":"google_font() helper function can used wherever font name specified. two instances helper can used: name argument opt_table_font() (setting table font) cell_text() (used tab_style()). overwhelming number fonts available Google Fonts catalog, info_google_fonts() provides table set helpful font recommendations. fonts look great different parts gt table. ? part suitable body text, large counters, large x-height, reasonably low contrast, open apertures. font features make high legibility smaller sizes.","code":""},{"path":"https://gt.rstudio.com/reference/info_google_fonts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table on recommended Google Fonts — info_google_fonts","text":"","code":"info_google_fonts()"},{"path":"https://gt.rstudio.com/reference/info_google_fonts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table on recommended Google Fonts — info_google_fonts","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_google_fonts.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table on recommended Google Fonts — info_google_fonts","text":"Get table info recommended Google Fonts tables.","code":"info_google_fonts()"},{"path":"https://gt.rstudio.com/reference/info_google_fonts.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table on recommended Google Fonts — info_google_fonts","text":"11-6","code":""},{"path":"https://gt.rstudio.com/reference/info_google_fonts.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"View a table on recommended Google Fonts — info_google_fonts","text":"v0.2.2 (August 5, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/info_icons.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table with all available Font Awesome icons for fmt_icon() — info_icons","title":"View a table with all available Font Awesome icons for fmt_icon() — info_icons","text":"fmt_icon() can used render Font Awesome icons within body cells reference icon names. , text transformation functions (e.g., text_case_match()) allow insertion icons replacement text (long use fa() function fontawesome package). large number icons available use Font Awesome, info_icons() can used provide us table lists icons along short full names (either can used fmt_icon()). also contains acceptable codes fmt_country()","code":""},{"path":"https://gt.rstudio.com/reference/info_icons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table with all available Font Awesome icons for fmt_icon() — info_icons","text":"","code":"info_icons()"},{"path":"https://gt.rstudio.com/reference/info_icons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table with all available Font Awesome icons for fmt_icon() — info_icons","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_icons.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table with all available Font Awesome icons for fmt_icon() — info_icons","text":"Get table info available Font Awesome icons.","code":"info_icons()"},{"path":"https://gt.rstudio.com/reference/info_icons.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table with all available Font Awesome icons for fmt_icon() — info_icons","text":"11-8","code":""},{"path":"https://gt.rstudio.com/reference/info_icons.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"View a table with all available Font Awesome icons for fmt_icon() — info_icons","text":"v0.10.0 (October 7, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table with info on supported locales — info_locales","title":"View a table with info on supported locales — info_locales","text":"Many fmt_*() functions locale argument makes locale-based formatting easier. table generated info_locales() function provides quick reference available locales. locale identifiers provided (base locale ID, common display name) along locale's group decimal separator marks. formatted numeric example provided (based value 11027) demonstrate default formatting locale.","code":""},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table with info on supported locales — info_locales","text":"","code":"info_locales(begins_with = NULL)"},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View a table with info on supported locales — info_locales","text":"begins_with Show locales beginning specific letter scalar<character> // default: NULL (optional) Providing single letter filter locales begin letter locale ID. default (NULL) produce table locales displayed","code":""},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table with info on supported locales — info_locales","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View a table with info on supported locales — info_locales","text":"574 locales, means long display table provided default. trim output table size, can provide initial letter corresponding base locale ID begins_with. filter locales info table just set begins supplied letter.","code":""},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table with info on supported locales — info_locales","text":"Get table info locales supported gt.","code":"info_locales()"},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table with info on supported locales — info_locales","text":"11-4","code":""},{"path":"https://gt.rstudio.com/reference/info_locales.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"View a table with info on supported locales — info_locales","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table with info on color palettes — info_paletteer","title":"View a table with info on color palettes — info_paletteer","text":"data_color() allows us flexibly color data cells gt table, harder part process discovering choosing color palettes suitable table output. can make process much easier two ways: (1) using paletteer package, makes wide range palettes various R packages readily available, (2) calling info_paletteer() give us information table serves quick reference discrete color palettes available paletteer.","code":""},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table with info on color palettes — info_paletteer","text":"","code":"info_paletteer(color_pkgs = NULL)"},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View a table with info on color palettes — info_paletteer","text":"color_pkgs Filter specific color packages vector<character> // default: NULL (optional) vector color packages determines sets palettes displayed information table. NULL (default) discrete palettes color packages represented paletteer displayed.","code":""},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table with info on color palettes — info_paletteer","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View a table with info on color palettes — info_paletteer","text":"palettes displayed organized package palette name. values required obtaining palette (vector hexadecimal colors), paletteer::paletteer_d(). familiar names color palette packages (e.g., RColorBrewer, ggthemes, wesanderson), can narrow content information table supplying vector package names color_pkgs. Colors following color packages (supported paletteer) shown default info_paletteer(): awtools, 5 palettes dichromat, 17 palettes dutchmasters, 6 palettes ggpomological, 2 palettes ggsci, 42 palettes ggthemes, 31 palettes ghibli, 27 palettes grDevices, 1 palette jcolors, 13 palettes LaCroixColoR, 21 palettes NineteenEightyR, 12 palettes nord, 16 palettes ochRe, 16 palettes palettetown, 389 palettes pals, 8 palettes Polychrome, 7 palettes quickpalette, 17 palettes rcartocolor, 34 palettes RColorBrewer, 35 palettes Redmonder, 41 palettes wesanderson, 19 palettes yarrr, 21 palettes","code":""},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table with info on color palettes — info_paletteer","text":"Get table info just \"ggthemes\" color palette (easily accessible paletteer package).","code":"info_paletteer(color_pkgs = \"ggthemes\")"},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table with info on color palettes — info_paletteer","text":"11-5","code":""},{"path":"https://gt.rstudio.com/reference/info_paletteer.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"View a table with info on color palettes — info_paletteer","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/info_time_style.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table with info on time styles — info_time_style","title":"View a table with info on time styles — info_time_style","text":"fmt_time() lets us format time-based values convenient manner using preset styles. table generated info_time_style() provides quick reference styles, associated format names example outputs using fixed time (14:35).","code":""},{"path":"https://gt.rstudio.com/reference/info_time_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table with info on time styles — info_time_style","text":"","code":"info_time_style(locale = NULL)"},{"path":"https://gt.rstudio.com/reference/info_time_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View a table with info on time styles — info_time_style","text":"locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used displaying formatted time values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported.","code":""},{"path":"https://gt.rstudio.com/reference/info_time_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table with info on time styles — info_time_style","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_time_style.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table with info on time styles — info_time_style","text":"Get table info different time-formatting styles (used supplying number code fmt_time()).","code":"info_time_style()"},{"path":"https://gt.rstudio.com/reference/info_time_style.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table with info on time styles — info_time_style","text":"11-2","code":""},{"path":"https://gt.rstudio.com/reference/info_time_style.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"View a table with info on time styles — info_time_style","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/info_unit_conversions.html","id":null,"dir":"Reference","previous_headings":"","what":"View a table with all units that can be converted by unit_conversion() — info_unit_conversions","title":"View a table with all units that can be converted by unit_conversion() — info_unit_conversions","text":"unit_conversion() can used yield conversion factors across compatible pairs units. useful expressing values different units conversion can performed via scale_by argument available several formatting functions. calling unit_conversion(), one must supply two string-based keywords specify value's current units desired units. keywords provided table shown calling info_unit_conversions().","code":""},{"path":"https://gt.rstudio.com/reference/info_unit_conversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View a table with all units that can be converted by unit_conversion() — info_unit_conversions","text":"","code":"info_unit_conversions()"},{"path":"https://gt.rstudio.com/reference/info_unit_conversions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View a table with all units that can be converted by unit_conversion() — info_unit_conversions","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/info_unit_conversions.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View a table with all units that can be converted by unit_conversion() — info_unit_conversions","text":"Get table info available keywords unit conversions.","code":"info_unit_conversions()"},{"path":"https://gt.rstudio.com/reference/info_unit_conversions.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"View a table with all units that can be converted by unit_conversion() — info_unit_conversions","text":"11-9","code":""},{"path":"https://gt.rstudio.com/reference/info_unit_conversions.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"View a table with all units that can be converted by unit_conversion() — info_unit_conversions","text":"v0.11.0 (July 9, 2024)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/local_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for adding a local image — local_image","title":"Helper function for adding a local image — local_image","text":"can flexibly add local image (.e., image residing disk) inside table local_image() function. function provides convenient way generate HTML fragment using -disk PNG SVG. function currently HTML-based, useful HTML table output. use function inside data cells, recommended use text_transform() first. function, can specify data cells target include local_image() call within required user-defined function (fn argument). want include image places (e.g., header, within footnote text, etc.) need use local_image() within html() helper function. , function creates HTML image tag image URI embedded within. can easily experiment local PNG SVG image available gt package using test_image() function. Using , call local_image(file = test_image(type = \"png\")) evaluates : <img src=<data URI> style=\\\"height:30px;\\\"> height 30px default height chosen work well within heights table rows.","code":""},{"path":"https://gt.rstudio.com/reference/local_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for adding a local image — local_image","text":"","code":"local_image(filename, height = 30)"},{"path":"https://gt.rstudio.com/reference/local_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for adding a local image — local_image","text":"filename Path image file scalar<character> // required local path image file disk. height Height image scalar<numeric|integer> // default: 30 absolute height image table cell (\"px\" units). default, set \"30px\".","code":""},{"path":"https://gt.rstudio.com/reference/local_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for adding a local image — local_image","text":"character object HTML fragment can placed inside cell.","code":""},{"path":"https://gt.rstudio.com/reference/local_image.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for adding a local image — local_image","text":"Create tibble contains heights image pixels (one column string, numerical values), , create gt table. Use text_transform() insert local test image (PNG) image various sizes.","code":"dplyr::tibble(   pixels = px(seq(10, 35, 5)),   image = seq(10, 35, 5) ) |>   gt() |>   text_transform(     locations = cells_body(columns = image),     fn = function(x) {       local_image(         filename = test_image(type = \"png\"),         height = as.numeric(x)       )     }   )"},{"path":"https://gt.rstudio.com/reference/local_image.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper function for adding a local image — local_image","text":"9-2","code":""},{"path":"https://gt.rstudio.com/reference/local_image.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Helper function for adding a local image — local_image","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/locale.html","id":null,"dir":"Reference","previous_headings":"","what":"Localize formatting and symbols — locale","title":"Localize formatting and symbols — locale","text":"Localize formatting symbols","code":""},{"path":"https://gt.rstudio.com/reference/locale.html","id":"specify-locale","dir":"Reference","previous_headings":"","what":"Specify locale","title":"Localize formatting and symbols — locale","text":"gt(), cols_*() fmt_*() functions locale argument. can pass locale 2 letters string 4. (e.g. \"fr\" French, \"pt-BR\" Brazilian Portuguese). gt also resolves different spellings internally much possible. example \"en_GB\" work box.","code":""},{"path":"https://gt.rstudio.com/reference/locale.html","id":"range-of-action-of-locale","dir":"Reference","previous_headings":"","what":"Range of action of locale","title":"Localize formatting and symbols — locale","text":"One advantage using gt consistency using symbols currencies multiple languages two ways localize results gt. Passing globally gt(locale = \"<locale>\") localize everything possible gt() pipeline. individual fmt_() functions Localize buttons opt_interactive() affect output one specific function (override global setting). locale low precedence usually. soon override parameters, sep_mark, dec_mark, incl_space, override locale.","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/locale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Localize formatting and symbols — locale","text":"","code":"# The Spanish locale uses `.` as thousands sep (English uses ,), and # uses , as the decimal mark  # Using the locale in gt() will format automatically all output in subsequent # fmt_*() calls. exibble %>%   gt(locale = \"es-AR\") %>%   fmt_number()     num       char       fctr       date       time       datetime       currency       row       group     0,11 apricot one 2015-01-15 13:35 2018-01-01 02:22 49,95 row_1 grp_a2,22 banana two 2015-02-15 14:40 2018-02-02 14:33 17,95 row_2 grp_a33,33 coconut three 2015-03-15 15:45 2018-03-03 03:44 1,39 row_3 grp_a444,40 durian four 2015-04-15 16:50 2018-04-04 15:55 65.100,00 row_4 grp_a5.550,00 NA five 2015-05-15 17:55 2018-05-05 04:00 1.325,81 row_5 grp_bNA fig six 2015-06-15 NA 2018-06-06 16:11 13,26 row_6 grp_b777.000,00 grapefruit seven NA 19:10 2018-07-07 05:22 NA row_7 grp_b8.880.000,00 honeydew eight 2015-08-15 20:20 NA 0,44 row_8 grp_b # Only format currency as mexican peso  exibble %>%   gt(locale = \"fr\") %>%   fmt_currency(currency, locale = \"es-MX\")     num       char       fctr       date       time       datetime       currency       row       group     1.111e-01 apricot one 2015-01-15 13:35 2018-01-01 02:22 Mex$49.95 row_1 grp_a2.222e+00 banana two 2015-02-15 14:40 2018-02-02 14:33 Mex$17.95 row_2 grp_a3.333e+01 coconut three 2015-03-15 15:45 2018-03-03 03:44 Mex$1.39 row_3 grp_a4.444e+02 durian four 2015-04-15 16:50 2018-04-04 15:55 Mex$65,100.00 row_4 grp_a5.550e+03 NA five 2015-05-15 17:55 2018-05-05 04:00 Mex$1,325.81 row_5 grp_bNA fig six 2015-06-15 NA 2018-06-06 16:11 Mex$13.26 row_6 grp_b7.770e+05 grapefruit seven NA 19:10 2018-07-07 05:22 NA row_7 grp_b8.880e+06 honeydew eight 2015-08-15 20:20 NA Mex$0.44 row_8 grp_b # will use sep_mark provided exibble %>%   gt(locale = \"fr\") %>%   fmt_currency(currency, sep_mark = \"\", locale = \"es-MX\")     num       char       fctr       date       time       datetime       currency       row       group     1.111e-01 apricot one 2015-01-15 13:35 2018-01-01 02:22 Mex$49.95 row_1 grp_a2.222e+00 banana two 2015-02-15 14:40 2018-02-02 14:33 Mex$17.95 row_2 grp_a3.333e+01 coconut three 2015-03-15 15:45 2018-03-03 03:44 Mex$1.39 row_3 grp_a4.444e+02 durian four 2015-04-15 16:50 2018-04-04 15:55 Mex$65,100.00 row_4 grp_a5.550e+03 NA five 2015-05-15 17:55 2018-05-05 04:00 Mex$1,325.81 row_5 grp_bNA fig six 2015-06-15 NA 2018-06-06 16:11 Mex$13.26 row_6 grp_b7.770e+05 grapefruit seven NA 19:10 2018-07-07 05:22 NA row_7 grp_b8.880e+06 honeydew eight 2015-08-15 20:20 NA Mex$0.44 row_8 grp_b# Use your imagination, and mix and match."},{"path":"https://gt.rstudio.com/reference/location-helper.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to target cells at locations — location-helper","title":"Helper to target cells at locations — location-helper","text":"listing locations corresponding roughly top bottom table: cells_title(): targets table title table subtitle depending value given groups argument (\"title\" \"subtitle\"). cells_stubhead(): targets stubhead location, cell available stub; label location can created using tab_stubhead(). cells_column_spanners()*: targets spanner column labels spanners argument; spanner column labels appear column labels. cells_column_labels()*: targets column labels columns argument. cells_row_groups()*: targets row group labels available row groups using groups argument. cells_stub()*: targets row labels table stub using rows argument. cells_body()*: targets data cells table body using intersections columns rows. cells_summary(): targets summary cells table body using groups argument intersections columns rows. cells_grand_summary(): targets cells table's grand summary using intersections columns rows cells_stub_summary(): targets summary row labels table stub using groups rows arguments. cells_stub_grand_summary(): targets grand summary row labels table stub using rows argument. cells_footnotes(): targets footnotes table footer (used tab_footnote()). cells_source_notes(): targets source notes table footer (used tab_footnote()). * functions usable text_*() functions.","code":""},{"path":"https://gt.rstudio.com/reference/location-helper.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Helper to target cells at locations — location-helper","text":"using location helper functions appropriate function locations argument (e.g., tab_style()), multiple locations can targeted enclosing several cells_*() helper functions list() (e.g., list(cells_body(), cells_grand_summary())).","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/md.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpret input text as Markdown-formatted text — md","title":"Interpret input text as Markdown-formatted text — md","text":"Markdown text can used certain places gt table, wherever new text defined (e.g., footnotes, source notes, table title, etc.). Using Markdown advantageous styling text since rendered correctly output format gt table. also html() helper allows use HTML exclusively (tables expressly meant HTML output) md() allows ; get use Markdown plus HTML fragments time.","code":""},{"path":"https://gt.rstudio.com/reference/md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpret input text as Markdown-formatted text — md","text":"","code":"md(text)"},{"path":"https://gt.rstudio.com/reference/md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpret input text as Markdown-formatted text — md","text":"text Markdown text scalar<character> // required text understood contain Markdown formatting.","code":""},{"path":"https://gt.rstudio.com/reference/md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpret input text as Markdown-formatted text — md","text":"character object class from_markdown. tagged Markdown text undergo conversion desired output context.","code":""},{"path":"https://gt.rstudio.com/reference/md.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpret input text as Markdown-formatted text — md","text":"Use exibble dataset create gt table. adding title tab_header(), use md() helper signify gt using Markdown formatting.","code":"exibble |>   dplyr::select(currency, char) |>   gt() |>   tab_header(title = md(\"Using *Markdown*\"))"},{"path":"https://gt.rstudio.com/reference/md.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Interpret input text as Markdown-formatted text — md","text":"8-1","code":""},{"path":"https://gt.rstudio.com/reference/md.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Interpret input text as Markdown-formatted text — md","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/metro.html","id":null,"dir":"Reference","previous_headings":"","what":"The stations of the Paris Metro — metro","title":"The stations of the Paris Metro — metro","text":"dataset information 320 Paris Metro stations June 2024. record represents station, describing Metro lines serviced station, connections available, annual passenger volumes. Basic location information provided station terms reside municipal level, , latitude/longitude coordinate values. system 16 lines (numbered 1 14, two additional lines: 3bis 7bis) covers 200 kilometers track. Metro runs standard gauge tracks (1,435 mm) operates using variety rolling stock, including rubber-tired trains steel-wheeled trains (far common). Metro operated RATP, also operates transit systems region, including buses, trams, RER. RER important component region's transit infrastructure, several RER stations connectivity Metro. integration allows passengers transfer two systems seamlessly. Metro also connections Transilien rail network, tramway stations, several major train stations (e.g., Gare du Nord, Gare de l'Est, etc.), many bus lines.","code":""},{"path":"https://gt.rstudio.com/reference/metro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The stations of the Paris Metro — metro","text":"","code":"metro"},{"path":"https://gt.rstudio.com/reference/metro.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The stations of the Paris Metro — metro","text":"tibble 320 rows 11 variables: name name station. caption cases, station caption might describe nearby place interest. NA caption station name. lines Metro lines associated station. character-based, comma-separated series line names. connect_rer Station connections RER. RER system five lines (, B, C, D, E) 257 stations several interchanges Metro. connect_tram Connections tramway lines. system twelve lines operation (T1, T2, T3a, T3b, T4, T5, T6, T7, T8, T9, T11, T13) 235 stations. connect_transilien Connections Transilien lines. system eight lines operation (H, J, K, L, N, P, R, U). connect_other connections transportation infrastructure regional, intercity, night, high-speed trains (typically railway stations). latitude, longitude location station, given latitude longitude values decimal degrees. location arrondissement Paris municipality station resides. stations located borders, grouping locations presented comma-separated series passengers total number Metro station entries 2021. newest stations Metro system data, thus show NA values.","code":""},{"path":"https://gt.rstudio.com/reference/metro.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"The stations of the Paris Metro — metro","text":"DATA-10","code":""},{"path":"https://gt.rstudio.com/reference/metro.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"The stations of the Paris Metro — metro","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/metro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The stations of the Paris Metro — metro","text":"","code":"dplyr::glimpse(metro) #> Rows: 320 #> Columns: 11 #> $ name               <chr> \"Argentine\", \"Bastille\", \"Bérault\", \"Champs-Élysées… #> $ caption            <chr> NA, NA, NA, \"Grand Palais\", NA, NA, NA, NA, NA, NA,… #> $ lines              <chr> \"1\", \"1, 5, 8\", \"1\", \"1, 13\", \"1, 2, 6\", \"1\", \"1, 4… #> $ connect_rer        <chr> NA, NA, NA, NA, \"A\", NA, \"A, B, D\", NA, NA, NA, \"A,… #> $ connect_tramway    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ connect_transilien <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"R\", NA, NA… #> $ connect_other      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"TGV, TGV L… #> $ passengers         <int> 2079212, 8069243, 2106827, 1909005, 4291663, 361773… #> $ latitude           <dbl> 48.87528, 48.85308, 48.84528, 48.86750, 48.87389, 4… #> $ longitude          <dbl> 2.290000, 2.369077, 2.428333, 2.313500, 2.295000, 2… #> $ location           <chr> \"Paris 16th, Paris 17th\", \"Paris 4th, Paris 11th, P…"},{"path":"https://gt.rstudio.com/reference/nanoplot_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Supply nanoplot options to cols_nanoplot() — nanoplot_options","title":"Supply nanoplot options to cols_nanoplot() — nanoplot_options","text":"using cols_nanoplot(), defaults generated nanoplots can modified nanoplot_options() within options argument.","code":""},{"path":"https://gt.rstudio.com/reference/nanoplot_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Supply nanoplot options to cols_nanoplot() — nanoplot_options","text":"","code":"nanoplot_options(   data_point_radius = NULL,   data_point_stroke_color = NULL,   data_point_stroke_width = NULL,   data_point_fill_color = NULL,   data_line_type = NULL,   data_line_stroke_color = NULL,   data_line_stroke_width = NULL,   data_area_fill_color = NULL,   data_bar_stroke_color = NULL,   data_bar_stroke_width = NULL,   data_bar_fill_color = NULL,   data_bar_negative_stroke_color = NULL,   data_bar_negative_stroke_width = NULL,   data_bar_negative_fill_color = NULL,   reference_line_color = NULL,   reference_area_fill_color = NULL,   vertical_guide_stroke_color = NULL,   vertical_guide_stroke_width = NULL,   show_data_points = NULL,   show_data_line = NULL,   show_data_area = NULL,   show_reference_line = NULL,   show_reference_area = NULL,   show_vertical_guides = NULL,   show_y_axis_guide = NULL,   interactive_data_values = NULL,   y_val_fmt_fn = NULL,   y_axis_fmt_fn = NULL,   y_ref_line_fmt_fn = NULL,   currency = NULL )"},{"path":"https://gt.rstudio.com/reference/nanoplot_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Supply nanoplot options to cols_nanoplot() — nanoplot_options","text":"data_point_radius Radius data points scalar<numeric>|vector<numeric> // default: NULL (optional) data_point_radius option lets set radius data points. default set 10. Individual radius values can set using vector numeric values; however, vector provided must match number data points. data_point_stroke_color Color data points scalar<character>|vector<character> // default: NULL (optional) default stroke color data points \"#FFFFFF\" (\"white\"). works well visible data line combined data points darker fill color. stroke color can modified data_point_stroke_color data points supplying single color value. vector colors, data point's stroke color can changed (ensure vector length matches number data points). data_point_stroke_width Width surrounding line data points scalar<numeric>|vector<numeric> // default: NULL (optional) width outside stroke data points can modified data_point_stroke_width option. default, value 4 ('4px') used. data_point_fill_color Fill color data points scalar<character>|vector<character> // default: NULL (optional) default, data points fill color \"#FF0000\" (\"red\"). can changed data points providing different color data_point_fill_color. , vector different colors can supplied long length equal number data points; fill color values applied order left right. data_line_type Type data line: curved straight scalar<character> // default: NULL (optional) can accept either \"curved\" \"straight\". Curved lines recommended nanoplot less 30 points data points evenly spaced. cases, straight lines might present better. data_line_stroke_color Color data line scalar<character> // default: NULL (optional) color data line can modified default \"#4682B4\" (\"steelblue\") color supplying color data_line_stroke_color option. data_line_stroke_width Width data line scalar<numeric> // default: NULL (optional) width connecting data line can modified data_line_stroke_width option. default, value 4 ('4px') used. data_area_fill_color Fill color data-point-bounded area scalar<character> // default: NULL (optional) fill color area bounds data points line plot. default \"#FF0000\" (\"red\") can changed providing color value data_area_fill_color. data_bar_stroke_color Color data bar's outside line scalar<character> // default: NULL (optional) color stroke used data bars can modified default \"#3290CC\" color supplying color data_bar_stroke_color option. data_bar_stroke_width Width data bar's outside line scalar<numeric> // default: NULL (optional) width stroke used data bars can modified data_bar_stroke_width option. default, value 4 ('4px') used. data_bar_fill_color Fill color data bars scalar<character>|vector<character> // default: NULL (optional) default, data bars fill color \"#3FB5FF\". can changed data bars providing different color data_bar_fill_color. , vector different colors can supplied long length equal number data bars; fill color values applied order left right. data_bar_negative_stroke_color Stroke color negative values scalar<character> // default: NULL (optional) color stroke used data bars negative values. default color \"#CC3243\" can changed supplying color value data_bar_negative_stroke_color option. data_bar_negative_stroke_width Stroke width negative values scalar<numeric> // default: NULL (optional) width stroke used negative value data bars. default data_bar_stroke_width value 4 ('4px'). can changed giving numeric value data_bar_negative_stroke_width option. data_bar_negative_fill_color Fill color negative values scalar<character>|vector<character> // default: NULL (optional) default, negative data bars fill color \"#D75A68\". can however changed providing color value data_bar_negative_fill_color option. reference_line_color Color reference line scalar<character> // default: NULL (optional) reference line color \"#75A8B0\" set appear. color can changed providing single color value reference_line_color. reference_area_fill_color Fill color reference area scalar<character> // default: NULL (optional) reference area defined visible default fill color \"#A6E6F2\". can modified declaring color value reference_area_fill_color option. vertical_guide_stroke_color Color vertical guides scalar<character> // default: NULL (optional) Vertical guides appear hovering vicinity data points. default color \"#911EB4\" (strong magenta color) fill opacity value 0.4 automatically applied . However, base color can changed vertical_guide_stroke_color option. vertical_guide_stroke_width Line widths vertical guides scalar<numeric> // default: NULL (optional) vertical guide's stroke width, default, relatively large 12 ('12px'). modifiable setting different value vertical_guide_stroke_width option. show_data_points data points shown? scalar<logical> // default: NULL (optional) default, data points nanoplot shown layer can hidden setting show_data_points FALSE. show_data_line data line shown? scalar<logical> // default: NULL (optional) data line connects data points together shown default. data line layer can hidden setting show_data_line FALSE. show_data_area data-point-bounded area shown? scalar<logical> // default: NULL (optional) data area layer adjacent data points data line. shown default can hidden show_data_area = FALSE. show_reference_line reference line shown? scalar<logical> // default: NULL (optional) layer horizontal reference line appears underneath data points data line. Like vertical guides, hovering reference show value. reference line (available) shown default can hidden setting show_reference_line FALSE. show_reference_area reference area shown? scalar<logical> // default: NULL (optional) reference area appears bottom layer stack, available (.e., defined cols_nanoplot()). shown default case can hidden using show_reference_area = FALSE. show_vertical_guides vertical guides? scalar<logical> // default: NULL (optional) Vertical guides appear hovering data points. hidden layer active default can deactivated using show_vertical_guides = FALSE. show_y_axis_guide y-axis guide? scalar<logical> // default: NULL (optional) y-axis guide appear hovering far left side nanoplot. hidden layer active default can deactivated using show_y_axis_guide = FALSE. interactive_data_values data values interactively shown? scalar<logical> // default: NULL (optional) default, numeric data values shown user interacts certain regions nanoplot. values may numerous (.e., clutter display visible) can argued values secondary presentation. However, types plots (like horizontal bar plots), persistent display values alongside plot marks may desirable. setting interactive_data_values = FALSE can opt always displaying data values alongside plot components. y_val_fmt_fn, y_axis_fmt_fn, y_ref_line_fmt_fn Custom formatting y values function // default: NULL (optional) providing function y_val_fmt_fn, y_axis_fmt_fn, y_ref_line_fmt_fn customized formatting y values associated data points/bars, y-axis labels, reference line can performed. currency Define values currencies specific type scalar<character>|obj:<gt_currency> // default: NULL (optional) values displayed currency values, supply either: (1) 3-letter currency code (e.g., \"USD\" U.S. Dollars, \"EUR\" Euro currency), (2) common currency name (e.g., \"dollar\", \"pound\", \"yen\", etc.), (3) invocation currency() helper function specifying custom currency (string vary across output contexts). Use info_currencies() get information table valid currency codes, examples , first two cases.","code":""},{"path":"https://gt.rstudio.com/reference/nanoplot_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Supply nanoplot options to cols_nanoplot() — nanoplot_options","text":"list object class nanoplot_options.","code":""},{"path":"https://gt.rstudio.com/reference/nanoplot_options.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Supply nanoplot options to cols_nanoplot() — nanoplot_options","text":"8-8","code":""},{"path":"https://gt.rstudio.com/reference/nanoplot_options.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Supply nanoplot options to cols_nanoplot() — nanoplot_options","text":"v0.10.0 (October 7, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/nuclides.html","id":null,"dir":"Reference","previous_headings":"","what":"Nuclide data — nuclides","title":"Nuclide data — nuclides","text":"nuclides dataset contains information known nuclides, providing data nuclear structure decay modes across 118 elements. data natural abundances, atomic mass, spin, half-life, . typical users dataset include researchers fields nuclear physics, radiochemistry, nuclear medicine.","code":""},{"path":"https://gt.rstudio.com/reference/nuclides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nuclide data — nuclides","text":"","code":"nuclides"},{"path":"https://gt.rstudio.com/reference/nuclides.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Nuclide data — nuclides","text":"tibble 3,383 rows 29 variables: nuclide symbol nuclide. z, n number protons neutrons. element element symbol. radius, radius_uncert charge radius associated uncertainty. units fm. abundance, abundance_uncert abundance stable isotope mole fraction (relation stable isotopes element). Values provided nuclide is_stable TRUE. is_stable nuclide stable isotope? half_life, half_life_uncert nuclide's half life represented seconds. isospin isospin, quantum number related quark content particle. decay_1, decay_2, decay_3 1st, 2nd, 3rd decay modes. decay_1_pct, decay_1_pct_uncert, decay_2_pct, decay_2_pct_uncert, decay_3_pct, decay_3_pct_uncert branching proportions 1st, 2nd, 3rd decays (along uncertainty values). magnetic_dipole, magnetic_dipole_uncert magnetic dipole associated uncertainty. Expressed units micro N, nuclear magneton values. electric_quadrupole, electric_quadrupole_uncert electric quadrupole associated uncertainty. units barn (b). atomic_mass, atomic_mass_uncert atomic mass associated uncertainty. units micro AMU. mass_excess, mass_excess_uncert mass excess associated uncertainty. units keV.","code":""},{"path":"https://gt.rstudio.com/reference/nuclides.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"Nuclide data — nuclides","text":"DATA-16","code":""},{"path":"https://gt.rstudio.com/reference/nuclides.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"Nuclide data — nuclides","text":"v0.11.0 (July 9, 2024)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/nuclides.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nuclide data — nuclides","text":"","code":"dplyr::glimpse(nuclides) #> Rows: 3,383 #> Columns: 29 #> $ nuclide                    <chr> \"^{1}_{1}H0\", \"^{2}_{1}H1\", \"^{3}_{1}H2\", \"… #> $ z                          <int> 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2… #> $ n                          <int> 0, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8… #> $ element                    <chr> \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"He\", \"H… #> $ radius                     <dbl> 0.8783, 2.1421, 1.7591, NA, NA, NA, NA, 1.9… #> $ radius_uncert              <dbl> 0.0086, 0.0088, 0.0363, NA, NA, NA, NA, 0.0… #> $ abundance                  <dbl> 0.999855, 0.000145, NA, NA, NA, NA, NA, 0.0… #> $ abundance_uncert           <dbl> 0.000078, 0.000078, NA, NA, NA, NA, NA, 0.0… #> $ is_stable                  <lgl> TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ half_life                  <dbl> NA, NA, 3.887813e+08, NA, 8.608259e-23, 2.9… #> $ half_life_uncert           <dbl> NA, NA, 6.311385e+05, NA, 6.496799e-24, 8.3… #> $ isospin                    <chr> NA, NA, NA, \"1\", NA, NA, NA, NA, \"0\", \"1/2\"… #> $ decay_1                    <chr> NA, NA, \"B-\", \"N\", \"2N\", NA, NA, NA, NA, \"N… #> $ decay_1_pct                <dbl> NA, NA, 1, 1, 1, NA, NA, NA, NA, NA, 1, NA,… #> $ decay_1_pct_uncert         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ decay_2                    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ decay_2_pct                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ decay_2_pct_uncert         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ decay_3                    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ decay_3_pct                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ decay_3_pct_uncert         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ magnetic_dipole            <dbl> 2.7928474, 0.8574382, 2.9789625, NA, NA, NA… #> $ magnetic_dipole_uncert     <dbl> 9.0e-09, 5.0e-09, 1.4e-08, NA, NA, NA, NA, … #> $ electric_quadrupole        <dbl> NA, 0.0028578, NA, NA, NA, NA, NA, NA, NA, … #> $ electric_quadrupole_uncert <dbl> NA, 3e-07, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ atomic_mass                <dbl> 1007825, 2014102, 3016049, 4026432, 5035311… #> $ atomic_mass_uncert         <dbl> 0.000014, 0.000015, 0.000080, 107.354000, 9… #> $ mass_excess                <dbl> 7288.971, 13135.723, 14949.811, 24621.129, … #> $ mass_excess_uncert         <dbl> 0.000013, 0.000015, 0.000080, 100.000000, 8…"},{"path":"https://gt.rstudio.com/reference/opt_align_table_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to align the table header — opt_align_table_header","title":"Option to align the table header — opt_align_table_header","text":"default, table header added gt table center alignment title subtitle elements. function allows us easily set horizontal alignment title subtitle left right using \"align\" argument. function serves convenient shortcut <gt_tbl> |> tab_options(heading.align = <align>).","code":""},{"path":"https://gt.rstudio.com/reference/opt_align_table_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to align the table header — opt_align_table_header","text":"","code":"opt_align_table_header(data, align = c(\"left\", \"center\", \"right\"))"},{"path":"https://gt.rstudio.com/reference/opt_align_table_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to align the table header — opt_align_table_header","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. align Header alignment singl-kw:[left|center|right] // default: \"left\" alignment title subtitle elements table header. Options \"left\" (default), \"center\", \"right\".","code":""},{"path":"https://gt.rstudio.com/reference/opt_align_table_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to align the table header — opt_align_table_header","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_align_table_header.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to align the table header — opt_align_table_header","text":"Use exibble dataset create gt table number table parts added (using functions like summary_rows(), grand_summary_rows(), ). Following , align header contents (consisting title subtitle) left opt_align_table_header() function.","code":"exibble |>   gt(rowname_col = \"row\", groupname_col = \"group\") |>   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = c(\"min\", \"max\")   ) |>   grand_summary_rows(     columns = currency,     fns = total ~ sum(., na.rm = TRUE)   ) |>   tab_source_note(source_note = \"This is a source note.\") |>   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) |>   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) |>   opt_align_table_header(align = \"left\")"},{"path":"https://gt.rstudio.com/reference/opt_align_table_header.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to align the table header — opt_align_table_header","text":"10-6","code":""},{"path":"https://gt.rstudio.com/reference/opt_align_table_header.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Option to align the table header — opt_align_table_header","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_all_caps.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to use all caps in select table locations — opt_all_caps","title":"Option to use all caps in select table locations — opt_all_caps","text":"Sometimes -capitalized look suitable table. opt_all_caps() function, can transform characters column labels, stub, row groups way (control locations transformed). function serves convenient shortcut <gt_tbl> |> tab_options(<location>.text_transform = \"uppercase\", <location>.font.size = pct(80), <location>.font.weight = \"bolder\") (locations selected).","code":""},{"path":"https://gt.rstudio.com/reference/opt_all_caps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to use all caps in select table locations — opt_all_caps","text":"","code":"opt_all_caps(   data,   all_caps = TRUE,   locations = c(\"column_labels\", \"stub\", \"row_group\") )"},{"path":"https://gt.rstudio.com/reference/opt_all_caps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to use all caps in select table locations — opt_all_caps","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. all_caps Use -caps transformation scalar<logical> // default: TRUE logical value indicate whether text transformation caps performed (TRUE, default) reset default values (FALSE) locations targeted. locations Locations target mult-kw:[column_labels|stub|row_group] // default: c(\"column_labels\", \"stub\", \"row_group\") locations undergo text transformation? default includes \"column_labels\", \"stub\", \"row_group\" locations. However, just choose one two .","code":""},{"path":"https://gt.rstudio.com/reference/opt_all_caps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to use all caps in select table locations — opt_all_caps","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_all_caps.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to use all caps in select table locations — opt_all_caps","text":"Use exibble dataset create gt table number table parts added (using functions like summary_rows(), grand_summary_rows(), ). Following , ensure text column labels, stub, row groups transformed caps using opt_all_caps().","code":"exibble |>   gt(rowname_col = \"row\", groupname_col = \"group\") |>   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = c(\"min\", \"max\")   ) |>   grand_summary_rows(     columns = currency,     fns = total ~ sum(., na.rm = TRUE)   ) |>   tab_source_note(source_note = \"This is a source note.\") |>   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) |>   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) |>   opt_all_caps()"},{"path":"https://gt.rstudio.com/reference/opt_all_caps.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to use all caps in select table locations — opt_all_caps","text":"10-9","code":""},{"path":"https://gt.rstudio.com/reference/opt_all_caps.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Option to use all caps in select table locations — opt_all_caps","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_css.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to add custom CSS for the table — opt_css","title":"Option to add custom CSS for the table — opt_css","text":"opt_css() makes possible add CSS gt table.  CSS added compiled CSS gt generates automatically object transformed HTML output table. can supply css vector lines single string.","code":""},{"path":"https://gt.rstudio.com/reference/opt_css.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to add custom CSS for the table — opt_css","text":"","code":"opt_css(data, css, add = TRUE, allow_duplicates = FALSE)"},{"path":"https://gt.rstudio.com/reference/opt_css.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to add custom CSS for the table — opt_css","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. css CSS declarations scalar<character> // required CSS include part rendered table's <style> element. add Add existing CSS scalar<logical> // default: TRUE TRUE, default, CSS added already-defined CSS (typically previous calls opt_table_font(), opt_css(), , directly setting CSS table.additional_css value tab_options()). set FALSE, CSS provided replace previously-stored CSS. allow_duplicates Allow CSS duplication scalar<logical> // default: FALSE FALSE (default), CSS provided added (provided add = TRUE) seen already-defined CSS.","code":""},{"path":"https://gt.rstudio.com/reference/opt_css.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to add custom CSS for the table — opt_css","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_css.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to add custom CSS for the table — opt_css","text":"use exibble dataset create simple, two-column gt table (keeping num currency columns). use opt_css() function, can insert CSS rulesets string. need ensure table ID set explicitly (done ID value \"one\", setting gt() function).","code":"exibble |>   dplyr::select(num, currency) |>   gt(id = \"one\") |>   fmt_currency(     columns = currency,     currency = \"HKD\"   ) |>   fmt_scientific(columns = num) |>   opt_css(     css = \"     #one .gt_table {       background-color: skyblue;     }     #one .gt_row {       padding: 20px 30px;     }     #one .gt_col_heading {       text-align: center !important;     }     \"   )"},{"path":"https://gt.rstudio.com/reference/opt_css.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to add custom CSS for the table — opt_css","text":"10-13","code":""},{"path":"https://gt.rstudio.com/reference/opt_css.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Option to add custom CSS for the table — opt_css","text":"v0.2.2 (August 5, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to modify the set of footnote marks — opt_footnote_marks","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"Alter footnote marks footnotes may present table. Either vector marks can provided (including Unicode characters), , specific keyword used signify preset sequence. function serves shortcut using tab_options(footnotes.marks = {marks})","code":""},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"","code":"opt_footnote_marks(data, marks = \"numbers\")"},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. marks Sequence footnote marks vector<character> // default: \"numbers\" Either character vector length greater 1 (represent series marks) single keyword represents preset sequence marks. valid keywords : \"numbers\" (numeric marks), \"letters\" \"LETTERS\" (lowercase uppercase alphabetic marks), \"standard\" (traditional set four symbol marks), \"extended\" (adds two symbols standard set).","code":""},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":"specification-of-footnote-marks","dir":"Reference","previous_headings":"","what":"Specification of footnote marks","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"can supply vector represent series marks. series footnote marks recycled usage goes beyond length set. cycle, marks simply doubled, tripled, (e.g., * -> ** -> ***). option exists providing keywords certain types footnote marks. keywords : \"numbers\": numeric marks, begin 1 marks subject recycling behavior \"letters\": minuscule alphabetic marks, internally uses letters vector contains 26 lowercase letters Roman alphabet \"LETTERS\": majuscule alphabetic marks, using LETTERS vector 26 uppercase letters Roman alphabet \"standard\": symbolic marks, four symbols total \"extended\": symbolic marks, extends standard set adding two symbols, making six symbolic marks : (1) Asterisk, (2) Dagger, (3) Double Dagger, (4) Section Sign, (5) Double Vertical Line, (6) Paragraph Sign; \"standard\" set first four, \"extended\" contains .","code":""},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"Use summarized version sza dataset create gt table, adding three footnotes (three calls tab_footnote()). can modify footnote marks use opt_footnote_marks() function. keyword \"standard\" get four commonly-used typographic marks.","code":"sza |>   dplyr::filter(latitude == 30) |>   dplyr::group_by(tst) |>   dplyr::summarize(     SZA.Max = if (       all(is.na(sza))) {       NA     } else {       max(sza, na.rm = TRUE)     },     SZA.Min = if (       all(is.na(sza))) {       NA     } else {       min(sza, na.rm = TRUE)     },     .groups = \"drop\"   ) |>   gt(rowname_col = \"tst\") |>   tab_spanner_delim(delim = \".\") |>   sub_missing(     columns = everything(),     missing_text = \"90+\"   ) |>   tab_stubhead(label = \"TST\") |>   tab_footnote(     footnote = \"True solar time.\",     locations = cells_stubhead()   ) |>   tab_footnote(     footnote = \"Solar zenith angle.\",     locations = cells_column_spanners(       spanners = \"spanner-SZA.Max\"     )   ) |>   tab_footnote(     footnote = \"The Lowest SZA.\",     locations = cells_stub(rows = \"1200\")   ) |>   opt_footnote_marks(marks = \"standard\")"},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"10-3","code":""},{"path":"https://gt.rstudio.com/reference/opt_footnote_marks.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Option to modify the set of footnote marks — opt_footnote_marks","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_footnote_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to specify the formatting of footnote marks — opt_footnote_spec","title":"Option to specify the formatting of footnote marks — opt_footnote_spec","text":"Modify way footnote marks formatted. can performed footnote marks alight targeted text cells various locations table footnote marks appear table footer. simple specification string can provided either types marks opt_footnote_spec() . function serves shortcut using either tab_options(footnotes.spec_ref = {spec}) tab_options(footnotes.spec_ftr = {spec}).","code":""},{"path":"https://gt.rstudio.com/reference/opt_footnote_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to specify the formatting of footnote marks — opt_footnote_spec","text":"","code":"opt_footnote_spec(data, spec_ref = NULL, spec_ftr = NULL)"},{"path":"https://gt.rstudio.com/reference/opt_footnote_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to specify the formatting of footnote marks — opt_footnote_spec","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. spec_ref, spec_ftr Specifications formatting footnote marks scalar<character> // default: NULL (optional) Specification footnote marks behaving footnote references marks footer section table. string containing spec characters. default spec string \"^\", superscript text set italics.","code":""},{"path":"https://gt.rstudio.com/reference/opt_footnote_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to specify the formatting of footnote marks — opt_footnote_spec","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_footnote_spec.html","id":"specification-rules-for-the-formatting-of-footnote-marks","dir":"Reference","previous_headings":"","what":"Specification rules for the formatting of footnote marks","title":"Option to specify the formatting of footnote marks — opt_footnote_spec","text":"footnote spec consists string containing control characters formatting. every type formatting makes sense footnote marks specification purposefully constrained following: superscript text (\"^\" control character) regular-sized text residing baseline bold text (\"b\"), italicized text (\"\"), unstyled text (use either \"b\" \"\" control characters) enclosure parentheses (use \"(\" / \")\") square brackets (\"[\" / \"]\") period following mark (using \".\"); commonly used table footer aforementioned control characters , instance, format footnote marks superscript text bold type \"^b\". might want marks footer regular-sized text parentheses, spec either \"()\" \"(x)\" (can optionally use \"x\" helpful placeholder marks).","code":""},{"path":"https://gt.rstudio.com/reference/opt_footnote_spec.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to specify the formatting of footnote marks — opt_footnote_spec","text":"Use modified version sp500 dataset create gt table row labels. add two footnotes using tab_footnote() function. can call opt_footnote_spec() specify marks footnote reference superscripts bold, , marks footer section enclosed parentheses.","code":"sp500 |>   dplyr::filter(date >= \"1987-10-14\" & date <= \"1987-10-25\") |>   dplyr::select(date, open, close, volume) |>   dplyr::mutate(difference = close - open) |>   dplyr::mutate(change = (close - open) / open) |>   dplyr::mutate(day = vec_fmt_datetime(date, format = \"E\")) |>   dplyr::arrange(-dplyr::row_number()) |>   gt(rowname_col = \"date\") |>   fmt_currency() |>   fmt_number(columns = volume, suffixing = TRUE) |>   fmt_percent(columns = change) |>   cols_move_to_start(columns = day) |>   cols_width(     stub() ~ px(130),     day ~ px(50),     everything() ~ px(100)   ) |>   tab_footnote(     footnote = \"Commerce report on trade deficit.\",     locations = cells_stub(rows = 1)   ) |>   tab_footnote(     footnote = \"Black Monday market crash, representing the greatest     one-day percentage decline in U.S. stock market history.\",     locations = cells_body(columns = change, rows = change < -0.15)   ) |>   opt_footnote_spec(spec_ref = \"^xb\", spec_ftr = \"(x)\")"},{"path":"https://gt.rstudio.com/reference/opt_footnote_spec.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to specify the formatting of footnote marks — opt_footnote_spec","text":"10-4","code":""},{"path":"https://gt.rstudio.com/reference/opt_footnote_spec.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Option to specify the formatting of footnote marks — opt_footnote_spec","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_horizontal_padding.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to expand or contract horizontal padding — opt_horizontal_padding","title":"Option to expand or contract horizontal padding — opt_horizontal_padding","text":"Increase decrease horizontal padding throughout locations gt table use scale factor, defined real number 0 3. function serves shortcut setting following eight options tab_options(): heading.padding.horizontal column_labels.padding.horizontal data_row.padding.horizontal row_group.padding.horizontal summary_row.padding.horizontal grand_summary_row.padding.horizontal footnotes.padding.horizontal source_notes.padding.horizontal","code":""},{"path":"https://gt.rstudio.com/reference/opt_horizontal_padding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to expand or contract horizontal padding — opt_horizontal_padding","text":"","code":"opt_horizontal_padding(data, scale = 1)"},{"path":"https://gt.rstudio.com/reference/opt_horizontal_padding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to expand or contract horizontal padding — opt_horizontal_padding","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. scale Scale factor scalar<numeric|integer>(0>=val>=3) // default: 1 scale factor horizontal padding adjusted. Must number 0 3.","code":""},{"path":"https://gt.rstudio.com/reference/opt_horizontal_padding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to expand or contract horizontal padding — opt_horizontal_padding","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_horizontal_padding.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to expand or contract horizontal padding — opt_horizontal_padding","text":"Use exibble dataset create gt table number table parts added (using functions like summary_rows(), grand_summary_rows(), ). Following , increase amount horizontal padding across entire table opt_horizontal_padding(). Using scale value 3 (default 1) means horizontal space greatly increased, resulting spacious table.","code":"exibble |>   gt(rowname_col = \"row\", groupname_col = \"group\") |>   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = c(\"min\", \"max\")   ) |>   grand_summary_rows(     columns = currency,     fns = total ~ sum(., na.rm = TRUE)   ) |>   tab_source_note(source_note = \"This is a source note.\") |>   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) |>   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) |>   opt_horizontal_padding(scale = 3)"},{"path":"https://gt.rstudio.com/reference/opt_horizontal_padding.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to expand or contract horizontal padding — opt_horizontal_padding","text":"10-8","code":""},{"path":"https://gt.rstudio.com/reference/opt_horizontal_padding.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Option to expand or contract horizontal padding — opt_horizontal_padding","text":"v0.4.0 (February 15, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to put interactive elements in an HTML table — opt_interactive","title":"Option to put interactive elements in an HTML table — opt_interactive","text":"default, gt table rendered HTML essentially 'static' table. However, can make 'interactive' configure interactive HTML options opt_interactive() function. Making HTML table interactive entails enabling controls pagination, global search, filtering, sorting, . function serves shortcut setting following options tab_options(): ihtml.active ihtml.use_pagination ihtml.use_pagination_info ihtml.use_sorting ihtml.use_search ihtml.use_filters ihtml.use_resizers ihtml.use_highlight ihtml.use_compact_mode ihtml.use_page_size_select ihtml.page_size_default ihtml.page_size_values ihtml.pagination_type ihtml.height ihtml.selection_mode","code":""},{"path":"https://gt.rstudio.com/reference/opt_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to put interactive elements in an HTML table — opt_interactive","text":"","code":"opt_interactive(   data,   active = TRUE,   use_pagination = TRUE,   use_pagination_info = TRUE,   use_sorting = TRUE,   use_search = FALSE,   use_filters = FALSE,   use_resizers = FALSE,   use_highlight = FALSE,   use_compact_mode = FALSE,   use_text_wrapping = TRUE,   use_page_size_select = FALSE,   page_size_default = 10,   page_size_values = c(10, 25, 50, 100),   pagination_type = c(\"numbers\", \"jump\", \"simple\"),   height = \"auto\",   selection_mode = NULL )"},{"path":"https://gt.rstudio.com/reference/opt_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to put interactive elements in an HTML table — opt_interactive","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. active Display interactive HTML table scalar<logical> // default: TRUE active option either enable disable interactive features HTML table. individual features interactive HTML table controlled options. use_pagination Display pagination controls scalar<logical> // default: TRUE option using pagination controls (table body). default, TRUE allow use page table content. use_pagination_info Display pagination info scalar<logical> // default: TRUE use_pagination TRUE use_pagination_info option can used display informational text regarding current page view (set TRUE default). use_sorting Provide column sorting controls scalar<logical> // default: TRUE option provides controls sorting column values. default, TRUE. use_search Provide global search field scalar<logical> // default: FALSE use_search option places search field globally filtering rows requested content. default, FALSE. use_filters Display filtering fields scalar<logical> // default: FALSE use_filters option places search fields column header allows filtering column. default, FALSE. use_resizers Allow column resizing scalar<logical> // default: FALSE option allows interactive resizing columns. default, FALSE. use_highlight Enable row highlighting hover scalar<logical> // default: FALSE use_highlight option highlights individual rows upon hover. default, FALSE. use_compact_mode Use compact mode scalar<logical> // default: FALSE reduce vertical padding thus make table consume less vertical space use_compact_mode option can used. default, FALSE. use_text_wrapping Use text wrapping scalar<logical> // default: TRUE use_text_wrapping option controls whether text wrapping occurs throughout table. TRUE default text wrapped multiple lines. FALSE, text truncated single line. use_page_size_select Allow page size selection scalar<logical> // default: FALSE use_page_size_select option lets us display dropdown menu number rows show per page data. page_size_default Change default page size scalar<numeric|integer> // default: 10 default page size (initially set 10) can modified page_size_default works whether use_page_size_select set TRUE. page_size_values Set page-size values vector<numeric|integer> // default: c(10, 25, 50, 100) default, vector c(10, 25, 50, 100) corresponds options 10, 25, 50, 100 rows data per page. modify page-size options, provide numeric vector page_size_values. pagination_type Change pagination mode scalar<character> // default: \"numbers\" using pagination pagination_type option lets us select one three options layout pagination controls. default \"numbers\", series page-number buttons presented along 'previous' 'next' buttons. \"jump\" option provides input field stepper page number. \"simple\", 'previous' 'next' buttons displayed. height Height interactive HTML table Height table pixels. Defaults \"auto\" automatic sizing. selection_mode Allow row selection scalar<character> // default: NULL selection_mode options allows users select rows clicking . option \"single\", clicking another value toggles selection previously selected row . option \"multiple\", multiple rows can selected . Selected values available Shiny apps selection_mode NULL table used render_gt().","code":""},{"path":"https://gt.rstudio.com/reference/opt_interactive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to put interactive elements in an HTML table — opt_interactive","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_interactive.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to put interactive elements in an HTML table — opt_interactive","text":"Use select columns towny dataset create gt table header (tab_header()) source note (tab_source_note()). Next, add interactive HTML features (otherwise activate interactive HTML mode) opt_interactive(). 'll just default set interactive options.    Interactive tables can styled body cells. , use gtcars dataset create interactive gt table. Using tab_style() data_color() can flexibly style body cells throughout table.","code":"towny |>   dplyr::select(name, census_div, starts_with(\"population\")) |>   gt() |>   fmt_integer() |>   cols_label_with(fn = function(x) sub(\"population_\", \"\", x)) |>   cols_width(     name ~ px(200),     census_div ~ px(200)   ) |>   tab_header(     title = \"Populations of Municipalities\",     subtitle = \"Census values from 1996 to 2021.\"   ) |>   tab_source_note(source_note = md(\"Data taken from the `towny` dataset.\")) |>   opt_interactive() gtcars |>   gt() |>   cols_width(everything() ~ px(130)) |>   tab_style(     style = cell_fill(color = \"gray95\"),     locations = cells_body(columns = c(mfr, model))   ) |>   data_color(     columns = c(starts_with(\"hp\"), starts_with(\"trq\")),     method = \"numeric\",     palette = \"viridis\"   ) |>   cols_hide(columns = trim) |>   opt_interactive()"},{"path":"https://gt.rstudio.com/reference/opt_interactive.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to put interactive elements in an HTML table — opt_interactive","text":"10-2","code":""},{"path":"https://gt.rstudio.com/reference/opt_interactive.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Option to put interactive elements in an HTML table — opt_interactive","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_row_striping.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to add or remove row striping — opt_row_striping","title":"Option to add or remove row striping — opt_row_striping","text":"default, gt table row striping enabled. However, function allows us easily enable disable striped rows table body. function serves convenient shortcut <gt_tbl> |> tab_options(row.striping.include_table_body = TRUE|FALSE).","code":""},{"path":"https://gt.rstudio.com/reference/opt_row_striping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to add or remove row striping — opt_row_striping","text":"","code":"opt_row_striping(data, row_striping = TRUE)"},{"path":"https://gt.rstudio.com/reference/opt_row_striping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to add or remove row striping — opt_row_striping","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. row_striping Use alternating row stripes scalar<logical> // default: TRUE logical value indicate whether row striping added removed.","code":""},{"path":"https://gt.rstudio.com/reference/opt_row_striping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to add or remove row striping — opt_row_striping","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_row_striping.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to add or remove row striping — opt_row_striping","text":"Use exibble dataset create gt table number table parts added (using functions like summary_rows(), grand_summary_rows(), ). Following , add row striping every second row opt_row_striping().","code":"exibble |>   gt(rowname_col = \"row\", groupname_col = \"group\") |>   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = c(\"min\", \"max\")   ) |>   grand_summary_rows(     columns = currency,     fns = total ~ sum(., na.rm = TRUE)   ) |>   tab_source_note(source_note = \"This is a source note.\") |>   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) |>   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) |>   opt_row_striping()"},{"path":"https://gt.rstudio.com/reference/opt_row_striping.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to add or remove row striping — opt_row_striping","text":"10-5","code":""},{"path":"https://gt.rstudio.com/reference/opt_row_striping.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Option to add or remove row striping — opt_row_striping","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_stylize.html","id":null,"dir":"Reference","previous_headings":"","what":"Stylize your table with a colorful look — opt_stylize","title":"Stylize your table with a colorful look — opt_stylize","text":"opt_stylize() can quickly style gt table carefully curated set background colors, line colors, line styles. six styles choose largely vary extent coloring applied different table locations. table borders applied, apply darker colors table stub summary sections, , even vertical lines. addition choosing style preset, six color variations use range five color tints. color tints fine-tuned maximize contrast text background. 36 combinations style color choose .","code":""},{"path":"https://gt.rstudio.com/reference/opt_stylize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stylize your table with a colorful look — opt_stylize","text":"","code":"opt_stylize(data, style = 1, color = \"blue\", add_row_striping = TRUE)"},{"path":"https://gt.rstudio.com/reference/opt_stylize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stylize your table with a colorful look — opt_stylize","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. style Table style scalar<numeric|integer>(1>=val>=6) // default: 1 Six numbered styles available. Simply provide number 1 (default) 6 choose distinct look. color Color variation scalar<character> // default: \"blue\" six color variations: \"blue\", \"cyan\", \"pink\", \"green\", \"red\", \"gray\". add_row_striping Allow row striping scalar<logical> // default: TRUE option enable row striping table body style chosen.","code":""},{"path":"https://gt.rstudio.com/reference/opt_stylize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stylize your table with a colorful look — opt_stylize","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_stylize.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stylize your table with a colorful look — opt_stylize","text":"Use exibble create gt table number table parts added. , use opt_stylize() give table additional style (using \"cyan\" color variation style number 6).","code":"exibble |>   gt(rowname_col = \"row\", groupname_col = \"group\") |>   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = c(\"min\", \"max\")   ) |>   grand_summary_rows(     columns = currency,     fns = total ~ sum(., na.rm = TRUE)   ) |>   tab_source_note(source_note = \"This is a source note.\") |>   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) |>   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) |>   opt_stylize(style = 6, color = \"cyan\")"},{"path":"https://gt.rstudio.com/reference/opt_stylize.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Stylize your table with a colorful look — opt_stylize","text":"10-1","code":""},{"path":"https://gt.rstudio.com/reference/opt_stylize.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Stylize your table with a colorful look — opt_stylize","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":null,"dir":"Reference","previous_headings":"","what":"Options to define font choices for the entire table — opt_table_font","title":"Options to define font choices for the entire table — opt_table_font","text":"opt_table_font() makes possible define fonts used entire gt table. font names supplied font (default, add = TRUE) placed names present existing font stack (.e., take precedence). can choose base font stack provided system_fonts() providing valid keyword themed set optionally prepending font values . Take note still entirely different fonts specific locations table. need use tab_style() tab_style_body() conjunction cell_text().","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Options to define font choices for the entire table — opt_table_font","text":"","code":"opt_table_font(   data,   font = NULL,   stack = NULL,   size = NULL,   weight = NULL,   style = NULL,   color = NULL,   add = TRUE )"},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Options to define font choices for the entire table — opt_table_font","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. font Default table fonts vector<character>|list|obj:<font_css> // default: NULL (optional) One font names available system web fonts. can combined c() list(). choose fonts Google Fonts service, can call google_font() helper function. stack Name font stack scalar<character> // default: NULL (optional) name representative font stack (obtained via internally via system_fonts() helper function). provided, new stack replace defined fonts font values prepended. size Text size scalar<character|numeric|integer> // default: NULL (optional) text size entire table can set providing size value. Can specified single-length character vector units pixels (e.g., 12px) percentage (e.g., 80%). provided single-length numeric vector, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percentage units. weight Text weight scalar<character|numeric|integer> // default: NULL (optional) Option set weight font. Can text-based keyword \"normal\", \"bold\", \"lighter\", \"bolder\", , numeric value 1 1000, inclusive. Please note typefaces varying support numeric mapping weight. style Text style scalar<character> // default: NULL (optional) option modify text style. Can one either \"normal\", \"italic\", \"oblique\". color Text color scalar<character> // default: NULL (optional) color option defines text color used throughout table. color name hexadecimal color code provided. add Add existing fonts scalar<logical> // default: TRUE fonts added beginning already-defined fonts table? default, TRUE recommended since fonts already present can serve fallbacks everything specified font available. stack provided, add automatically set FALSE.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Options to define font choices for the entire table — opt_table_font","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":"possibilities-for-the-font-argument","dir":"Reference","previous_headings":"","what":"Possibilities for the font argument","title":"Options to define font choices for the entire table — opt_table_font","text":"option supply one font names font argument. can enclosed c() list(). can generate list vector combination font names, can freely use google_font(), default_fonts(), system_fonts() help compose font family.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":"possibilities-for-the-stack-argument","dir":"Reference","previous_headings":"","what":"Possibilities for the stack argument","title":"Options to define font choices for the entire table — opt_table_font","text":"several themed font stacks available via system_fonts() helper function. function can used generate segment vector supplied font argument. However, using stack argument one 15 keywords font stacks available system_fonts(), sure typeface class work across multiple computer systems. following keywords can used: \"system-ui\" \"transitional\" \"old-style\" \"humanist\" \"geometric-humanist\" \"classical-humanist\" \"neo-grotesque\" \"monospace-slab-serif\" \"monospace-code\" \"industrial\" \"rounded-sans\" \"slab-serif\" \"antique\" \"didone\" \"handwritten\"","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Options to define font choices for the entire table — opt_table_font","text":"Use subset sp500 dataset create small gt table. use fmt_currency() display dollar sign first row monetary values. \"Merriweather\" font (Google Fonts, via google_font()) two system font fallbacks (\"Cochin\" generic \"serif\").    sza dataset create two-column, eleven-row table. Within opt_table_font(), stack argument supplied \"rounded-sans\" font stack. sets family fonts rounded, curved letterforms locally available different computing environments.","code":"sp500 |>   dplyr::slice(1:10) |>   dplyr::select(-volume, -adj_close) |>   gt() |>   fmt_currency(     rows = 1,     use_seps = FALSE   ) |>   opt_table_font(     font = list(       google_font(name = \"Merriweather\"),       \"Cochin\", \"serif\"     )   ) sza |>   dplyr::filter(     latitude == 20 &       month == \"jan\" &       !is.na(sza)   ) |>   dplyr::select(-latitude, -month) |>   gt() |>   opt_table_font(stack = \"rounded-sans\") |>   opt_all_caps()"},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Options to define font choices for the entire table — opt_table_font","text":"10-12","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_font.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Options to define font choices for the entire table — opt_table_font","text":"v0.2.2 (August 5, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_table_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to set table lines to different extents — opt_table_lines","title":"Option to set table lines to different extents — opt_table_lines","text":"opt_table_lines() sets table lines one three possible ways: (1) possible table lines drawn (\"\"), (2) table lines (\"none\"), (3) resetting default line styles (\"default\"). great want start lots lines subtract just tab_options() tab_style(). , use start completely lineless table, adding individual lines needed.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to set table lines to different extents — opt_table_lines","text":"","code":"opt_table_lines(data, extent = c(\"all\", \"none\", \"default\"))"},{"path":"https://gt.rstudio.com/reference/opt_table_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to set table lines to different extents — opt_table_lines","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. extent Extent lines added singl-kw:[|none|default] // default: \"\" extent lines visible table. Options \"\", \"none\", \"default\".","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to set table lines to different extents — opt_table_lines","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_lines.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to set table lines to different extents — opt_table_lines","text":"Use exibble dataset create gt table number table parts added (using functions like summary_rows(), grand_summary_rows(), ). Following , use opt_table_lines() function generate lines everywhere can possibly lines (default extent argument \"\").","code":"exibble |>   gt(rowname_col = \"row\", groupname_col = \"group\") |>   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = c(\"min\", \"max\")   ) |>   grand_summary_rows(     columns = currency,     fns = total ~ sum(., na.rm = TRUE)   ) |>   tab_source_note(source_note = \"This is a source note.\") |>   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) |>   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) |>   opt_table_lines()"},{"path":"https://gt.rstudio.com/reference/opt_table_lines.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to set table lines to different extents — opt_table_lines","text":"10-10","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_lines.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Option to set table lines to different extents — opt_table_lines","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_table_outline.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to wrap an outline around the entire table — opt_table_outline","title":"Option to wrap an outline around the entire table — opt_table_outline","text":"function puts outline consistent style, width, color around entire table. 'll write existing outside lines long width larger existing lines. default value style (\"solid\") draw solid outline, whereas value \"none\" remove present outline.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_outline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to wrap an outline around the entire table — opt_table_outline","text":"","code":"opt_table_outline(data, style = \"solid\", width = px(3), color = \"#D3D3D3\")"},{"path":"https://gt.rstudio.com/reference/opt_table_outline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to wrap an outline around the entire table — opt_table_outline","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. style Outline style property scalar<character> // default: \"solid\" style property table outline. default, \"solid\". \"none\" used outline removed values provided width color ignored (.e., set). width Outline width value scalar<character> // default: px(3) width property table outline. default, px(3) (, \"3px\"). color Color outline scalar<character> // default: \"#D3D3D3\" color table outline. default, \"#D3D3D3\".","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_outline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to wrap an outline around the entire table — opt_table_outline","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_outline.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to wrap an outline around the entire table — opt_table_outline","text":"Use exibble dataset create gt table number table parts added (using functions like summary_rows(), grand_summary_rows(), ). Following , make outline wrap around entire table using opt_table_outline() function.    Remove table outline style = \"none\" option.","code":"tab_1 <-   exibble |>   gt(rowname_col = \"row\", groupname_col = \"group\") |>   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = c(\"min\", \"max\")   ) |>   grand_summary_rows(     columns = currency,     fns = total ~ sum(., na.rm = TRUE)   ) |>   tab_source_note(source_note = \"This is a source note.\") |>   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) |>   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) |>   opt_table_outline()  tab_1 tab_1 |> opt_table_outline(style = \"none\")"},{"path":"https://gt.rstudio.com/reference/opt_table_outline.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to wrap an outline around the entire table — opt_table_outline","text":"10-11","code":""},{"path":"https://gt.rstudio.com/reference/opt_table_outline.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Option to wrap an outline around the entire table — opt_table_outline","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/opt_vertical_padding.html","id":null,"dir":"Reference","previous_headings":"","what":"Option to expand or contract vertical padding — opt_vertical_padding","title":"Option to expand or contract vertical padding — opt_vertical_padding","text":"Increase decrease vertical padding throughout locations gt table use scale factor, defined real number 0 3. function serves shortcut setting following eight options tab_options(): heading.padding column_labels.padding data_row.padding row_group.padding summary_row.padding grand_summary_row.padding footnotes.padding source_notes.padding","code":""},{"path":"https://gt.rstudio.com/reference/opt_vertical_padding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Option to expand or contract vertical padding — opt_vertical_padding","text":"","code":"opt_vertical_padding(data, scale = 1)"},{"path":"https://gt.rstudio.com/reference/opt_vertical_padding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Option to expand or contract vertical padding — opt_vertical_padding","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. scale Scale factor scalar<numeric|integer>(0>=val>=3) // default: 1 scale factor vertical padding adjusted. Must number 0 3.","code":""},{"path":"https://gt.rstudio.com/reference/opt_vertical_padding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Option to expand or contract vertical padding — opt_vertical_padding","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/opt_vertical_padding.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Option to expand or contract vertical padding — opt_vertical_padding","text":"Use exibble dataset create gt table number table parts added (using functions like summary_rows(), grand_summary_rows(), ). Following , lessen amount vertical padding across entire table opt_vertical_padding(). Using scale value 0.25 (default 1) means vertical space greatly reduced, resulting compact table.","code":"exibble |>   gt(rowname_col = \"row\", groupname_col = \"group\") |>   summary_rows(     groups = \"grp_a\",     columns = c(num, currency),     fns = c(\"min\", \"max\")   ) |>   grand_summary_rows(     columns = currency,     fns = total ~ sum(., na.rm = TRUE)   ) |>   tab_source_note(source_note = \"This is a source note.\") |>   tab_footnote(     footnote = \"This is a footnote.\",     locations = cells_body(columns = 1, rows = 1)   ) |>   tab_header(     title = \"The title of the table\",     subtitle = \"The table's subtitle\"   ) |>   opt_vertical_padding(scale = 0.25)"},{"path":"https://gt.rstudio.com/reference/opt_vertical_padding.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Option to expand or contract vertical padding — opt_vertical_padding","text":"10-7","code":""},{"path":"https://gt.rstudio.com/reference/opt_vertical_padding.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Option to expand or contract vertical padding — opt_vertical_padding","text":"v0.4.0 (February 15, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/pct.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for providing a numeric value as percentage — pct","title":"Helper for providing a numeric value as percentage — pct","text":"percentage value acts length value relative initial state. instance 80 percent value something size target 80 percent size 'previous' value. type sizing useful sizing length value intuitive measure. helper function can used setting font sizes (e.g., cell_text()) altering thicknesses lines (e.g., cell_borders()). exact definition size required, analogous helper function pct() useful.","code":""},{"path":"https://gt.rstudio.com/reference/pct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for providing a numeric value as percentage — pct","text":"","code":"pct(x)"},{"path":"https://gt.rstudio.com/reference/pct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for providing a numeric value as percentage — pct","text":"x Numeric value percent scalar<numeric|integer> // required numeric value format string percentage tab_options() arguments can take percentage values (e.g., table.width).","code":""},{"path":"https://gt.rstudio.com/reference/pct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for providing a numeric value as percentage — pct","text":"character vector single value percentage units.","code":""},{"path":"https://gt.rstudio.com/reference/pct.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper for providing a numeric value as percentage — pct","text":"Use exibble dataset create gt table. Inside cell_text() call (inside tab_style()), use pct() helper function define font size column labels percentage value.","code":"exibble |>   gt() |>   tab_style(     style = cell_text(size = pct(75)),     locations = cells_column_labels()   )"},{"path":"https://gt.rstudio.com/reference/pct.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper for providing a numeric value as percentage — pct","text":"8-4","code":""},{"path":"https://gt.rstudio.com/reference/pct.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Helper for providing a numeric value as percentage — pct","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/peeps.html","id":null,"dir":"Reference","previous_headings":"","what":"A table of personal information for people all over the world — peeps","title":"A table of personal information for people all over the world — peeps","text":"peeps dataset contains records one hundred people residing ten different countries. person table address information along email address phone number. also personal characteristics like date birth, height, weight. data synthesized, names within table taken based individuals real life. street addresses generated actual street names within real geographic localities, however, street numbers assigned randomly constrained number set. records relate real people, efforts made make data realistic possible.","code":""},{"path":"https://gt.rstudio.com/reference/peeps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A table of personal information for people all over the world — peeps","text":"","code":"peeps"},{"path":"https://gt.rstudio.com/reference/peeps.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A table of personal information for people all over the world — peeps","text":"tibble 100 rows 14 variables: name_given, name_family given family name individual. address street address individual. city name city locality individual resides. state_prov state province associated city address. NA individuals residing countries subdivision data needed generating valid mailing address. postcode post code associated city address. country 3-letter ISO 3166-1 country code representative individual's country. email_addr individual's email address. phone_number, country_code individual's phone number country code associated phone number. gender gender individual. dob individual's date birth (DOB) ISO 8601 form YYYY-MM-DD. height_cm, weight_kg height weight individual centimeters (cm) kilograms (kg), respectively.","code":""},{"path":"https://gt.rstudio.com/reference/peeps.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"A table of personal information for people all over the world — peeps","text":"DATA-8","code":""},{"path":"https://gt.rstudio.com/reference/peeps.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"A table of personal information for people all over the world — peeps","text":"v0.11.0 (July 9, 2024)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/peeps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A table of personal information for people all over the world — peeps","text":"","code":"dplyr::glimpse(peeps) #> Rows: 100 #> Columns: 14 #> $ name_given   <chr> \"Ruth\", \"Peter\", \"Fanette\", \"Judyta\", \"Leonard\", \"Maymun\"… #> $ name_family  <chr> \"Conte\", \"Möller\", \"Gadbois\", \"Borkowska\", \"Jacobs\", \"Kho… #> $ address      <chr> \"4299 Bobcat Drive\", \"3705 Hidden Pond Road\", \"4200 Swick… #> $ city         <chr> \"Baileys Crossroads\", \"Red Boiling Springs\", \"New Orleans… #> $ state_prov   <chr> \"MD\", \"TN\", \"LA\", \"NY\", \"CA\", \"OH\", \"IN\", \"MA\", \"CA\", \"TX… #> $ postcode     <chr> \"22041\", \"37150\", \"70112\", \"14125\", \"90036\", \"45013\", \"46… #> $ country      <chr> \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"… #> $ email_addr   <chr> \"rcconte@example.com\", \"pmoeller@example.com\", \"fan_gadbo… #> $ phone_number <chr> \"240-783-7630\", \"615-699-3517\", \"985-205-2970\", \"585-948-… #> $ country_code <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 32, 32, 32, 32, 32, 32, 32,… #> $ gender       <chr> \"female\", \"male\", \"female\", \"female\", \"male\", \"male\", \"fe… #> $ dob          <date> 1949-03-16, 1939-11-22, 1970-12-20, 1965-07-19, 1985-10-… #> $ height_cm    <int> 153, 175, 167, 156, 177, 172, 168, 165, 181, 187, 164, 15… #> $ weight_kg    <dbl> 76.4, 74.9, 61.6, 54.5, 113.2, 88.4, 63.5, 61.3, 99.7, 10…"},{"path":"https://gt.rstudio.com/reference/photolysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Data on photolysis rates for gas-phase organic compounds — photolysis","title":"Data on photolysis rates for gas-phase organic compounds — photolysis","text":"photolysis dataset contains numerical values describing photolytic degradation pathways 25 compounds relevance atmospheric chemistry. Many volatile organic compounds (VOCs) emitted substantial quantities biogenic anthropogenic sources, can major influence chemistry lower atmosphere. portion can transformed VOCs via energy provided light. order realistically predict composition atmosphere evolves time, need accurate estimates photolysis rates. data provided photolysis allows computations photolysis rates (J, units s^-1) function solar zenith angle (SZA). values essential deploying atmospheric chemistry models.","code":""},{"path":"https://gt.rstudio.com/reference/photolysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data on photolysis rates for gas-phase organic compounds — photolysis","text":"","code":"photolysis"},{"path":"https://gt.rstudio.com/reference/photolysis.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data on photolysis rates for gas-phase organic compounds — photolysis","text":"tibble 34 rows 10 variables: compd_name name primary compound undergoing photolysis. cmpd_formula chemical formula compound. products product pathway photolysis compound. type type organic compound undergoing photolysis. l, m, n parameter values given l, m, n columns can used calculate photolysis rate (J) function solar zenith angle (X, radians) expression: J = l * cos(X)^m * exp(-n * sec(X)). quantum_yield context photolysis reactions, efficiency given photolytic reaction. words, number product molecules formed number photons absorbed. wavelength_nm, sigma_298_cm2 wavelength_nm sigma_298_cm2 columns provide photoabsorption data compound undergoing photolysis. values wavelength_nm provide wavelength light nanometer units; sigma_298_cm2 values paired wavelength_nm values units cm^2 molecule^-1.","code":""},{"path":"https://gt.rstudio.com/reference/photolysis.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"Data on photolysis rates for gas-phase organic compounds — photolysis","text":"DATA-15","code":""},{"path":"https://gt.rstudio.com/reference/photolysis.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"Data on photolysis rates for gas-phase organic compounds — photolysis","text":"v0.11.0 (July 9, 2024)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/photolysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data on photolysis rates for gas-phase organic compounds — photolysis","text":"","code":"dplyr::glimpse(photolysis) #> Rows: 34 #> Columns: 10 #> $ cmpd_name     <chr> \"ozone\", \"ozone\", \"hydrogen peroxide\", \"nitrogen dioxide… #> $ cmpd_formula  <chr> \"O3\", \"O3\", \"H2O2\", \"NO2\", \"NO3\", \"NO3\", \"HONO\", \"HNO3\",… #> $ products      <chr> \"-> O(^1D) + O2\", \"-> O(^3P) + O2\", \"-> OH + OH\", \"-> NO… #> $ type          <chr> \"inorganic reactions\", \"inorganic reactions\", \"inorganic… #> $ l             <dbl> 6.073e-05, 4.775e-04, 1.041e-05, 1.165e-02, 2.485e-02, 1… #> $ m             <dbl> 1.743, 0.298, 0.723, 0.244, 0.168, 0.155, 0.261, 1.230, … #> $ n             <dbl> 0.474, 0.080, 0.279, 0.267, 0.108, 0.125, 0.288, 0.307, … #> $ quantum_yield <dbl> NA, NA, 1.000, NA, 1.000, 1.000, 1.000, 1.000, NA, NA, N… #> $ wavelength_nm <chr> \"290,291,292,293,294,295,296,297,298,299,300,301,302,303… #> $ sigma_298_cm2 <chr> \"1.43E-18,1.27E-18,1.11E-18,9.94E-19,8.68E-19,7.69E-19,6…"},{"path":"https://gt.rstudio.com/reference/pizzaplace.html","id":null,"dir":"Reference","previous_headings":"","what":"A year of pizza sales from a pizza place — pizzaplace","title":"A year of pizza sales from a pizza place — pizzaplace","text":"synthetic dataset describes pizza sales pizza place somewhere US. contents artificial, ingredients used make pizzas far . 32 different pizzas fall 4 different categories: \"classic\" (classic pizzas: 'probably one like , never like !'), \"chicken\" (pizzas chicken major ingredient: 'Try Southwest Chicken Pizza! love !'), \"supreme\" (pizzas try little harder: 'Soppressata pizza uses finest salami personal salumist!'), , \"veggie\" (pizzas without meats whatsoever: 'Five Cheese pizza many cheeses, can offer Large Size!').","code":""},{"path":"https://gt.rstudio.com/reference/pizzaplace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A year of pizza sales from a pizza place — pizzaplace","text":"","code":"pizzaplace"},{"path":"https://gt.rstudio.com/reference/pizzaplace.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A year of pizza sales from a pizza place — pizzaplace","text":"tibble 49,574 rows 7 variables: id ID order, consists one pizzas given date time. date character representation order date, expressed ISO 8601 date format (YYYY-MM-DD). time character representation order time, expressed 24-hour time ISO 8601 extended time format (HH:MM:SS). name short name pizza. size size pizza, can either \"S\", \"M\", \"L\", \"XL\" (rare!), \"XXL\" (even rarer!); pizzas available \"S\", \"M\", \"L\" sizes exceptions apply. type category type pizza, can either \"classic\", \"chicken\", \"supreme\", \"veggie\". price price pizza amount sold (USD).","code":""},{"path":"https://gt.rstudio.com/reference/pizzaplace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A year of pizza sales from a pizza place — pizzaplace","text":"pizza dataset identified short name. following listings provide full names pizza main ingredients. Classic Pizzas: \"classic_dlx\": Classic Deluxe Pizza (Pepperoni, Mushrooms, Red Onions, Red Peppers, Bacon) \"big_meat\": Big Meat Pizza (Bacon, Pepperoni, Italian Sausage, Chorizo Sausage) \"pepperoni\": Pepperoni Pizza (Mozzarella Cheese, Pepperoni) \"hawaiian\": Hawaiian Pizza (Sliced Ham, Pineapple, Mozzarella Cheese) \"pep_msh_pep\": Pepperoni, Mushroom, Peppers Pizza (Pepperoni, Mushrooms, Green Peppers) \"ital_cpcllo\": Italian Capocollo Pizza (Capocollo, Red Peppers, Tomatoes, Goat Cheese, Garlic, Oregano) \"napolitana\": Napolitana Pizza (Tomatoes, Anchovies, Green Olives, Red Onions, Garlic) \"the_greek\": Greek Pizza (Kalamata Olives, Feta Cheese, Tomatoes, Garlic, Beef Chuck Roast, Red Onions) Chicken Pizzas: \"thai_ckn\": Thai Chicken Pizza (Chicken, Pineapple, Tomatoes, Red Peppers, Thai Sweet Chilli Sauce) \"bbq_ckn\": Barbecue Chicken Pizza (Barbecued Chicken, Red Peppers, Green Peppers, Tomatoes, Red Onions, Barbecue Sauce) \"southw_ckn\": Southwest Chicken Pizza (Chicken, Tomatoes, Red Peppers, Red Onions, Jalapeno Peppers, Corn, Cilantro, Chipotle Sauce) \"cali_ckn\": California Chicken Pizza (Chicken, Artichoke, Spinach, Garlic, Jalapeno Peppers, Fontina Cheese, Gouda Cheese) \"ckn_pesto\": Chicken Pesto Pizza (Chicken, Tomatoes, Red Peppers, Spinach, Garlic, Pesto Sauce) \"ckn_alfredo\": Chicken Alfredo Pizza (Chicken, Red Onions, Red Peppers, Mushrooms, Asiago Cheese, Alfredo Sauce) Supreme Pizzas: \"brie_carre\": Brie Carre Pizza (Brie Carre Cheese, Prosciutto, Caramelized Onions, Pears, Thyme, Garlic) \"calabrese\": Calabrese Pizza ('Nduja Salami, Pancetta, Tomatoes, Red Onions, Friggitello Peppers, Garlic) \"soppressata\": Soppressata Pizza (Soppressata Salami, Fontina Cheese, Mozzarella Cheese, Mushrooms, Garlic) \"sicilian\": Sicilian Pizza (Coarse Sicilian Salami, Tomatoes, Green Olives, Luganega Sausage, Onions, Garlic) \"ital_supr\": Italian Supreme Pizza (Calabrese Salami, Capocollo, Tomatoes, Red Onions, Green Olives, Garlic) \"peppr_salami\": Pepper Salami Pizza (Genoa Salami, Capocollo, Pepperoni, Tomatoes, Asiago Cheese, Garlic) \"prsc_argla\": Prosciutto Arugula Pizza (Prosciutto di San Daniele, Arugula, Mozzarella Cheese) \"spinach_supr\": Spinach Supreme Pizza (Spinach, Red Onions, Pepperoni, Tomatoes, Artichokes, Kalamata Olives, Garlic, Asiago Cheese) \"spicy_ital\": Spicy Italian Pizza (Capocollo, Tomatoes, Goat Cheese, Artichokes, Peperoncini verdi, Garlic) Vegetable Pizzas \"mexicana\": Mexicana Pizza (Tomatoes, Red Peppers, Jalapeno Peppers, Red Onions, Cilantro, Corn, Chipotle Sauce, Garlic) \"four_cheese\": Four Cheese Pizza (Ricotta Cheese, Gorgonzola Piccante Cheese, Mozzarella Cheese, Parmigiano Reggiano Cheese, Garlic) \"five_cheese\": Five Cheese Pizza (Mozzarella Cheese, Provolone Cheese, Smoked Gouda Cheese, Romano Cheese, Blue Cheese, Garlic) \"spin_pesto\": Spinach Pesto Pizza (Spinach, Artichokes, Tomatoes, Sun-dried Tomatoes, Garlic, Pesto Sauce) \"veggie_veg\": Vegetables + Vegetables Pizza (Mushrooms, Tomatoes, Red Peppers, Green Peppers, Red Onions, Zucchini, Spinach, Garlic) \"green_garden\": Green Garden Pizza (Spinach, Mushrooms, Tomatoes, Green Olives, Feta Cheese) \"mediterraneo\": Mediterranean Pizza (Spinach, Artichokes, Kalamata Olives, Sun-dried Tomatoes, Feta Cheese, Plum Tomatoes, Red Onions) \"spinach_fet\": Spinach Feta Pizza (Spinach, Mushrooms, Red Onions, Feta Cheese, Garlic) \"ital_veggie\": Italian Vegetables Pizza (Eggplant, Artichokes, Tomatoes, Zucchini, Red Peppers, Garlic, Pesto Sauce)","code":""},{"path":"https://gt.rstudio.com/reference/pizzaplace.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"A year of pizza sales from a pizza place — pizzaplace","text":"DATA-5","code":""},{"path":"https://gt.rstudio.com/reference/pizzaplace.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"A year of pizza sales from a pizza place — pizzaplace","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/pizzaplace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A year of pizza sales from a pizza place — pizzaplace","text":"","code":"dplyr::glimpse(pizzaplace) #> Rows: 49,574 #> Columns: 7 #> $ id    <chr> \"2015-000001\", \"2015-000002\", \"2015-000002\", \"2015-000002\", \"201… #> $ date  <chr> \"2015-01-01\", \"2015-01-01\", \"2015-01-01\", \"2015-01-01\", \"2015-01… #> $ time  <chr> \"11:38:36\", \"11:57:40\", \"11:57:40\", \"11:57:40\", \"11:57:40\", \"11:… #> $ name  <chr> \"hawaiian\", \"classic_dlx\", \"mexicana\", \"thai_ckn\", \"five_cheese\"… #> $ size  <chr> \"M\", \"M\", \"M\", \"L\", \"L\", \"L\", \"L\", \"M\", \"M\", \"M\", \"S\", \"S\", \"S\",… #> $ type  <chr> \"classic\", \"classic\", \"veggie\", \"chicken\", \"veggie\", \"supreme\", … #> $ price <dbl> 13.25, 16.00, 16.00, 20.75, 18.50, 20.75, 20.75, 16.50, 16.50, 1…"},{"path":"https://gt.rstudio.com/reference/print.gt_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a gt table — print.gt_tbl","title":"Print a gt table — print.gt_tbl","text":"facilitates printing HTML table R console. facilitates printing multiple HTML tables (gt_group object) R console.","code":""},{"path":"https://gt.rstudio.com/reference/print.gt_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a gt table — print.gt_tbl","text":"","code":"# S3 method for class 'gt_tbl' print(x, ..., view = interactive())  # S3 method for class 'gt_group' print(x, ..., view = interactive())  # S3 method for class 'rtf_text' print(x, ...)"},{"path":"https://gt.rstudio.com/reference/print.gt_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a gt table — print.gt_tbl","text":"x Object printed. ... additional parameters. view value print()s browse argument.","code":""},{"path":"https://gt.rstudio.com/reference/px.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for providing a numeric value as pixels value — px","title":"Helper for providing a numeric value as pixels value — px","text":"certain parameters, length value required. Examples include setting font sizes (e.g., cell_text()) thicknesses lines (e.g., cell_borders()). Setting length pixels px() allows absolute definition size opposed analogous helper function pct().","code":""},{"path":"https://gt.rstudio.com/reference/px.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for providing a numeric value as pixels value — px","text":"","code":"px(x)"},{"path":"https://gt.rstudio.com/reference/px.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for providing a numeric value as pixels value — px","text":"x Numeric length pixels scalar<numeric|integer> // required numeric value format string (e.g., \"12px\") tab_options() arguments can take values units pixels (e.g., table.font.size).","code":""},{"path":"https://gt.rstudio.com/reference/px.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for providing a numeric value as pixels value — px","text":"character vector single value pixel units.","code":""},{"path":"https://gt.rstudio.com/reference/px.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper for providing a numeric value as pixels value — px","text":"Use exibble dataset create gt table. Inside cell_text() call (inside tab_style()), use px() helper function define font size column labels units pixels.","code":"exibble |>   gt() |>   tab_style(     style = cell_text(size = px(20)),     locations = cells_column_labels()   )"},{"path":"https://gt.rstudio.com/reference/px.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper for providing a numeric value as pixels value — px","text":"8-3","code":""},{"path":"https://gt.rstudio.com/reference/px.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Helper for providing a numeric value as pixels value — px","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/random_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for creating a random id for a gt table — random_id","title":"Helper for creating a random id for a gt table — random_id","text":"random_id() can used create random, character-based ID value argument variable length (default 10 letters).","code":""},{"path":"https://gt.rstudio.com/reference/random_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for creating a random id for a gt table — random_id","text":"","code":"random_id(n = 10)"},{"path":"https://gt.rstudio.com/reference/random_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for creating a random id for a gt table — random_id","text":"n Number letters scalar<numeric|integer> // default: 10 n argument defines number lowercase letters use random ID.","code":""},{"path":"https://gt.rstudio.com/reference/random_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for creating a random id for a gt table — random_id","text":"character vector containing single, random ID.","code":""},{"path":"https://gt.rstudio.com/reference/random_id.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper for creating a random id for a gt table — random_id","text":"8-28","code":""},{"path":"https://gt.rstudio.com/reference/random_id.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Helper for creating a random id for a gt table — random_id","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/reactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Reaction rates for gas-phase atmospheric reactions of organic compounds — reactions","title":"Reaction rates for gas-phase atmospheric reactions of organic compounds — reactions","text":"reactions dataset contains kinetic data second-order (two body) gas-phase chemical reactions 1,683 organic compounds. reaction-rate values parameters within dataset useful studies atmospheric environment. Organic pollutants, present trace amounts atmosphere, extensively studied research groups since persistence atmosphere requires specific attention. Many researchers reported kinetic data specific gas-phase reactions mainly involve oxidation reactions OH, nitrate radicals, ozone, chlorine atoms. compilation rate constant (k) data contains values rate constants 298 K (units cm^3 molecules^-1 s^-1) well parameters allow calculation rate constants different temperatures (temperature dependence parameters: , B, n). Uncertainty values/factors temperature limits also provided information available.","code":""},{"path":"https://gt.rstudio.com/reference/reactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reaction rates for gas-phase atmospheric reactions of organic compounds — reactions","text":"","code":"reactions"},{"path":"https://gt.rstudio.com/reference/reactions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Reaction rates for gas-phase atmospheric reactions of organic compounds — reactions","text":"tibble 1,683 rows 39 variables: compd_name name primary compound undergoing reaction OH, ozone, NO3, Cl. cmpd_mwt molecular weight compound units g/mol. cmpd_formula chemical formula compound. cmpd_type category compounds compd_name falls . cmpd_smiles SMILES (simplified molecular-input line-entry system) representation compound. cmpd_inchi InChI (International Chemical Identifier) representation compound. cmpd_inchikey InChIKey, hashed InChI value, fixed length 27 characters. values can used easily perform database searches chemical compounds. OH_k298 Rate constant 298 K OH reactions. OH_uncert Uncertainty percentage certain OH reactions. OH_u_fac Uncertainty plus/minus difference certain OH reactions. OH_a, OH_b, OH_n Extended temperature dependence parameters bimolecular OH reactions, used Arrhenius expression: k(T)=exp(-B/T) (T/300)^n. , expressed cm^3 molecules^-1 s^-1, B units K, n dimensionless. NA values indicate data available. OH_t_low, OH_t_high low high temperature boundaries (units K) OH_a, OH_b, OH_n parameters valid. O3_k298 Rate constant 298 K ozone reactions. O3_uncert Uncertainty percentage certain ozone reactions. O3_u_fac Uncertainty plus/minus difference certain ozone reactions. O3_a, O3_b, O3_n Extended temperature dependence parameters bimolecular ozone reactions, used Arrhenius expression: k(T)=exp(-B/T) (T/300)^n. , expressed cm^3 molecules^-1 s^-1, B units K, n dimensionless. NA values indicate data available. O3_t_low, O3_t_high low high temperature boundaries (units K) O3_a, O3_b, O3_n parameters valid. NO3_k298 Rate constant 298 K NO3 reactions. NO3_uncert Uncertainty percentage certain NO3 reactions. NO3_u_fac Uncertainty plus/minus difference certain NO3 reactions. NO3_a, NO3_b, NO3_n Extended temperature dependence parameters bimolecular NO3 reactions, used Arrhenius expression: k(T)=exp(-B/T) (T/300)^n. , expressed cm^3 molecules^-1 s^-1, B units K, n dimensionless. NA values indicate data available. NO3_t_low, NO3_t_high low high temperature boundaries (units K) NO3_a, NO3_b, NO3_n parameters valid. Cl_k298 Rate constant 298 K Cl reactions. Cl_uncert Uncertainty percentage certain Cl reactions. Cl_u_fac Uncertainty plus/minus difference certain Cl reactions. Cl_a, Cl_b, Cl_n Extended temperature dependence parameters bimolecular Cl reactions, used Arrhenius expression: k(T)=exp(-B/T) (T/300)^n. , expressed cm^3 molecules^-1 s^-1, B units K, n dimensionless. NA values indicate data available. Cl_t_low, Cl_t_high low high temperature boundaries (units K) Cl_a, Cl_b, Cl_n parameters valid.","code":""},{"path":"https://gt.rstudio.com/reference/reactions.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"Reaction rates for gas-phase atmospheric reactions of organic compounds — reactions","text":"DATA-14","code":""},{"path":"https://gt.rstudio.com/reference/reactions.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"Reaction rates for gas-phase atmospheric reactions of organic compounds — reactions","text":"v0.11.0 (July 9, 2024)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/reactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reaction rates for gas-phase atmospheric reactions of organic compounds — reactions","text":"","code":"dplyr::glimpse(reactions) #> Rows: 1,683 #> Columns: 39 #> $ cmpd_name     <chr> \"methane\", \"formaldehyde\", \"methanol\", \"fluoromethane\", … #> $ cmpd_mwt      <dbl> 16.04, 30.03, 32.04, 34.03, 46.03, 48.02, 48.04, 50.49, … #> $ cmpd_formula  <chr> \"CH4\", \"CH2O\", \"CH4O\", \"CH3F\", \"CH2O2\", \"CHOF\", \"CH4O2\",… #> $ cmpd_type     <chr> \"normal alkane\", \"aldehyde\", \"alcohol or glycol\", \"haloa… #> $ cmpd_smiles   <chr> \"C\", \"C=O\", \"CO\", \"CF\", \"OC=O\", \"FC=O\", \"COO\", \"CCl\", \"F… #> $ cmpd_inchi    <chr> \"InChI=1S/CH4/h1H4\", \"InChI=1S/CH2O/c1-2/h1H2\", \"InChI=1… #> $ cmpd_inchikey <chr> \"VNWKTOKETHGBQD-UHFFFAOYSA-N\", \"WSFSSNUMVMOOMR-UHFFFAOYS… #> $ OH_k298       <dbl> 6.36e-15, 8.50e-12, 8.78e-13, 1.97e-14, 4.50e-13, NA, 1.… #> $ OH_uncert     <dbl> 0.10, 0.20, 0.10, 0.10, NA, NA, NA, 0.20, 0.10, 0.21, 0.… #> $ OH_u_fac      <dbl> NA, NA, NA, NA, 1.4, NA, 2.0, NA, NA, NA, NA, NA, NA, NA… #> $ OH_A          <dbl> 3.62e-13, 5.40e-12, 2.32e-13, 1.99e-13, 4.50e-13, NA, 5.… #> $ OH_B          <dbl> 1200.3487, -135.0000, -402.0000, 685.4204, NA, NA, -190.… #> $ OH_n          <dbl> 2.179936, NA, 2.720000, 2.040182, NA, NA, NA, NA, 1.8600… #> $ OH_t_low      <dbl> 200, 200, 210, 240, 290, NA, 220, 220, 220, 298, 298, NA… #> $ OH_t_high     <dbl> 2025, 300, 1344, 1800, 450, NA, 430, 330, 1800, 671, 393… #> $ O3_k298       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ O3_uncert     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ O3_u_fac      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ O3_A          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ O3_B          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ O3_n          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ O3_t_low      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ O3_t_high     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ NO3_k298      <dbl> NA, 5.5e-16, 1.3e-16, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ NO3_uncert    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ NO3_u_fac     <dbl> NA, 1.6, 3.0, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ NO3_A         <dbl> NA, NA, 9.4e-13, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ NO3_B         <dbl> NA, NA, 2650, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ NO3_n         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ NO3_t_low     <dbl> NA, NA, 250, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ NO3_t_high    <dbl> NA, NA, 370, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ Cl_k298       <dbl> 1.00e-13, 7.20e-11, 5.10e-11, 3.60e-13, 1.90e-13, 1.90e-… #> $ Cl_uncert     <dbl> 0.15, 0.15, 0.20, NA, NA, 0.11, NA, 0.10, 0.15, NA, 0.14… #> $ Cl_u_fac      <dbl> NA, NA, NA, 1.4, 1.4, NA, 3.0, NA, NA, NA, NA, NA, 2.0, … #> $ Cl_A          <dbl> 6.60e-12, 8.10e-11, 5.10e-11, 4.90e-12, NA, NA, NA, 4.32… #> $ Cl_B          <dbl> 1240.0, 34.0, 0.0, 781.0, NA, NA, NA, 646.4, 1591.0, NA,… #> $ Cl_n          <dbl> NA, NA, NA, NA, NA, NA, NA, 1.3057, NA, NA, NA, NA, NA, … #> $ Cl_t_low      <dbl> 200, 200, 225, 200, NA, NA, NA, 222, 250, NA, NA, 220, 2… #> $ Cl_t_high     <dbl> 300, 500, 950, 300, NA, NA, NA, 843, 300, NA, NA, 330, 3…"},{"path":"https://gt.rstudio.com/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr vars htmltools css magrittr %>% tidyselect all_of, any_of, contains, ends_with, everything, matches, num_range, one_of, starts_with, ","code":""},{"path":"https://gt.rstudio.com/reference/render_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"A gt display table render function for use in Shiny — render_gt","title":"A gt display table render function for use in Shiny — render_gt","text":"render_gt() can create reactive gt table works wonderfully assigned output slot (gt_output()). function used within Shiny's server() component. options controlling size container holding gt table. width height arguments allow sizing container, align argument allows us align table within container (fine-grained options positioning available tab_options()). table interactive, selected row indices (relative underlying data, regardless sorting) available input$id, id outputId used table gt_output(). user deselected rows, value 0 (vs NULL table initializes).","code":""},{"path":"https://gt.rstudio.com/reference/render_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A gt display table render function for use in Shiny — render_gt","text":"","code":"render_gt(   expr,   width = NULL,   height = NULL,   align = NULL,   env = parent.frame(),   quoted = FALSE,   outputArgs = list() )"},{"path":"https://gt.rstudio.com/reference/render_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A gt display table render function for use in Shiny — render_gt","text":"expr Expression <expression>|obj:<data.frame>|obj:<tbl_df> expression creates gt table object. sake convenience, data frame tibble can used (automatically introduced gt() default options). width, height Dimensions table container scalar<numeric|integer|character> // default: NULL (optional) width height table's container. Either can specified single-length character vector units pixels percentage. provided single-length numeric vector, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percent units. align Table alignment scalar<character> // default: NULL (optional) alignment table container. NULL, table center-aligned. Valid options : \"center\", \"left\", \"right\". env Evaluation environment <environment> // default: parent.frame() environment evaluate expr. quoted Option quote() expr scalar<logical> // default: FALSE expr quoted expression (quote())? useful want save expression variable. outputArgs Output arguments list // default: list() list arguments passed implicit call gt_output() render_gt() used interactive R Markdown document.","code":""},{"path":"https://gt.rstudio.com/reference/render_gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A gt display table render function for use in Shiny — render_gt","text":"object class shiny.render.function.","code":""},{"path":"https://gt.rstudio.com/reference/render_gt.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A gt display table render function for use in Shiny — render_gt","text":"Shiny app (contained within single file) (1) prepares gt table, (2) sets ui gt_output(), (3) sets server render_gt() uses gt_tbl object input expression.","code":"library(shiny)  gt_tbl <-   gtcars |>   gt() |>   fmt_currency(columns = msrp, decimals = 0) |>   cols_hide(columns = -c(mfr, model, year, mpg_c, msrp)) |>   cols_label_with(columns = everything(), fn = toupper) |>   data_color(columns = msrp, method = \"numeric\", palette = \"viridis\") |>   sub_missing() |>   opt_interactive(use_compact_mode = TRUE)  ui <- fluidPage(   gt_output(outputId = \"table\") )  server <- function(input, output, session) {   output$table <- render_gt(expr = gt_tbl) }  shinyApp(ui = ui, server = server)"},{"path":"https://gt.rstudio.com/reference/render_gt.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"A gt display table render function for use in Shiny — render_gt","text":"12-1","code":""},{"path":"https://gt.rstudio.com/reference/render_gt.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"A gt display table render function for use in Shiny — render_gt","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/rm_caption.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the table caption — rm_caption","title":"Remove the table caption — rm_caption","text":"can easily remove caption text gt table rm_caption(). caption may exist set gt() caption argument via tab_caption(). function removal useful received gt table (perhaps API returns gt objects) prefer table caption . function safe use even table caption set input gt_tbl object.","code":""},{"path":"https://gt.rstudio.com/reference/rm_caption.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the table caption — rm_caption","text":"","code":"rm_caption(data)"},{"path":"https://gt.rstudio.com/reference/rm_caption.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the table caption — rm_caption","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function.","code":""},{"path":"https://gt.rstudio.com/reference/rm_caption.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove the table caption — rm_caption","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/rm_caption.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove the table caption — rm_caption","text":"Use portion gtcars dataset create gt table. add header part tab_header(), , caption also added via tab_caption().    decide want caption gt_tbl object, can removed rm_caption().","code":"gt_tbl <-   gtcars |>   dplyr::select(mfr, model, msrp) |>   dplyr::slice(1:5) |>   gt() |>   tab_header(     title = md(\"Data listing from **gtcars**\"),     subtitle = md(\"`gtcars` is an R dataset\")   ) |>   tab_caption(caption = md(\"**gt** table example.\"))  gt_tbl rm_caption(data = gt_tbl)"},{"path":"https://gt.rstudio.com/reference/rm_caption.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Remove the table caption — rm_caption","text":"7-6","code":""},{"path":"https://gt.rstudio.com/reference/rm_caption.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Remove the table caption — rm_caption","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/rm_footnotes.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove table footnotes — rm_footnotes","title":"Remove table footnotes — rm_footnotes","text":"one footnotes removed, rm_footnotes() allows selective removal. table footer optional table part positioned table body, containing areas footnotes source notes. function removal useful received gt table (perhaps API returns gt objects) prefer footnotes removed. function safe use even footnotes input gt_tbl object long select helpers (default everything()) used instead explicit integer values.","code":""},{"path":"https://gt.rstudio.com/reference/rm_footnotes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove table footnotes — rm_footnotes","text":"","code":"rm_footnotes(data, footnotes = everything())"},{"path":"https://gt.rstudio.com/reference/rm_footnotes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove table footnotes — rm_footnotes","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. footnotes Footnotes remove scalar<numeric|integer>|everything() // default: everything() specification footnotes removed. footnotes removed can given vector integer values (stored integer positions, order creation, starting 1). select helper can also used , default, everything() (whereby footnotes removed).","code":""},{"path":"https://gt.rstudio.com/reference/rm_footnotes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove table footnotes — rm_footnotes","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/rm_footnotes.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove table footnotes — rm_footnotes","text":"Use subset sza dataset create gt table. Color sza column using data_color(), , use tab_footnote() twice add two footnotes (one targeting different column label).    decide want footnotes gt_tbl object, can removed rm_footnotes().    Individual footnotes can selectively removed. Footnotes identified index values. remove footnote concerning true solar time (footnote 2, since supplied gt footnote) give correct index value footnotes.","code":"gt_tbl <-   sza |>   dplyr::filter(     latitude == 20 &       month == \"jan\" &       !is.na(sza)   ) |>   dplyr::select(-latitude, -month) |>   gt() |>   data_color(     columns = sza,     palette = c(\"white\", \"yellow\", \"navyblue\"),     domain = c(0, 90)   ) |>   tab_footnote(     footnote = \"Color indicates height of sun.\",     locations = cells_column_labels(       columns = sza     )   ) |>   tab_footnote(     footnote = \"     The true solar time at the given latitude     and date (first of month) for which the     solar zenith angle is calculated.     \",     locations = cells_column_labels(       columns = tst     )   ) |>   cols_width(everything() ~ px(150))  gt_tbl rm_footnotes(data = gt_tbl) rm_footnotes(data = gt_tbl, footnotes = 2)"},{"path":"https://gt.rstudio.com/reference/rm_footnotes.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Remove table footnotes — rm_footnotes","text":"7-4","code":""},{"path":"https://gt.rstudio.com/reference/rm_footnotes.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Remove table footnotes — rm_footnotes","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/rm_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the table header — rm_header","title":"Remove the table header — rm_header","text":"can remove table header gt table quite easily rm_header(). table header optional table part (positioned column labels) can added tab_header(). function removal useful received gt table (perhaps API returns gt objects) prefer table contain header. function safe use even header part input gt_tbl object.","code":""},{"path":"https://gt.rstudio.com/reference/rm_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the table header — rm_header","text":"","code":"rm_header(data)"},{"path":"https://gt.rstudio.com/reference/rm_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the table header — rm_header","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function.","code":""},{"path":"https://gt.rstudio.com/reference/rm_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove the table header — rm_header","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/rm_header.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove the table header — rm_header","text":"use subset gtcars dataset create gt table. header part can added tab_header(); , get title subtitle table.    decide want header gt_tbl object, can removed rm_header().","code":"gt_tbl <-   gtcars |>   dplyr::select(mfr, model, msrp) |>   dplyr::slice(1:5) |>   gt() |>   tab_header(     title = md(\"Data listing from **gtcars**\"),     subtitle = md(\"`gtcars` is an R dataset\")   )  gt_tbl rm_header(data = gt_tbl)"},{"path":"https://gt.rstudio.com/reference/rm_header.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Remove the table header — rm_header","text":"7-1","code":""},{"path":"https://gt.rstudio.com/reference/rm_header.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Remove the table header — rm_header","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/rm_source_notes.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove table source notes — rm_source_notes","title":"Remove table source notes — rm_source_notes","text":"one source notes removed, rm_source_notes() allows selective removal. table footer optional table part positioned table body, containing areas source notes footnotes. function removal useful received gt table (perhaps API returns gt objects) prefer source notes removed. function safe use even source notes input gt_tbl object long select helpers (default everything()) used instead explicit integer values.","code":""},{"path":"https://gt.rstudio.com/reference/rm_source_notes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove table source notes — rm_source_notes","text":"","code":"rm_source_notes(data, source_notes = everything())"},{"path":"https://gt.rstudio.com/reference/rm_source_notes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove table source notes — rm_source_notes","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. source_notes Source notes remove scalar<numeric|integer>|everything() // default: everything() specification source notes removed. source notes removed can given vector integer values (stored integer positions, order creation, starting 1). select helper can also used , default, everything() (whereby source notes removed).","code":""},{"path":"https://gt.rstudio.com/reference/rm_source_notes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove table source notes — rm_source_notes","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/rm_source_notes.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove table source notes — rm_source_notes","text":"Use subset gtcars dataset create gt table. tab_source_note() used add source note table footer cites data source (, just arbitrary text). use function twice, effect adding two source notes footer.    decide want source notes gt_tbl object, can removed rm_source_notes().    Individual source notes can selectively removed. Source notes identified index values. remove source note concerning extent data (source note 2, since supplied gt source note) give correct index value source_notes.","code":"gt_tbl <-   gtcars |>   dplyr::select(mfr, model, msrp) |>   dplyr::slice(1:5) |>   gt() |>   tab_source_note(source_note = \"Data from the 'edmunds.com' site.\") |>   tab_source_note(source_note = \"Showing only the first five rows.\") |>   cols_width(everything() ~ px(120))  gt_tbl rm_source_notes(data = gt_tbl) rm_source_notes(data = gt_tbl, source_notes = 2)"},{"path":"https://gt.rstudio.com/reference/rm_source_notes.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Remove table source notes — rm_source_notes","text":"7-5","code":""},{"path":"https://gt.rstudio.com/reference/rm_source_notes.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Remove table source notes — rm_source_notes","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/rm_spanners.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove column spanner labels — rm_spanners","title":"Remove column spanner labels — rm_spanners","text":"like remove column spanner labels rm_spanners() function can make possible. Column spanner labels appear column labels can occupy several levels via stacking either tab_spanner() tab_spanner_delim(). Spanner column labels distinguishable accessible ID values. function removal useful received gt table (perhaps API returns gt objects) prefer column spanner labels removed. function safe use even column spanner labels input gt_tbl object long select helpers (default everything()) used instead explicit ID values.","code":""},{"path":"https://gt.rstudio.com/reference/rm_spanners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove column spanner labels — rm_spanners","text":"","code":"rm_spanners(data, spanners = everything(), levels = NULL)"},{"path":"https://gt.rstudio.com/reference/rm_spanners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove column spanner labels — rm_spanners","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. spanners Spanners remove <spanner-targeting expression> // default: everything() specification spanner column labels removed. removed can given vector spanner ID values (every spanner column label one, either set user gt using tab_spanner_delim()). select helper can also used , default, everything() (whereby spanner column labels removed). levels Spanner levels remove scalar<numeric|integer> // default: NULL (optional) Instead removing spanner column labels ID values, entire levels spanners can instead removed. Supply numeric vector level values (first level 1) , present, removed. input given level mean spanners ignored.","code":""},{"path":"https://gt.rstudio.com/reference/rm_spanners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove column spanner labels — rm_spanners","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/rm_spanners.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove column spanner labels — rm_spanners","text":"Use portion gtcars dataset create gt table. tab_spanner(), can group several related columns together spanner column. example, done several tab_spanner() calls order create two levels spanner column labels.    decide want spanners gt_tbl object, can removed rm_spanners().    Individual spanner column labels can removed ID value. uses tab_spanner(), label value ID value (can alternately set different ID value though id argument). remove \"HP\" \"MPG\" spanner column labels rm_spanners().    can also remove spanner column labels level rm_spanners(). Provide vector one values greater equal 1 (first level starts ). next example, remove first level spanner column labels. levels removed collapse accordingly.","code":"gt_tbl <-   gtcars |>   dplyr::select(     -mfr, -trim, bdy_style, drivetrain,     -drivetrain, -trsmn, -ctry_origin   ) |>   dplyr::slice(1:8) |>   gt(rowname_col = \"model\") |>   tab_spanner(label = \"HP\", columns = c(hp, hp_rpm)) |>   tab_spanner(label = \"Torque\", columns = c(trq, trq_rpm)) |>   tab_spanner(label = \"MPG\", columns = c(mpg_c, mpg_h)) |>   tab_spanner(     label = \"Performance\",     columns = c(       hp, hp_rpm, trq, trq_rpm,       mpg_c, mpg_h     )   )  gt_tbl rm_spanners(data = gt_tbl) rm_spanners(data = gt_tbl, spanners = c(\"HP\", \"MPG\")) rm_spanners(data = gt_tbl, levels = 1)"},{"path":"https://gt.rstudio.com/reference/rm_spanners.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Remove column spanner labels — rm_spanners","text":"7-3","code":""},{"path":"https://gt.rstudio.com/reference/rm_spanners.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Remove column spanner labels — rm_spanners","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/rm_stubhead.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the stubhead label — rm_stubhead","title":"Remove the stubhead label — rm_stubhead","text":"can easily remove stubhead label gt table rm_stubhead(). stubhead location exists table stub text cell added tab_stubhead(). function removal useful received gt table (perhaps API returns gt objects) prefer table contain content stubhead. function safe use even stubhead label input gt_tbl object.","code":""},{"path":"https://gt.rstudio.com/reference/rm_stubhead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the stubhead label — rm_stubhead","text":"","code":"rm_stubhead(data)"},{"path":"https://gt.rstudio.com/reference/rm_stubhead.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the stubhead label — rm_stubhead","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function.","code":""},{"path":"https://gt.rstudio.com/reference/rm_stubhead.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove the stubhead label — rm_stubhead","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/rm_stubhead.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove the stubhead label — rm_stubhead","text":"Using gtcars dataset, create gt table. tab_stubhead(), possible add stubhead label. appears top-left can used describe stub.    decide want stubhead label gt_tbl object, can removed rm_stubhead().","code":"gt_tbl <-   gtcars |>   dplyr::select(model, year, hp, trq) |>   dplyr::slice(1:5) |>   gt(rowname_col = \"model\") |>   tab_stubhead(label = \"car\")  gt_tbl rm_stubhead(data = gt_tbl)"},{"path":"https://gt.rstudio.com/reference/rm_stubhead.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Remove the stubhead label — rm_stubhead","text":"7-2","code":""},{"path":"https://gt.rstudio.com/reference/rm_stubhead.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Remove the stubhead label — rm_stubhead","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/row_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Select helper for targeting the row group column — row_group","title":"Select helper for targeting the row group column — row_group","text":"need target row group column column-width declarations (.e., row_group_as_column = TRUE set initial gt() call), row_group() select helper can used. shorthand makes use name column selected row group column.","code":""},{"path":"https://gt.rstudio.com/reference/row_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select helper for targeting the row group column — row_group","text":"","code":"row_group()"},{"path":"https://gt.rstudio.com/reference/row_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select helper for targeting the row group column — row_group","text":"character vector class \"row_group_column\".","code":""},{"path":"https://gt.rstudio.com/reference/row_group.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select helper for targeting the row group column — row_group","text":"Create tibble row column (values 1 6), group column, vals column (containing values row).   Create gt table two-column stub (incorporating row group columns ). can set widths two columns stub row_group() stub() helpers LHS expressions passed cols_width().","code":"tbl <-   dplyr::tibble(     row = 1:6,     group = c(rep(\"Group A\", 3), rep(\"Group B\", 3)),     vals = 1:6   ) tbl |>   gt(     rowname_col = \"row\",     groupname_col = \"group\",     row_group_as_column = TRUE   ) |>   fmt_roman(columns = stub()) |>   cols_width(     row_group() ~ px(200),     stub() ~ px(100),     vals ~ px(50)   )"},{"path":"https://gt.rstudio.com/reference/row_group.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Select helper for targeting the row group column — row_group","text":"8-11","code":""},{"path":"https://gt.rstudio.com/reference/row_group.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Select helper for targeting the row group column — row_group","text":"v0.11.0 (July 9, 2024)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/row_group_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify the ordering of any row groups — row_group_order","title":"Modify the ordering of any row groups — row_group_order","text":"can modify display order row groups gt object row_group_order(). groups argument takes vector row group ID values. function invoked, row groups adhere revised ordering. necessary provide row ID values groups, rather, provided assume specified ordering top table remaining row groups follow original ordering.","code":""},{"path":"https://gt.rstudio.com/reference/row_group_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify the ordering of any row groups — row_group_order","text":"","code":"row_group_order(data, groups)"},{"path":"https://gt.rstudio.com/reference/row_group_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify the ordering of any row groups — row_group_order","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. groups Specification row group IDs vector<character> // required character vector row group ID values corresponding revised ordering. vector must contain valid group ID values, required row group IDs within ; omitted values added end preserving original ordering.","code":""},{"path":"https://gt.rstudio.com/reference/row_group_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify the ordering of any row groups — row_group_order","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/row_group_order.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify the ordering of any row groups — row_group_order","text":"use exibble create gt table stub row groups. can modify order row groups row_group_order(), specifying new ordering groups.","code":"exibble |>   dplyr::select(char, currency, row, group) |>   gt(     rowname_col = \"row\",     groupname_col = \"group\"   ) |>   row_group_order(groups = c(\"grp_b\", \"grp_a\"))"},{"path":"https://gt.rstudio.com/reference/row_group_order.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Modify the ordering of any row groups — row_group_order","text":"6-3","code":""},{"path":"https://gt.rstudio.com/reference/row_group_order.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Modify the ordering of any row groups — row_group_order","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/rows-columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply conditional formatting to cells with rows and columns — rows-columns","title":"Apply conditional formatting to cells with rows and columns — rows-columns","text":"apply styling formatting, can use columns rows arguments. syntax familiar dplyr users can use tidyselect specification. Targeting values done columns additionally rows (nothing provided rows entire columns selected). columns argument allows us target subset cells contained resolved columns. say resolved aside declaring column names c() (bare column names names quotes) can use tidyselect-style expressions. can basic supplying select helper like starts_with(), , providing complex incantation like (~ .numeric(.x) & max(.x, na.rm = TRUE) > 1E6) targets numeric columns maximum value greater 1,000,000 (excluding NAs consideration). default columns rows selected (everything() defaults). Cell values incompatible given formatting function skipped , like character values numeric fmt_*() functions. safe select columns particular formatting function (values can formatted formatted), , may want . One strategy format bulk cell values one formatting function constrain columns later passes types formatting (last formatting done cell get final output). columns targeted, may also target rows within columns. can done variety ways. stub present, potentially row identifiers. can used much like column names columns-targeting scenario. can use simpler tidyselect-style expressions (select helpers work well ) can use quoted row identifiers c(). also possible use row indices (e.g., c(3, 5, 6)) though index values must correspond row numbers input data (indices necessarily match rearranged rows row groups present). One type expression possible, expression takes column values (can involve available columns table) returns logical vector. nice want base formatting values column another column, , like use complex predicate expression.","code":""},{"path":"https://gt.rstudio.com/reference/rows-columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply conditional formatting to cells with rows and columns — rows-columns","text":"","code":"gt_tbl <- gt(exibble) gt_tbl %>%   fmt_time(     columns = contains(\"time\") & !starts_with(\"date\"),      rows = num > 100 & group == \"grp_b\"   )     num       char       fctr       date       time       datetime       currency       row       group     1.111e-01 apricot one 2015-01-15 13:35 2018-01-01 02:22 49.950 row_1 grp_a2.222e+00 banana two 2015-02-15 14:40 2018-02-02 14:33 17.950 row_2 grp_a3.333e+01 coconut three 2015-03-15 15:45 2018-03-03 03:44 1.390 row_3 grp_a4.444e+02 durian four 2015-04-15 16:50 2018-04-04 15:55 65100.000 row_4 grp_a5.550e+03 NA five 2015-05-15 17:55:00 2018-05-05 04:00 1325.810 row_5 grp_bNA fig six 2015-06-15 NA 2018-06-06 16:11 13.255 row_6 grp_b7.770e+05 grapefruit seven NA 19:10:00 2018-07-07 05:22 NA row_7 grp_b8.880e+06 honeydew eight 2015-08-15 20:20:00 NA 0.440 row_8 grp_b # Styling numeric columns based on range  gt_tbl %>% tab_style(   style = cell_text(weight = \"bold\"),   locations = cells_body(   columns =  where(is.factor)   ) )     num       char       fctr       date       time       datetime       currency       row       group     1.111e-01 apricot one 2015-01-15 13:35 2018-01-01 02:22 49.950 row_1 grp_a2.222e+00 banana two 2015-02-15 14:40 2018-02-02 14:33 17.950 row_2 grp_a3.333e+01 coconut three 2015-03-15 15:45 2018-03-03 03:44 1.390 row_3 grp_a4.444e+02 durian four 2015-04-15 16:50 2018-04-04 15:55 65100.000 row_4 grp_a5.550e+03 NA five 2015-05-15 17:55 2018-05-05 04:00 1325.810 row_5 grp_bNA fig six 2015-06-15 NA 2018-06-06 16:11 13.255 row_6 grp_b7.770e+05 grapefruit seven NA 19:10 2018-07-07 05:22 NA row_7 grp_b8.880e+06 honeydew eight 2015-08-15 20:20 NA 0.440 row_8 grp_b # Naming rows  gt_tbl_rows <- gt(exibble, rowname_col = \"row\") gt_tbl_rows %>%   fmt_datetime(     columns = datetime,     rows = c(\"row_1\", \"row_8\")   )            num       char       fctr       date       time       datetime       currency       group     row_1 1.111e-01 apricot one 2015-01-15 13:35 2018-01-01 02:22:00 49.950 grp_arow_2 2.222e+00 banana two 2015-02-15 14:40 2018-02-02 14:33 17.950 grp_arow_3 3.333e+01 coconut three 2015-03-15 15:45 2018-03-03 03:44 1.390 grp_arow_4 4.444e+02 durian four 2015-04-15 16:50 2018-04-04 15:55 65100.000 grp_arow_5 5.550e+03 NA five 2015-05-15 17:55 2018-05-05 04:00 1325.810 grp_brow_6 NA fig six 2015-06-15 NA 2018-06-06 16:11 13.255 grp_brow_7 7.770e+05 grapefruit seven NA 19:10 2018-07-07 05:22 NA grp_brow_8 8.880e+06 honeydew eight 2015-08-15 20:20 NA 0.440 grp_b"},{"path":"https://gt.rstudio.com/reference/rows_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add one or more rows to a gt table — rows_add","title":"Add one or more rows to a gt table — rows_add","text":"possible add new rows table rows_add() supplying new row data name-value pairs two-sided formula expressions. new rows added bottom table default can added internally using either ..arguments. entirely empty rows need added, .n_empty option provides means specify number blank (.e., NA) rows inserted table.","code":""},{"path":"https://gt.rstudio.com/reference/rows_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add one or more rows to a gt table — rows_add","text":"","code":"rows_add(   .data,   ...,   .list = list2(...),   .before = NULL,   .after = NULL,   .n_empty = NULL )"},{"path":"https://gt.rstudio.com/reference/rows_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add one or more rows to a gt table — rows_add","text":".data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. ... Cell data assignments <multiple expressions> // (, use .list) Expressions assignment cell values new rows column name .data. Name-value pairs, form <column> = <value vector> work, long <column> value exists table. Two-sided formulas column-resolving expressions (e.g, <expr> ~ <value vector>) can also used, left-hand side corresponds selections columns. Column names enclosed c() select helpers like starts_with(), ends_with(), contains(), matches(), everything() can used LHS. length longest vector <value vector> determines many new rows added. Single values <value vector> repeated cases multiple rows added. .list Alternative ... <list multiple expressions> // (, use ...) Allows use list input alternative .... ., .Row used anchor <row-targeting expression> // default: NULL (optional) single row-resolving expression row index given either ... row specifies new rows positioned among existing rows input data table. select helper functions starts_with() ends_with() can used row targeting, recommended single row name index used. ensure exactly one row provided either arguments (otherwise, function stopped). nothing provided either argument new rows placed bottom table. .n_empty Number empty rows add scalar<numeric|integer>(val>=0) // default: NULL (optional) option add empty rows lieu rows containing data otherwise supplied ... .list. option taken, provide integer value .","code":""},{"path":"https://gt.rstudio.com/reference/rows_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add one or more rows to a gt table — rows_add","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/rows_add.html","id":"targeting-the-row-for-insertion-with-before-or-after","dir":"Reference","previous_headings":"","what":"Targeting the row for insertion with .before or .after","title":"Add one or more rows to a gt table — rows_add","text":"targeting row insertion done ..arguments (one options used). can done variety ways. stub present, potentially row identifiers. ideal method use establishing row target. can use tidyselect-style expressions target row. also possible use row indices (e.g., c(3, 5, 6)) though index values must correspond row numbers input data (indices necessarily match rearranged rows row groups present). One type expression possible, expression takes column values (can involve available columns table) returns logical vector.","code":""},{"path":"https://gt.rstudio.com/reference/rows_add.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add one or more rows to a gt table — rows_add","text":"make simple gt table exibble dataset, using row column labels stub. add single row bottom table rows_add(). name-value pairs, possible add values new body cells correspond columns available table. columns missed, related body cells receive NA values.    wanted place row somewhere middle table, can use either ..arguments rows_add():    Putting row beginning requires use .argument. can use index value row .= 1 maximum easiness:    exibble, can create example insert 'spacer' rows. rows without content merely serve add extra vertical space table specific locations. case, stub row names row groups (set gt() call). two rows added occupy bottom row group. data defined two rows involves values row group columns. important data group uses group names already present data (\"grp_a\" \"grp_b\"). corresponding values row \"row_a_end\" \"row_b_end\", used later expressions targeting rows. code needed generate spacer rows end row group:    missing values substituted empty string (\"\"), done using sub_missing(). removed top border new rows call tab_style(), targeting rows row labels end \"end\". Finally, get rid row labels use text_case_when(), using similar strategy targeting name row label. Another application starting nothing (really just definition columns) building table using several invocations rows_add(). might useful interactive programmatic applications. example two columns defined dplyr::tibble() (rows present initially); two calls rows_add(), two separate rows added.    possible use formula syntax rows_add() perform column resolution along attaching values new rows. wanted use equivalent value multiple cells new row, valid input form <expr> ~ <value vector>. following example, create simple table six columns (rendered gt table displays four columns stub column since group column used row group labels). add single row cell values added correspond columns resolved LHS formula expressions:    can see using starts_with(\"gr\") yields successful match group column tangible result addition row \"Group \" group (added row second one rendered gt table). use c(, b), possible add value 5 b columns. similar approach taken adding 72.63 value quantity_x quantity_y columns though used starts_with(\"quantity\") expression get gt resolve two columns. can start empty table (.e., columns rows) add one rows . completely empty table scenario, use something like dplyr::tibble() data.frame() gt(), first rows_add() rows arbitrary width. words, get generate table columns (rows) completely empty table via rows_add(). example :    , three columns three rows generated. second usage rows_add() use subset columns (three used create complete, new row). can also start virtually empty table: one columns actual rows. type multi-column, zero-row table, one needs use subset columns generating new rows rows_add().","code":"exibble |>   gt(rowname_col = \"row\") |>   rows_add(     row = \"row_9\",     num = 9.999E7,     char = \"ilama\",     fctr = \"nine\",     group = \"grp_b\"   ) exibble |>   gt(rowname_col = \"row\") |>   rows_add(     row = \"row_4.5\",     num = 9.923E3,     char = \"elderberry\",     fctr = \"eighty\",     group = \"grp_a\",     .after = \"row_4\"   ) exibble |>   gt(rowname_col = \"row\") |>   rows_add(     row = \"row_0\",     num = 0,     char = \"apple\",     fctr = \"zero\",     group = \"grp_a\",     .before = 1   ) exibble |>   gt(rowname_col = \"row\", groupname_col = \"group\") |>   rows_add(     row = c(\"row_a_end\", \"row_b_end\"),     group = c(\"grp_a\", \"grp_b\")   ) |>   tab_style(     style = cell_borders(sides = \"top\", style = \"hidden\"),     locations = list(       cells_body(rows = ends_with(\"end\")),       cells_stub(rows = ends_with(\"end\"))     )   ) |>   sub_missing(missing_text = \"\") |>   text_case_when(     grepl(\"end\", x) ~ \"\",     .locations = cells_stub()   ) |>   opt_vertical_padding(scale = 0.5) dplyr::tibble(   time = lubridate::POSIXct(),   event = character(0L) ) |>   gt() |>   rows_add(     time = lubridate::ymd_hms(\"2022-01-23 12:36:10\"),     event = \"start\"   ) |>   rows_add(     time = lubridate::ymd_hms(\"2022-01-23 13:41:26\"),     event = \"completed\"   ) dplyr::tibble(   group = c(\"Group A\", \"Group B\", \"Group B\"),   id = c(\"WG-025360\", \"WG-025361\", \"WG-025362\"),   a = c(1, 6, 2),   b = c(2, 6, 2),   quantity_x = c(83.58, 282.71, 92.20),   quantity_y = c(36.82, 282.71, 87.34) ) |>   gt(rowname_col = \"id\", groupname_col = \"group\") |>   rows_add(     starts_with(\"gr\") ~ \"Group A\",     id = \"WG-025363\",     c(a, b) ~ 5,     starts_with(\"quantity\") ~ 72.63   ) gt(dplyr::tibble()) |>   rows_add(     msrp = c(29.95, 49.95, 79.95),     item = c(\"Klax\", \"Rez\", \"Ys\"),     type = c(\"A\", \"B\", \"X\")   ) |>   rows_add(     msrp = 14.95,     item = \"D\",     type = \"Z\"   ) dplyr::tibble(   msrp = numeric(0L),   item = character(0L),   type = character(0L) ) |>   gt() |>   rows_add(     msrp = c(29.95, 49.95, 79.95, 14.95),     item = c(\"Klax\", \"Rez\", \"Ys\", \"D\"),     type = c(\"A\", \"B\", \"X\", \"Z\")   ) |>   cols_add(     genre = c(\"puzzle\", \"action\", \"RPG\", \"adventure\")   ) |>   fmt_currency() |>   cols_move_to_end(columns = msrp)"},{"path":"https://gt.rstudio.com/reference/rows_add.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add one or more rows to a gt table — rows_add","text":"6-4","code":""},{"path":"https://gt.rstudio.com/reference/rows_add.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Add one or more rows to a gt table — rows_add","text":"v0.10.0 (October 7, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/rx_addv.html","id":null,"dir":"Reference","previous_headings":"","what":"An ADDV-flavored clinical trial toy dataset — rx_addv","title":"An ADDV-flavored clinical trial toy dataset — rx_addv","text":"tibble contains artificial protocol deviation data 180 subjects Intent--Treat (ITT) population GT01 study. dataset contains usual parameters (PARAM, PARAMCD) addv. summary parameter (PARCAT1 == \"OVERALL\") subject GT01 ITT-population, indicating whether least one major protocol deviation (PD) occurred throughout course study respective subject. Individual records protocol deviations per subject exist, indicating specific type PD occurred. additional flag CRIT1FL, shows whether PD related COVID-19 . Although data intentionally created mimic typical clinical trial dataset following CDISC format, might strictly comply CDISC ADaM rules. intent showcase workflow clinical table creation rather creating fully CDISC-compliant ADaM dataset.","code":""},{"path":"https://gt.rstudio.com/reference/rx_addv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An ADDV-flavored clinical trial toy dataset — rx_addv","text":"","code":"rx_addv"},{"path":"https://gt.rstudio.com/reference/rx_addv.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An ADDV-flavored clinical trial toy dataset — rx_addv","text":"tibble 291 rows 20 variables: STUDYID, STUDYIDN unique study identifier numeric version. USUBJID unique subject identifier. TRTA, TRTAN study intervention numeric version, either \"Placebo\" (1), \"Drug 1\" (2), NA (3), missing screen failures). ITTFL Intent--Treat (ITT) population flag, \"Y\" indicates subject belongs ITT population \"N\" indicates subject ITT population. AGE age subject baseline years. AAGEGR1 analysis age group, indicating subject strictly younger 40 years baseline older. SEX Sex subject. Can either \"Male\", \"Female\" \"Undifferentiated\". ETHNIC Ethnicity subject. Can either \"Hispanic Latino\", \"Hispanic Latino\" missing (\"\"). BLBMI Body Mass Index (BMI) subject baseline kg/m2. DVTERM Protocol Deviation Term. PARAMCD, PARAM Parameter Code decoded parameter description protocol deviation. PARCAT1 Parameter category. Can \"OVERALL\" derived PD summaries \"PROTOCOL DEVIATION\" individual PDs. DVCAT Category PD, indicating whether PD major one . ACAT1 Analysis category 1. populated individual PDs, summary scores. High level category PDs. AVAL Analysis Value. Either 0 1. CRIT1, CRIT1FL Analysis Criterion 1 analysis criterion 1 flag, indicating whether PD related COVID-19 .","code":""},{"path":"https://gt.rstudio.com/reference/rx_addv.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"An ADDV-flavored clinical trial toy dataset — rx_addv","text":"DATA-18","code":""},{"path":"https://gt.rstudio.com/reference/rx_addv.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"An ADDV-flavored clinical trial toy dataset — rx_addv","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/rx_addv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An ADDV-flavored clinical trial toy dataset — rx_addv","text":"","code":"dplyr::glimpse(rx_addv) #> Rows: 291 #> Columns: 20 #> $ STUDYID  <chr> \"GT01\", \"GT01\", \"GT01\", \"GT01\", \"GT01\", \"GT01\", \"GT01\", \"GT01… #> $ STUDYIDN <chr> \"4001\", \"4001\", \"4001\", \"4001\", \"4001\", \"4001\", \"4001\", \"4001… #> $ USUBJID  <chr> \"GT1001\", \"GT1002\", \"GT1002\", \"GT1003\", \"GT1003\", \"GT1003\", \"… #> $ TRTA     <fct> Placebo, Placebo, Placebo, Placebo, Placebo, Placebo, Placebo… #> $ TRTAN    <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ ITTFL    <chr> \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"… #> $ AGE      <int> 41, 39, 39, 38, 38, 38, 45, 45, 35, 35, 35, 35, 35, 42, 35, 3… #> $ AAGEGR1  <fct> >=40, <40, <40, <40, <40, <40, >=40, >=40, <40, <40, <40, <40… #> $ SEX      <fct> Male, Female, Female, Male, Male, Male, Male, Male, Female, F… #> $ ETHNIC   <fct> Not Hispanic or Latino, Not Hispanic or Latino, Not Hispanic … #> $ BLBMI    <dbl> 33.35073, 30.45862, 30.45862, 22.85986, 22.85986, 22.85986, 2… #> $ DVTERM   <chr> \"\", \"\", \"Lab values not taken at month 3\", \"\", \"{gt} Question… #> $ PARAMCD  <fct> PDANYM, PDANYM, PDEV02, PDANYM, PDEV01, PDEV02, PDANYM, PDEV0… #> $ PARAM    <fct> At least one major Protocol Deviation, At least one major Pro… #> $ PARCAT1  <chr> \"OVERALL\", \"OVERALL\", \"PROTOCOL DEVIATION\", \"OVERALL\", \"PROTO… #> $ DVCAT    <chr> \"\", \"\", \"Major\", \"\", \"Major\", \"Major\", \"\", \"Major\", \"\", \"\", \"… #> $ ACAT1    <chr> \"\", \"\", \"Study Procedures Criteria Deviations\", \"\", \"Study Pr… #> $ AVAL     <dbl> 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1… #> $ CRIT1    <chr> \"COVID-19 Related\", \"COVID-19 Related\", \"COVID-19 Related\", \"… #> $ CRIT1FL  <chr> \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"…"},{"path":"https://gt.rstudio.com/reference/rx_adsl.html","id":null,"dir":"Reference","previous_headings":"","what":"An ADSL-flavored clinical trial toy dataset — rx_adsl","title":"An ADSL-flavored clinical trial toy dataset — rx_adsl","text":"tibble contains artificial data 182 subjects GT01 study. row corresponds demographic characteristics single trial participant. Two 182 study participants screen failures thus treated, rest study population randomized 1:1 ratio receive either \"Placebo\" (comparator) \"Drug 1\". dataset entails subject level demographics age, age group, sex, ethnicity, body mass index (BMI) baseline, well event flag, indicating whether subject experienced specific event throughout course study . Although data intentionally created mimic typical clinical trial dataset following CDISC format, might strictly comply CDISC ADaM rules. intent showcase workflow clinical table creation rather creating fully CDISC-compliant ADaM dataset.","code":""},{"path":"https://gt.rstudio.com/reference/rx_adsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An ADSL-flavored clinical trial toy dataset — rx_adsl","text":"","code":"rx_adsl"},{"path":"https://gt.rstudio.com/reference/rx_adsl.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An ADSL-flavored clinical trial toy dataset — rx_adsl","text":"tibble 182 rows 14 variables: STUDYID, STUDYIDN unique study identifier numeric version. USUBJID unique subject identifier. TRTA, TRTAN study intervention numeric version, either \"Placebo\" (1), \"Drug 1\" (2) NA (3), missing screen failures). ITTFL Intent--Treat (ITT) population flag, \"Y\" indicates subject belongs ITT population \"N\" indicates subject ITT population. RANDFL Randomization flag, \"Y\" indicates subject randomized receive either \"Placebo\" \"Drug 1\" \"N\" indicates subject randomized . SCRFREAS reason screen failure. either missing (\"\") non-screen failure subjects indicates reason screen failure AGE age subject baseline years. AAGEGR1 analysis age group, indicating subject strictly younger 40 years baseline older. SEX Sex subject. Can either \"Male\", \"Female\" \"Undifferentiated\". ETHNIC Ethnicity subject. Can either \"Hispanic Latino\", \"Hispanic Latino\" missing (\"\"). BLBMI Body Mass Index (BMI) subject baseline kg/m2. EVNTFL Event Flag. Indicates whether subject experienced specific event course study . Can either \"Y\" (subject event) \"N\".","code":""},{"path":"https://gt.rstudio.com/reference/rx_adsl.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"An ADSL-flavored clinical trial toy dataset — rx_adsl","text":"DATA-17","code":""},{"path":"https://gt.rstudio.com/reference/rx_adsl.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"An ADSL-flavored clinical trial toy dataset — rx_adsl","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/rx_adsl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An ADSL-flavored clinical trial toy dataset — rx_adsl","text":"","code":"dplyr::glimpse(rx_adsl) #> Rows: 182 #> Columns: 14 #> $ STUDYID  <chr> \"GT01\", \"GT01\", \"GT01\", \"GT01\", \"GT01\", \"GT01\", \"GT01\", \"GT01… #> $ STUDYIDN <chr> \"4001\", \"4001\", \"4001\", \"4001\", \"4001\", \"4001\", \"4001\", \"4001… #> $ USUBJID  <chr> \"GT1000\", \"GT1001\", \"GT1002\", \"GT1003\", \"GT1004\", \"GT1005\", \"… #> $ TRTA     <fct> NA, Placebo, Placebo, Placebo, Placebo, Placebo, Placebo, Pla… #> $ TRTAN    <dbl> 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ ITTFL    <chr> \"N\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"… #> $ RANDFL   <chr> \"N\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"… #> $ SCRFREAS <chr> \"WITHDRAWAL BY SUBJECT\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", … #> $ AGE      <int> 37, 41, 39, 38, 45, 35, 42, 35, 42, 38, 48, 36, 46, 34, 44, 4… #> $ AAGEGR1  <fct> <40, >=40, <40, <40, >=40, <40, >=40, <40, >=40, <40, >=40, <… #> $ SEX      <fct> Male, Male, Female, Male, Male, Female, Female, Male, Male, F… #> $ ETHNIC   <fct> Hispanic or Latino, Not Hispanic or Latino, Not Hispanic or L… #> $ BLBMI    <dbl> 33.76723, 33.35073, 30.45862, 22.85986, 23.89713, 29.09856, 2… #> $ EVNTFL   <chr> \"\", \"Y\", \"Y\", \"N\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"Y…"},{"path":"https://gt.rstudio.com/reference/sp500.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily S&P 500 Index data from 1950 to 2015 — sp500","title":"Daily S&P 500 Index data from 1950 to 2015 — sp500","text":"dataset provides daily price indicators S&P 500 index beginning 1950 end 2015. index includes 500 leading companies captures 80 percent coverage available market capitalization.","code":""},{"path":"https://gt.rstudio.com/reference/sp500.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily S&P 500 Index data from 1950 to 2015 — sp500","text":"","code":"sp500"},{"path":"https://gt.rstudio.com/reference/sp500.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Daily S&P 500 Index data from 1950 to 2015 — sp500","text":"tibble 16,607 rows 7 variables: date date expressed Date values. open, high, low, close day's opening, high, low, closing prices USD. close price adjusted splits. volume number trades given date. adj_close close price adjusted dividends splits.","code":""},{"path":"https://gt.rstudio.com/reference/sp500.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"Daily S&P 500 Index data from 1950 to 2015 — sp500","text":"DATA-4","code":""},{"path":"https://gt.rstudio.com/reference/sp500.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"Daily S&P 500 Index data from 1950 to 2015 — sp500","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/sp500.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Daily S&P 500 Index data from 1950 to 2015 — sp500","text":"","code":"dplyr::glimpse(sp500) #> Rows: 16,607 #> Columns: 7 #> $ date      <date> 2015-12-31, 2015-12-30, 2015-12-29, 2015-12-28, 2015-12-24,… #> $ open      <dbl> 2060.59, 2077.34, 2060.54, 2057.77, 2063.52, 2042.20, 2023.1… #> $ high      <dbl> 2062.54, 2077.34, 2081.56, 2057.77, 2067.36, 2064.73, 2042.7… #> $ low       <dbl> 2043.62, 2061.97, 2060.54, 2044.20, 2058.73, 2042.20, 2020.4… #> $ close     <dbl> 2043.94, 2063.36, 2078.36, 2056.50, 2060.99, 2064.29, 2038.9… #> $ volume    <dbl> 2655330000, 2367430000, 2542000000, 2492510000, 1411860000, … #> $ adj_close <dbl> 2043.94, 2063.36, 2078.36, 2056.50, 2060.99, 2064.29, 2038.9…"},{"path":"https://gt.rstudio.com/reference/stub.html","id":null,"dir":"Reference","previous_headings":"","what":"Select helper for targeting the stub column — stub","title":"Select helper for targeting the stub column — stub","text":"need target stub column formatting operations, stub() select helper can used. obviates need use name column selected stub column.","code":""},{"path":"https://gt.rstudio.com/reference/stub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select helper for targeting the stub column — stub","text":"","code":"stub()"},{"path":"https://gt.rstudio.com/reference/stub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select helper for targeting the stub column — stub","text":"character vector class \"stub_column\".","code":""},{"path":"https://gt.rstudio.com/reference/stub.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select helper for targeting the stub column — stub","text":"Create tibble row column (values 1 6), group column, vals column (containing values row).   Create gt table two-column stub (incorporating row group columns ). Format row labels stub fmt_roman() obtain Roman numerals stub; selecting stub column stub() select helper.","code":"tbl <-   dplyr::tibble(     row = 1:6,     group = c(rep(\"Group A\", 3), rep(\"Group B\", 3)),     vals = 1:6   ) tbl |>   gt(rowname_col = \"row\", groupname_col = \"group\") |>   fmt_roman(columns = stub()) |>   tab_options(row_group.as_column = TRUE)"},{"path":"https://gt.rstudio.com/reference/stub.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Select helper for targeting the stub column — stub","text":"8-10","code":""},{"path":"https://gt.rstudio.com/reference/stub.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Select helper for targeting the stub column — stub","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/sub_large_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute large values in the table body — sub_large_vals","title":"Substitute large values in the table body — sub_large_vals","text":"Wherever numerical data large value, replacement text may better explanatory purposes. sub_large_vals() allows replacement specification threshold, large_pattern, sign (positive negative) values considered.","code":""},{"path":"https://gt.rstudio.com/reference/sub_large_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute large values in the table body — sub_large_vals","text":"","code":"sub_large_vals(   data,   columns = everything(),   rows = everything(),   threshold = 1e+12,   large_pattern = \">={x}\",   sign = \"+\" )"},{"path":"https://gt.rstudio.com/reference/sub_large_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute large values in the table body — sub_large_vals","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() columns substitution operations constrained. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows form constraint targeting operations. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). threshold Threshold value scalar<numeric|integer> // default: 1E12 threshold value values considered large enough replacement. large_pattern Pattern specification large values scalar<character> // default: \">={x}\" pattern text used place suitably large values rendered table. sign Consider positive negative values? scalar<character> // default: \"+\" sign numbers considered replacement. default, consider positive values (\"+\"). option (\"-\") can used consider negative values.","code":""},{"path":"https://gt.rstudio.com/reference/sub_large_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute large values in the table body — sub_large_vals","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/sub_large_vals.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute large values in the table body — sub_large_vals","text":"generate simple, single-column tibble contains assortment values potentially undergo substitution.   tbl object contains variety larger numbers might larger enough reformat threshold value. sub_large_vals() can just :    Large negative values can also handled handled specially sign parameter. Setting \"-\" format large values negative. Notice default large_pattern value \">={x}\" \">=\" automatically changed \"<=\".    settle default threshold value default replacement pattern (large_pattern). can changed \"{x}\" large_pattern (uses threshold value) can even omitted.","code":"tbl <- dplyr::tibble(num = c(0, NA, 10^(8:14)))  tbl #> # A tibble: 9 x 1 #>     num #>   <dbl> #> 1  0 #> 2 NA #> 3  1e 8 #> 4  1e 9 #> 5  1e10 #> 6  1e11 #> 7  1e12 #> 8  1e13 #> 9  1e14 tbl |>   gt() |>   fmt_number(columns = num) |>   sub_large_vals() tbl |>   dplyr::mutate(num = -num) |>   gt() |>   fmt_number(columns = num) |>   sub_large_vals(sign = \"-\") tbl |>   gt() |>   fmt_number(columns = num) |>   sub_large_vals(     threshold = 5E10,     large_pattern = \"hugemongous\"   )"},{"path":"https://gt.rstudio.com/reference/sub_large_vals.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Substitute large values in the table body — sub_large_vals","text":"3-34","code":""},{"path":"https://gt.rstudio.com/reference/sub_large_vals.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Substitute large values in the table body — sub_large_vals","text":"v0.6.0 (May 24, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/sub_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute missing values in the table body — sub_missing","title":"Substitute missing values in the table body — sub_missing","text":"Wherever missing data (.e., NA values) customizable content may present better standard NA text otherwise appear. sub_missing() allows replacement missing_text argument (em dash serves default).","code":""},{"path":"https://gt.rstudio.com/reference/sub_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute missing values in the table body — sub_missing","text":"","code":"sub_missing(   data,   columns = everything(),   rows = everything(),   missing_text = \"---\" )"},{"path":"https://gt.rstudio.com/reference/sub_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute missing values in the table body — sub_missing","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() columns substitution operations constrained. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows form constraint targeting operations. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). missing_text Replacement text NA values scalar<character> // default: \"---\" text used place NA values rendered table. can optionally use md() html() style text Markdown retain HTML elements text.","code":""},{"path":"https://gt.rstudio.com/reference/sub_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute missing values in the table body — sub_missing","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/sub_missing.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute missing values in the table body — sub_missing","text":"Use select columns exibble dataset create gt table. NA values different columns (, using column indices columns) given two variations replacement text two separate calls sub_missing().","code":"exibble |>   dplyr::select(-row, -group) |>   gt() |>   sub_missing(     columns = 1:2,     missing_text = \"missing\"   ) |>   sub_missing(     columns = 4:7,     missing_text = \"nothing\"   )"},{"path":"https://gt.rstudio.com/reference/sub_missing.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Substitute missing values in the table body — sub_missing","text":"3-31","code":""},{"path":"https://gt.rstudio.com/reference/sub_missing.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Substitute missing values in the table body — sub_missing","text":"v0.6.0 (May 24, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/sub_small_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute small values in the table body — sub_small_vals","title":"Substitute small values in the table body — sub_small_vals","text":"Wherever numerical data small value, replacement text may better explanatory purposes. sub_small_vals() allows replacement specification threshold, small_pattern, sign values considered. substitution occur values found 0 threshold value. possible small positive small negative values (can explicitly set sign option). Note interval include 0 threshold value. need include zero values, use sub_zero().","code":""},{"path":"https://gt.rstudio.com/reference/sub_small_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute small values in the table body — sub_small_vals","text":"","code":"sub_small_vals(   data,   columns = everything(),   rows = everything(),   threshold = 0.01,   small_pattern = if (sign == \"+\") \"<{x}\" else md(\"<*abs*(-{x})\"),   sign = \"+\" )"},{"path":"https://gt.rstudio.com/reference/sub_small_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute small values in the table body — sub_small_vals","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() columns substitution operations constrained. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows form constraint targeting operations. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). threshold Threshold value scalar<numeric|integer> // default: 0.01 threshold value values considered small enough replacement. small_pattern Pattern specification small values scalar<character> // default: (sign == \"+\") \"<{x}\" else md(\"<*abs*(-{x})\") pattern text used place suitably small values rendered table. sign Consider positive negative values? scalar<character> // default: \"+\" sign numbers considered replacement. default, consider positive values (\"+\"). option (\"-\") can used consider negative values.","code":""},{"path":"https://gt.rstudio.com/reference/sub_small_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute small values in the table body — sub_small_vals","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/sub_small_vals.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute small values in the table body — sub_small_vals","text":"generate simple, single-column tibble contains assortment values potentially undergo substitution.   tbl contains variety smaller numbers might small enough reformat threshold value. sub_small_vals() can just :    Small negative values can also handled handled specially sign parameter. Setting \"-\" format small, negative values.    settle default threshold value default replacement pattern (small_pattern). can changed \"{x}\" small_pattern (uses threshold value) can even omitted.","code":"tbl <- dplyr::tibble(num = c(10^(-4:2), 0, NA))  tbl #> # A tibble: 9 x 1 #>        num #>      <dbl> #> 1   0.0001 #> 2   0.001 #> 3   0.01 #> 4   0.1 #> 5   1 #> 6  10 #> 7 100 #> 8   0 #> 9  NA tbl |>   gt() |>   fmt_number(columns = num) |>   sub_small_vals() tbl |>   dplyr::mutate(num = -num) |>   gt() |>   fmt_number(columns = num) |>   sub_small_vals(sign = \"-\") tbl |>   gt() |>   fmt_number(columns = num) |>   sub_small_vals(     threshold = 0.0005,     small_pattern = \"smol\"   )"},{"path":"https://gt.rstudio.com/reference/sub_small_vals.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Substitute small values in the table body — sub_small_vals","text":"3-33","code":""},{"path":"https://gt.rstudio.com/reference/sub_small_vals.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Substitute small values in the table body — sub_small_vals","text":"v0.6.0 (May 24, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/sub_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute targeted values in the table body — sub_values","title":"Substitute targeted values in the table body — sub_values","text":"need replace specific cell values custom text, sub_values() can good choice. can target cells replacement value, regex, custom matching rules.","code":""},{"path":"https://gt.rstudio.com/reference/sub_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute targeted values in the table body — sub_values","text":"","code":"sub_values(   data,   columns = everything(),   rows = everything(),   values = NULL,   pattern = NULL,   fn = NULL,   replacement = NULL,   escape = TRUE )"},{"path":"https://gt.rstudio.com/reference/sub_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute targeted values in the table body — sub_values","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() columns substitution operations constrained. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows form constraint targeting operations. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). values Values match scalar<character|numeric|integer> // default: NULL (optional) specific value values replaced replacement value. pattern also supplied values ignored. pattern Regex pattern match scalar<character> // default: NULL (optional) regex pattern can target solely values character-based columns. values also supplied, pattern take precedence. fn Function return logical values <function> // default: NULL (optional) supplied function operates x (data column) return logical vector matches length x (.e., number rows input table). either values pattern also supplied, fn take precedence. replacement Replacement value matches scalar<character|numeric|integer> // default: NULL (optional) replacement value cell values matched either values pattern. Must character numeric vector length 1. escape Text escaping scalar<logical> // default: TRUE option escape replacement text according final output format table. example, LaTeX table generated LaTeX escaping performed replacements rendering. default set TRUE setting FALSE useful case replacement text crafted specific output format mind.","code":""},{"path":"https://gt.rstudio.com/reference/sub_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute targeted values in the table body — sub_values","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/sub_values.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute targeted values in the table body — sub_values","text":"create input table three columns. contains assortment values potentially undergo substitution via sub_values().   Values table body cells can replaced specifying values replaced (values) replacement value . okay search numerical character values across columns replacement value can also numeric character types.    can also use pattern argument target cell values replacement character-based columns.    flexibility, best use fn argument. need ensure function provide return logical vector invoked column cell values, taken x (, length vector must match length x).","code":"tbl <-   dplyr::tibble(     num_1 = c(-0.01, 74, NA, 0, 500, 0.001, 84.3),     int_1 = c(1L, -100000L, 800L, 5L, NA, 1L, -32L),     lett = LETTERS[1:7]   )  tbl #> # A tibble: 7 x 3 #>     num_1   int_1 lett #>     <dbl>   <int> <chr> #> 1  -0.01        1 A #> 2  74     -100000 B #> 3  NA         800 C #> 4   0           5 D #> 5 500          NA E #> 6   0.001       1 F #> 7  84.3       -32 G tbl |>   gt() |>   sub_values(values = c(74, 500), replacement = 150) |>   sub_values(values = \"B\", replacement = \"Bee\") |>   sub_values(values = 800, replacement = \"Eight hundred\") tbl |>   gt() |>   sub_values(pattern = \"A|C|E\", replacement = \"Ace\") tbl |>   gt() |>   sub_values(     fn = function(x) x >= 0 & x < 50,     replacement = \"Between 0 and 50\"   )"},{"path":"https://gt.rstudio.com/reference/sub_values.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Substitute targeted values in the table body — sub_values","text":"3-35","code":""},{"path":"https://gt.rstudio.com/reference/sub_values.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Substitute targeted values in the table body — sub_values","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/sub_zero.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute zero values in the table body — sub_zero","title":"Substitute zero values in the table body — sub_zero","text":"Wherever numerical data zero value, replacement text may better explanatory purposes. sub_zero() allows replacement zero_text argument.","code":""},{"path":"https://gt.rstudio.com/reference/sub_zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute zero values in the table body — sub_zero","text":"","code":"sub_zero(data, columns = everything(), rows = everything(), zero_text = \"nil\")"},{"path":"https://gt.rstudio.com/reference/sub_zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute zero values in the table body — sub_zero","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. columns Columns target <column-targeting expression> // default: everything() columns substitution operations constrained. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows form constraint targeting operations. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). zero_text Replacement text zero values scalar<character> // default: \"nil\" text used place zero values rendered table. can optionally use md() html() style text Markdown retain HTML elements text.","code":""},{"path":"https://gt.rstudio.com/reference/sub_zero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute zero values in the table body — sub_zero","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/sub_zero.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substitute zero values in the table body — sub_zero","text":"generate simple, single-column tibble contains assortment values potentially undergo substitution.   table, zero values given replacement text single call sub_zero().","code":"tbl <- dplyr::tibble(num = c(10^(-1:2), 0, 0, 10^(4:6)))  tbl #> # A tibble: 9 x 1 #>         num #>       <dbl> #> 1       0.1 #> 2       1 #> 3      10 #> 4     100 #> 5       0 #> 6       0 #> 7   10000 #> 8  100000 #> 9 1000000 tbl |>   gt() |>   fmt_number(columns = num) |>   sub_zero()"},{"path":"https://gt.rstudio.com/reference/sub_zero.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Substitute zero values in the table body — sub_zero","text":"3-32","code":""},{"path":"https://gt.rstudio.com/reference/sub_zero.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Substitute zero values in the table body — sub_zero","text":"v0.6.0 (May 24, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Add group-wise summary rows using aggregation functions — summary_rows","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"Add summary rows one row groups using table data suitable aggregation functions. Multiple summary rows can added selected groups via expressions given fns. can selectively format values resulting summary cells use formatting expressions fmt.","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"","code":"summary_rows(   data,   groups = everything(),   columns = everything(),   fns = NULL,   fmt = NULL,   side = c(\"bottom\", \"top\"),   missing_text = \"---\",   formatter = NULL,   ... )"},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. groups Specification row group IDs <row-group-targeting expression> // default: everything() row groups targeting operations constrained. Can either series row group ID values provided c() select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). default set everything(), means available groups obtain summary rows. columns Columns target <column-targeting expression> // default: everything() columns summaries calculated. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). fns Aggregation Expressions <expression|list expressions> Functions used aggregations. can include base functions like mean, min, max, median, sd, sum user-defined aggregation function. Multiple functions, generate different row, supplied within list(). can specify functions use function names quotes (e.g., \"sum\"), bare functions (e.g., sum), formula form (e.g., minimum ~ min(.)) LHS used supply summary row label ID values. information can found Aggregation expressions fns section. fmt Formatting expressions <expression|list expressions> Formatting expressions formula form. RHS ~ contain formatting call (e.g., ~ fmt_number(., decimals = 3, use_seps = FALSE). Optionally, LHS contain group-targeting expression (e.g., \"group_a\" ~ fmt_number(.)). information can found Formatting expressions fmt section. side Side used placement summary rows singl-kw:[bottom|top] // default: \"bottom\" summary rows placed \"bottom\" (default) \"top\" row group? missing_text Replacement text NA values scalar<character> // default: \"---\" text used place NA values summary cells data outputs. formatter Deprecated Formatting function <expression> Deprecated, please use fmt instead. previously used way input formatting function name, fmt_*() functions available package (e.g., fmt_number(), fmt_percent(), etc.), custom function using fmt(). options formatter can accessed .... ... Deprecated Formatting arguments <Named arguments> Deprecated (along formatter) otherwise used argument values formatting function supplied formatter. example, using formatter = fmt_number, options decimals = 1, use_seps = FALSE, like can used .","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"using-columns-to-target-column-data-for-aggregation","dir":"Reference","previous_headings":"","what":"Using columns to target column data for aggregation","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"Targeting column data aggregates generated done columns argument. can declare column names c() (bare column names names quotes) can use tidyselect-style expressions. can basic supplying select helper like starts_with(), , providing complex incantation like (~ .numeric(.x) & max(.x, na.rm = TRUE) > 1E6) targets numeric columns maximum value greater 1,000,000 (excluding NAs consideration). default columns selected (everything() default). default may needed unless columns can undergo useful aggregation expressions supplied fns.","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"aggregation-expressions-for-fns","dir":"Reference","previous_headings":"","what":"Aggregation expressions for fns","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"number ways express aggregation work summary row. addition , ability pass important information summary row ID value label (former necessary targeting within tab_style() tab_footnote() latter used display rendered table). number instructive examples supply expressions.","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"double-sided-formula-with-everything-supplied","dir":"Reference","previous_headings":"","what":"Double-sided formula with everything supplied","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"can explicit provide double-sided formula (form <LHS> ~ <RHS>) expresses everything summary row. , aggregation expression (. represents data focused column). example: list(id = \"minimum\", label = \"min\") ~ min(., na.rm = TRUE) left side (list) contains named elements identify id label summary row. right side expression obtaining minimum value (dropping NA values calculation). list() can replaced c() advantage list allowing use md() html() helper functions. example can written : list(id = \"minimum\", label = md(\"**Minimum**\")) ~ min(., na.rm = TRUE) can label value interpreted Markdown text.","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"function-names-in-quotes","dir":"Reference","previous_headings":"","what":"Function names in quotes","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"fns = \"min\" get equivalent fuller expression: list(id = \"min\", label = \"min\") ~ min(., na.rm = TRUE) sake convenience, common aggregation functions na.rm argument rewritten na.rm = TRUE option. functions : \"min\", \"max\", \"mean\", \"median\", \"sd\", \"sum\". need specify multiple aggregation functions way (giving multiple summary rows), use c() list().","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"rhs-formula-expressions","dir":"Reference","previous_headings":"","what":"RHS formula expressions","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"fns = ~ min(.) fns = list(~ min(.)), gt use function name id label. expansion shorthand full form looks like : list(id = \"min\", label = \"min\") ~ min(.) RHS expression kept written name portion id label.","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"named-vector-or-list-with-rhs-formula-expression","dir":"Reference","previous_headings":"","what":"Named vector or list with RHS formula expression","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"Using fns = c(minimum = ~ min(.)) fns = list(minimum = ~ min(.)) expands : list(id = \"minimum\", label = \"minimum\") ~ min(.)","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"unnamed-vector-or-list-with-rhs-formula-expression","dir":"Reference","previous_headings":"","what":"Unnamed vector or list with RHS formula expression","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"fns = c(\"minimum\", \"min\") ~ min(.) fns = list(\"minimum\", \"min\") ~ min(.) LHS contains label id values , importantly, order label first id second. can rewritten : list(id = \"min\", label = \"minimum\") ~ min(.) vector list partially named, gt enough go disambiguate unnamed element. fns = c(\"minimum\", label = \"min\") ~ min(.), \"min\" indeed label \"minimum\" taken id value.","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"a-fully-named-list-with-three-specific-elements","dir":"Reference","previous_headings":"","what":"A fully named list with three specific elements","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"can avoid using formula satisfied default options function (except functions na.rm options, see ). Instead, list named elements id, label, fn used. can look like : fns = list(id = \"mean_id\", label = \"average\", fn = \"mean\") translates list(id = \"mean_id\", label = \"average\") ~ mean(., na.rm = TRUE)","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"formatting-expressions-for-fmt","dir":"Reference","previous_headings":"","what":"Formatting expressions for fmt","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"Given generating new data table, might also want take opportunity format new values right away. can fmt argument, either single expression number list.","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"formatting-cells-across-all-groups","dir":"Reference","previous_headings":"","what":"Formatting cells across all groups","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"can supply one-sided (RHS ) two-sided expression (targeting groups) fmt, , several can provided list. RHS always contain expression uses formatting function (e.g., fmt_number(), fmt_currency(), etc.) must contain initial . stands data object. performing numeric formatting columns new summary rows, might look something like : fmt = ~ fmt_number(., decimals = 1, use_seps = FALSE) can use columns rows arguments available every formatting function. allows us format subset columns rows. Summary rows can targeted using ID values settable within expressions given fns (see Aggregation expressions fns section details ). example hypothetical column row names: fmt = ~ fmt_number(., columns = num, rows = \"mean\", decimals = 3)","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"formatting-cells-in-specific-groups","dir":"Reference","previous_headings":"","what":"Formatting cells in specific groups","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"two-sided expression needed targeting formatting directives specific summary row groups. format, LHS contain expression resolves set available groups. can use single row group name quotes, several vector, select helper expression like starts_with() matches(). situation summary rows generated across row groups named \"group_1\", \"group_2\", \"group_3\", format summary cells \"group_2\" following: fmt = \"group_2\" ~ fmt_number(., decimals = 1, use_seps = FALSE) wanted target latter two groups, can done: fmt = matches(\"2|3\") ~ fmt_number(., decimals = 1, use_seps = FALSE) need target single cell, LHS expression group targeting paired single values columns rows RHS formatting expression. Like : fmt = \"group_1\" ~ fmt_number(., columns = num, rows = \"mean\")","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"extraction-of-summary-rows","dir":"Reference","previous_headings":"","what":"Extraction of summary rows","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"need obtain summary data external purposes, extract_summary() can used gt_tbl object summary rows added via summary_rows() grand_summary_rows().","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"Use modified version sp500 dataset create gt table row groups row labels. Create summary rows labeled min, max, avg row group (row group week number) summary_rows().    Using countrypops dataset, process bit giving gt. can create summary rows totals appear top row group (side = \"top\"). can define aggregation list contains parameters summary row label (md(\"****\")), shared ID value rows across groups (\"totals\"), aggregation function (expressed \"sum\", gt recognizes sum() function). top , add background fills summary rows tab_style().","code":"sp500 |>   dplyr::filter(date >= \"2015-01-05\" & date <= \"2015-01-16\") |>   dplyr::arrange(date) |>   dplyr::mutate(week = paste0(\"W\", strftime(date, format = \"%V\"))) |>   dplyr::select(-adj_close, -volume) |>   gt(     rowname_col = \"date\",     groupname_col = \"week\"   ) |>   summary_rows(     fns = list(       \"min\",       \"max\",       list(label = \"avg\", fn = \"mean\")     ),     fmt = ~ fmt_number(., use_seps = FALSE)   ) countrypops |>   dplyr::filter(     country_code_2 %in% c(\"BR\", \"RU\", \"IN\", \"CN\", \"FR\", \"DE\", \"IT\", \"GB\")   ) |>   dplyr::filter(year %% 10 == 0) |>   dplyr::select(country_name, year, population) |>   tidyr::pivot_wider(names_from = year, values_from = population) |>   gt(rowname_col = \"country_name\") |>   tab_row_group(     label = md(\"*BRIC*\"),     rows = c(\"Brazil\", \"Russia\", \"India\", \"China\"),     id = \"bric\"   ) |>   tab_row_group(     label = md(\"*Big Four*\"),     rows = c(\"France\", \"Germany\", \"Italy\", \"United Kingdom\"),     id = \"big4\"   ) |>   row_group_order(groups = c(\"bric\", \"big4\")) |>   tab_stub_indent(rows = everything()) |>   tab_header(title = \"Populations of the BRIC and Big Four Countries\") |>   tab_spanner(columns = everything(), label = \"Year\") |>   fmt_number(n_sigfig = 3, suffixing = TRUE) |>   summary_rows(     fns =  list(label = md(\"**ALL**\"), id = \"totals\", fn = \"sum\"),     fmt = ~ fmt_number(., n_sigfig = 3, suffixing = TRUE),     side = \"top\"   ) |>   tab_style(     locations = cells_summary(),     style = cell_fill(color = \"lightblue\" |> adjust_luminance(steps = +1))   )"},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"6-1","code":""},{"path":"https://gt.rstudio.com/reference/summary_rows.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Add group-wise summary rows using aggregation functions — summary_rows","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a themed font stack that works well across systems — system_fonts","title":"Get a themed font stack that works well across systems — system_fonts","text":"font stack can obtained system_fonts() using one various keywords \"system-ui\", \"old-style\", \"humanist\" (15 total) representing themed set fonts. sets comprise font family tested work across wide range computer systems. useful specifying font values cell_text() (used inside tab_style()). using opt_table_font(), can invoke function stack argument.","code":""},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a themed font stack that works well across systems — system_fonts","text":"","code":"system_fonts(name)"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a themed font stack that works well across systems — system_fonts","text":"name Name font stack scalar<character> // required name font stack. Must drawn set \"system-ui\", \"transitional\", \"old-style\", \"humanist\", \"geometric-humanist\", \"classical-humanist\", \"neo-grotesque\", \"monospace-slab-serif\", \"monospace-code\", \"industrial\", \"rounded-sans\", \"slab-serif\", \"antique\", \"didone\", \"handwritten\".","code":""},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a themed font stack that works well across systems — system_fonts","text":"character vector font names.","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"system-ui-system-ui-","dir":"Reference","previous_headings":"","what":"System UI (\"system-ui\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"operating system interface's default typefaces known system UI fonts. contain variety font weights, quite readable small sizes, perfect UI elements. typefaces serve great starting point text data tables font stack default gt.","code":"font-family: system-ui, sans-serif;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"transitional-transitional-","dir":"Reference","previous_headings":"","what":"Transitional (\"transitional\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"Enlightenment saw development transitional typefaces, combine Old Style Modern typefaces. Times New Roman, transitional typeface created Times London newspaper, among well-known instances style.","code":"font-family: Charter, 'Bitstream Charter', 'Sitka Text', Cambria, serif;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"old-style-old-style-","dir":"Reference","previous_headings":"","what":"Old Style (\"old-style\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"Old style typefaces created Renaissance distinguished diagonal stress, lack contrast thick thin strokes, rounded serifs. Garamond among well-known instances antique typeface.","code":"font-family: 'Iowan Old Style', 'Palatino Linotype', 'URW Palladio L', P052, serif;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"humanist-humanist-","dir":"Reference","previous_headings":"","what":"Humanist (\"humanist\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"Low contrast thick thin strokes organic, calligraphic forms traits humanist typefaces. typefaces, draw inspiration Renaissance calligraphy, frequently regarded readable easier read sans serif typefaces.","code":"font-family: Seravek, 'Gill Sans Nova', Ubuntu, Calibri, 'DejaVu Sans', source-sans-pro, sans-serif;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"geometric-humanist-geometric-humanist-","dir":"Reference","previous_headings":"","what":"Geometric Humanist (\"geometric-humanist\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"Clean, geometric forms consistent stroke widths characteristics geometric humanist typefaces. typefaces, frequently used headlines display purposes, frequently thought contemporary slick appearance. well-known example classification Futura.","code":"font-family: Avenir, Montserrat, Corbel, 'URW Gothic', source-sans-pro, sans-serif;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"classical-humanist-classical-humanist-","dir":"Reference","previous_headings":"","what":"Classical Humanist (\"classical-humanist\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"way strokes gradually widen approach stroke terminals without ending serif distinguishes classical humanist typefaces. stone carving Renaissance-era tombstones classical Roman capitals served inspiration typefaces.","code":"font-family: Optima, Candara, 'Noto Sans', source-sans-pro, sans-serif;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"neo-grotesque-neo-grotesque-","dir":"Reference","previous_headings":"","what":"Neo-Grotesque (\"neo-grotesque\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"Neo-grotesque typefaces form sans serif originated late 19th early 20th centuries. distinguished crisp, geometric shapes regular stroke widths. Helvetica among well-known examples Neo-grotesque typeface.","code":"font-family: Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"monospace-slab-serif-monospace-slab-serif-","dir":"Reference","previous_headings":"","what":"Monospace Slab Serif (\"monospace-slab-serif\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"Monospace slab serif typefaces distinguished fixed-width letters, width irrespective shape, straightforward, geometric forms. reports, tabular work, technical documentation, technique used simulate typewriter output.","code":"font-family: 'Nimbus Mono PS', 'Courier New', monospace;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"monospace-code-monospace-code-","dir":"Reference","previous_headings":"","what":"Monospace Code (\"monospace-code\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"Specifically created use programming technical applications, monospace code typefaces used fields. typefaces distinguished clear, readable forms monospaced design, ensures letters characters width.","code":"font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"industrial-industrial-","dir":"Reference","previous_headings":"","what":"Industrial (\"industrial\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"development industrial typefaces began late 19th century greatly influenced industrial technological advancements time. Industrial typefaces distinguished strong sans serif letterforms, straightforward appearance, use geometric shapes straight lines.","code":"font-family: Bahnschrift, 'DIN Alternate', 'Franklin Gothic Medium', 'Nimbus Sans Narrow', sans-serif-condensed, sans-serif;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"rounded-sans-rounded-sans-","dir":"Reference","previous_headings":"","what":"Rounded Sans (\"rounded-sans\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"rounded, curved letterforms define rounded typefaces give softer, friendlier appearance. typeface's rounded edges give natural playful feel, making appropriate use casual kid-friendly designs. Since 1950s, rounded sans-serif design gained popularity still frequently used branding, graphic design, fields.","code":"font-family: ui-rounded, 'Hiragino Maru Gothic ProN', Quicksand, Comfortaa, Manjari, 'Arial Rounded MT', 'Arial Rounded MT Bold', Calibri, source-sans-pro, sans-serif;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"slab-serif-slab-serif-","dir":"Reference","previous_headings":"","what":"Slab Serif (\"slab-serif\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"Slab Serif typefaces distinguished thick, block-like serifs appear ends letterform. Typically, serifs unbracketed, means curved tapered transitions letter's main stroke.","code":"font-family: Rockwell, 'Rockwell Nova', 'Roboto Slab', 'DejaVu Serif', 'Sitka Small', serif;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"antique-antique-","dir":"Reference","previous_headings":"","what":"Antique (\"antique\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"Serif typefaces popular 19th century include antique typefaces, also referred Egyptians. distinguished thick, uniform stroke weight block-like serifs.","code":"font-family: Superclarendon, 'Bookman Old Style', 'URW Bookman', 'URW Bookman L', 'Georgia Pro', Georgia, serif;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"didone-didone-","dir":"Reference","previous_headings":"","what":"Didone (\"didone\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"Didone typefaces, also referred Modern typefaces, distinguished vertical stress, sharp contrast thick thin strokes, hairline serifs without bracketing. Didone style first appeared late 18th century became well-known early 19th century.","code":"font-family: Didot, 'Bodoni MT', 'Noto Serif Display', 'URW Palladio L', P052, Sylfaen, serif;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"handwritten-handwritten-","dir":"Reference","previous_headings":"","what":"Handwritten (\"handwritten\")","title":"Get a themed font stack that works well across systems — system_fonts","text":"appearance feel handwriting replicated handwritten typefaces. Although wide variety handwriting styles, font stack tends use casual commonplace style.","code":"font-family: 'Segoe Print', 'Bradley Hand', Chilanka, TSCu_Comic, casual, cursive;"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a themed font stack that works well across systems — system_fonts","text":"Use subset sp500 dataset create gt table 10 rows. date column column labels, use different font stack (\"industrial\" one). system fonts used particular stack \"Bahnschrift\", \"DIN Alternate\", \"Franklin Gothic Medium\", \"Nimbus Sans Narrow\" (generic \"sans-serif-condensed\" \"sans-serif\" used aforementioned fonts available).","code":"sp500 |>   dplyr::slice(1:10) |>   dplyr::select(-volume, -adj_close) |>   gt() |>   fmt_currency() |>   tab_style(     style = cell_text(       font = system_fonts(name = \"industrial\"),       size = px(18)     ),     locations = list(       cells_body(columns = date),       cells_column_labels()     )   )"},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Get a themed font stack that works well across systems — system_fonts","text":"8-33","code":""},{"path":"https://gt.rstudio.com/reference/system_fonts.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Get a themed font stack that works well across systems — system_fonts","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/sza.html","id":null,"dir":"Reference","previous_headings":"","what":"Twice hourly solar zenith angles by month & latitude — sza","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"dataset contains solar zenith angles (degrees, range 0-90) every half hour 04:00 12:00, true solar time. set values calculated first every month 4 different northern hemisphere latitudes. determination afternoon values, presented tabulated values symmetric noon.","code":""},{"path":"https://gt.rstudio.com/reference/sza.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"","code":"sza"},{"path":"https://gt.rstudio.com/reference/sza.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"tibble 816 rows 4 variables: latitude latitude decimal degrees observations. month measurement month. calculations conducted first day month. tst true solar time given latitude date (first month) solar zenith angle calculated. sza solar zenith angle degrees, NAs indicate sunrise yet occurred tst value.","code":""},{"path":"https://gt.rstudio.com/reference/sza.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"Calculated Actinic Fluxes (290 - 700 nm) Air Pollution Photochemistry Applications (Peterson, 1976), available : https://nepis.epa.gov/Exe/ZyPURL.cgi?Dockey=9100JA26.txt.","code":""},{"path":"https://gt.rstudio.com/reference/sza.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"solar zenith angle (SZA) one measure helps describe sun's path across sky. defined angle sun relative line perpendicular earth's surface. useful calculate SZA relation true solar time. True solar time relates position sun respect observer, different depending exact longitude. example, two hours sun crosses meridian (highest point reach day) corresponds true solar time 10 .m. SZA strong dependence observer's latitude. example, latitude 50 degrees N start January, noontime SZA 73.0 different observer 20 degrees N measure noontime SZA 43.0 degrees.","code":""},{"path":"https://gt.rstudio.com/reference/sza.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"DATA-2","code":""},{"path":"https://gt.rstudio.com/reference/sza.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/sza.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Twice hourly solar zenith angles by month & latitude — sza","text":"","code":"dplyr::glimpse(sza) #> Rows: 816 #> Columns: 4 #> $ latitude <dbl> 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2… #> $ month    <fct> jan, jan, jan, jan, jan, jan, jan, jan, jan, jan, jan, jan, j… #> $ tst      <chr> \"0400\", \"0430\", \"0500\", \"0530\", \"0600\", \"0630\", \"0700\", \"0730… #> $ sza      <dbl> NA, NA, NA, NA, NA, NA, 84.9, 78.7, 72.7, 66.1, 61.5, 56.5, 5…"},{"path":"https://gt.rstudio.com/reference/tab_caption.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a table caption — tab_caption","title":"Add a table caption — tab_caption","text":"Add caption gt table, handled specially table within R Markdown, Quarto, bookdown context. addition captions makes tables cross-referencing across containing document. caption location (.e., top, bottom, margin) handled document level systems.","code":""},{"path":"https://gt.rstudio.com/reference/tab_caption.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a table caption — tab_caption","text":"","code":"tab_caption(data, caption)"},{"path":"https://gt.rstudio.com/reference/tab_caption.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a table caption — tab_caption","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. caption Table caption text scalar<character> // required table caption use cross-referencing R Markdown, Quarto, bookdown.","code":""},{"path":"https://gt.rstudio.com/reference/tab_caption.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a table caption — tab_caption","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_caption.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a table caption — tab_caption","text":"three columns gtcars dataset, create gt table. First, add header part tab_header(). , caption added tab_caption().","code":"gtcars |>   dplyr::select(mfr, model, msrp) |>   dplyr::slice(1:5) |>   gt() |>   tab_header(     title = md(\"Data listing from **gtcars**\"),     subtitle = md(\"`gtcars` is an R dataset\")   ) |>   tab_caption(caption = md(\"**gt** table example.\"))"},{"path":"https://gt.rstudio.com/reference/tab_caption.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add a table caption — tab_caption","text":"2-9","code":""},{"path":"https://gt.rstudio.com/reference/tab_caption.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Add a table caption — tab_caption","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a table footnote — tab_footnote","title":"Add a table footnote — tab_footnote","text":"tab_footnote() can make painless process add footnote gt table. commonly two components footnote: (1) footnote mark attached targeted cell content, (2) footnote text placed table's footer area. unit footnote text footer linked element text otherwise footnote mark. footnote system gt presents footnotes way matches usual expectations, : footnote marks sequence, whether symbols, numbers, letters multiple footnotes can applied content (marks always presented ordered fashion) footnote text footer never exactly repeated, gt reuses footnote marks needed throughout table footnote marks ordered across table consistent manner (left right, top bottom) call tab_footnote() either add different footnote footer reuse existing footnote text therein. One cells outside footer targeted using cells_*() helper functions (e.g., cells_body(), cells_column_labels(), etc.). can choose attach footnote mark simply specifying anything locations argument. default, gt choose side text place footnote mark via placement = \"auto\" option. , however, always free choose placement footnote mark (either \"left \"right\" targeted cell content).","code":""},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a table footnote — tab_footnote","text":"","code":"tab_footnote(   data,   footnote,   locations = NULL,   placement = c(\"auto\", \"right\", \"left\") )"},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a table footnote — tab_footnote","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. footnote Footnote text scalar<character> // required text used footnote. can optionally use md() html() style text Markdown retain HTML elements footnote text. locations Locations target <locations expressions> // default: NULL (optional) cell set cells associated footnote. Supplying cells_*() helper functions useful way target location cells associated footnote text. helper functions : cells_title(), cells_stubhead(), cells_column_spanners(), cells_column_labels(), cells_row_groups(), cells_stub(), cells_body(), cells_summary(), cells_grand_summary(), cells_stub_summary(), cells_stub_grand_summary(). Additionally, can enclose several cells_*() calls within list() wish link footnote text different types locations (e.g., body cells, row group labels, table title, etc.). placement Placement footnote mark singl-kw:[auto|right|left] // default: \"auto\" affix footnote marks table content. Two options \"left \"right\", placement either absolute left right cell content. default, however, option set \"auto\" whereby gt choose preferred left--right placement depending alignment cell content.","code":""},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a table footnote — tab_footnote","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"formatting-of-footnote-text-and-marks","dir":"Reference","previous_headings":"","what":"Formatting of footnote text and marks","title":"Add a table footnote — tab_footnote","text":"several options controlling formatting footnotes, marks, related typesetting footer. options available within tab_options() subset exposed opt_*() functions.","code":""},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"choosing-the-footnote-marks","dir":"Reference","previous_headings":"","what":"Choosing the footnote marks","title":"Add a table footnote — tab_footnote","text":"can modify set footnote marks tab_options(..., footnotes.marks) opt_footnote_marks(..., ). argument needs vector represent series marks. series footnote marks recycled usage goes beyond length set. cycle, marks simply doubled, tripled, (e.g., * -> ** -> ***). option exists providing keywords certain types footnote marks. keywords : \"numbers\": numeric marks, begin 1 marks subject recycling behavior (default) \"letters\": minuscule alphabetic marks, internally uses letters vector contains 26 lowercase letters Roman alphabet \"LETTERS\": majuscule alphabetic marks, using LETTERS vector 26 uppercase letters Roman alphabet \"standard\": symbolic marks, four symbols total \"extended\": symbolic marks, extends standard set adding two symbols, making six symbolic marks : (1) Asterisk, (2) Dagger, (3) Double Dagger, (4) Section Sign, (5) Double Vertical Line, (6) Paragraph Sign; \"standard\" set first four, \"extended\" contains .","code":""},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"defining-footnote-typesetting-specifications","dir":"Reference","previous_headings":"","what":"Defining footnote typesetting specifications","title":"Add a table footnote — tab_footnote","text":"footnote spec consists string containing control characters formatting. separately defined footnote marks beside footnote text table footer ('spec_ftr') marks beside targeted cell content ('spec_ref'). every type formatting makes sense footnote marks specification purposefully constrained following: superscript text (\"^\" control character) regular-sized text residing baseline bold text (\"b\"), italicized text (\"\"), unstyled text (use either \"b\" \"\" control characters) enclosure parentheses (use \"(\" / \")\") square brackets (\"[\" / \"]\") period following mark (using \".\"); commonly used table footer aforementioned control characters , instance, format footnote marks superscript text bold type \"^b\". might want marks footer regular-sized text parentheses, spec either \"()\" \"(x)\" (can optionally use \"x\" helpful placeholder marks). options can set either tab_options() call (footnotes.spec_ref footnotes.spec_ftr arguments) opt_footnote_spec() (using spec_ref spec_ftr arguments).","code":""},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"additional-typesetting-options-for-footnote-text-residing-in-the-footer","dir":"Reference","previous_headings":"","what":"Additional typesetting options for footnote text residing in the footer","title":"Add a table footnote — tab_footnote","text":"Within tab_options() two arguments control typesetting footnotes. footnotes.multiline, setting determines whether footnote start new line, , whether combined single block text. default TRUE, , FALSE can control separator consecutive footnotes footnotes.sep argument. default, set single space character (\" \").","code":""},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a table footnote — tab_footnote","text":"Using subset sza dataset, create new gt table. body cells sza column receive background color fills according data values (data_color()). , use tab_footnote() lets us add footnote sza column label (explaining color gradient signifies).    course, can add one footnote table, , use several calls tab_footnote(). variation sza table three footnotes: one \"TST\" column label two \"SZA\" column label (capitalized opt_all_caps()). ultimately three calls tab_footnote() order calls usually matter, subtle effect since two footnotes associated text content (try reversing second third calls observe effect footer).    Text footer (footnotes also source notes) tends widen table , extension, columns within . can limit explicitly setting column width values, done cols_width(). can also correspondingly large amount vertical space taken footer since footnotes , default, start new line. example, used tab_options(footnotes.multiline = FALSE) make footer text contained single block text. move another footnote-laden table, one based towny dataset. header part, title subtitle. can choose associated footnote case \"subtitle\" (one two options cells_title() helper function). table stub row labels labels associated footnote. long row labels unique, can easily used row identifiers cells_stub(). third footnote placed \"Density\" column label. , changing order tab_footnote() calls effect final table rendering.    table, elected change footnote marks letters instead default numbers (done opt_footnote_marks()). source note also added; mainly demonstrate source notes positioned beneath footnotes footer section. final example, make relatively small table deriving sp500 dataset. set tab_footnote() calls used (four ) minor variations allow interesting expressions footnotes. Two footnotes target values body table (using cells_body() helper function achieve ). numeric values right-aligned, gt opt place footnote left content disrupt alignment. However, placement argument can used force positioning footnote mark content. can also opt include footnotes associated footnote marks whatsoever. done providing anything locations. 'markless' footnotes precede footnotes footer section.    Aside changing footnote marks consist \"LETTERS\", also changed way marks formatted. use opt_footnote_spec(), spec_ref option governs footnote marks across table. , describe marks italicized set square brackets (\"[x]\"). spec_ftr argument used footer representation footnote marks. described example \"x.\", rendered footnote mark followed period.","code":"sza |>   dplyr::filter(     latitude == 20 &       month == \"jan\" &       !is.na(sza)   ) |>   dplyr::select(-latitude, -month) |>   gt() |>   data_color(     columns = sza,     palette = c(\"white\", \"yellow\", \"navyblue\"),     domain = c(0, 90)   ) |>   tab_footnote(     footnote = \"Color indicates the solar zenith angle.\",     locations = cells_column_labels(columns = sza)   ) sza |>   dplyr::filter(     latitude == 20 &       month == \"jan\" &       !is.na(sza)   ) |>   dplyr::select(-latitude, -month) |>   gt() |>   opt_all_caps() |>   cols_align(align = \"center\") |>   cols_width(everything() ~ px(200)) |>   tab_footnote(     footnote = md(\"TST stands for *True Solar Time*.\"),     locations = cells_column_labels(columns = tst)   ) |>   tab_footnote(     footnote = md(\"SZA stands for *Solar Zenith Angle*.\"),     locations = cells_column_labels(columns = sza)   ) |>   tab_footnote(     footnote = \"Higher Values indicate sun closer to horizon.\",     locations = cells_column_labels(columns = sza)   ) |>   tab_options(footnotes.multiline = FALSE) towny |>   dplyr::filter(csd_type == \"city\") |>   dplyr::arrange(desc(population_2021)) |>   dplyr::select(name, density_2021, population_2021) |>   dplyr::slice_head(n = 10) |>   gt(rowname_col = \"name\") |>   tab_header(     title = md(\"The 10 Largest Municipalities in `towny`\"),     subtitle = \"Population values taken from the 2021 census.\"   ) |>   fmt_integer() |>   cols_label(     density_2021 = \"Density\",     population_2021 = \"Population\"   ) |>   tab_footnote(     footnote = \"Part of the Greater Toronto Area.\",     locations = cells_stub(rows = c(       \"Toronto\", \"Mississauga\", \"Brampton\", \"Markham\", \"Vaughan\"     ))   ) |>   tab_footnote(     footnote = md(\"Density is in terms of persons per km^2^.\"),     locations = cells_column_labels(columns = density_2021)   ) |>   tab_footnote(     footnote = \"Census results made public on February 9, 2022.\",     locations = cells_title(groups = \"subtitle\")   ) |>   tab_source_note(source_note = md(     \"Data taken from the `towny` dataset (in the **gt** package).\"   )) |>   opt_footnote_marks(marks = \"letters\") sp500 |>   dplyr::filter(date >= \"2015-01-05\" & date <=\"2015-01-10\") |>   dplyr::select(-c(adj_close, volume, high, low)) |>   dplyr::mutate(change = close - open) |>   dplyr::arrange(date) |>   gt() |>   tab_header(title = \"S&P 500\") |>   fmt_date(date_style = \"m_day_year\") |>   fmt_currency() |>   cols_width(everything() ~ px(150)) |>   tab_footnote(     footnote = \"More red days than green in this period.\",     locations = cells_column_labels(columns = change)   ) |>   tab_footnote(     footnote = \"Lowest opening value.\",     locations = cells_body(columns = open, rows = 3),   ) |>   tab_footnote(     footnote = \"Devastating losses on this day.\",     locations = cells_body(columns = change, rows = 1),     placement = \"right\"   ) |>   tab_footnote(footnote = \"All values in USD.\") |>   opt_footnote_marks(marks = \"LETTERS\") |>   opt_footnote_spec(spec_ref = \"i[x]\", spec_ftr = \"x.\")"},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add a table footnote — tab_footnote","text":"2-7","code":""},{"path":"https://gt.rstudio.com/reference/tab_footnote.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Add a table footnote — tab_footnote","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a table header — tab_header","title":"Add a table header — tab_header","text":"can add table header gt table title even subtitle using tab_header(). table header optional table part positioned just column labels table part. flexibility use Markdown HTML formatting header's title subtitle md() html() helper functions.","code":""},{"path":"https://gt.rstudio.com/reference/tab_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a table header — tab_header","text":"","code":"tab_header(data, title, subtitle = NULL, preheader = NULL)"},{"path":"https://gt.rstudio.com/reference/tab_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a table header — tab_header","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. title Header title scalar<character> // required Text used table title. can elect use md() html() helper functions style text Markdown retain HTML elements text. subtitle Header subtitle scalar<character> // default: NULL (optional) Text used table subtitle. can elect use md() html() helper functions style text Markdown retain HTML elements text. preheader RTF preheader text vector<character> // default: NULL (optional) Optional preheader content rendered table RTF output. Can supplied vector text.","code":""},{"path":"https://gt.rstudio.com/reference/tab_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a table header — tab_header","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_header.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a table header — tab_header","text":"use small portion gtcars dataset create gt table. header part can added table tab_header() function. add title optional subtitle well. md(), can make sure Markdown formatting interpreted transformed.    table intended solely HTML table, introduce HTML elements header. can even use htmltools package help arrange generate HTML. example , two <div> elements placed htmltools::tagList().    using HTML something far simpler, can wrap title subtitle inside html() declare text provided HTML.    Sometimes, aligning heading elements left can improve presentation table. , use nuclides dataset generate display natural abundance values several stable isotopes. opt_align_table_header() used align = \"left\" make title subtitle left aligned header area.","code":"gtcars |>   dplyr::select(mfr, model, msrp) |>   dplyr::slice(1:5) |>   gt() |>   tab_header(     title = md(\"Data listing from **gtcars**\"),     subtitle = md(\"`gtcars` is an R dataset\")   ) gtcars |>   dplyr::select(mfr, model, msrp) |>   dplyr::slice(1:5) |>   gt() |>   tab_header(     title =       htmltools::tagList(         htmltools::tags$div(           htmltools::HTML(             web_image(\"https://www.r-project.org/logo/Rlogo.png\")           ),           style = htmltools::css(`text-align` = \"center\")         ),         htmltools::tags$div(           \"Data listing from \", htmltools::tags$strong(\"gtcars\")         )       )   ) gtcars |>   dplyr::select(mfr, model, msrp) |>   dplyr::slice(1:5) |>   gt() |>   tab_header(     title = html(\"Data listing from <strong>gtcars<\/strong>\"),     subtitle = html(\"From <span style='color:red;'>gtcars<\/span>\")   ) nuclides |>   dplyr::filter(!is.na(abundance)) |>   dplyr::filter(abundance != 1) |>   dplyr::filter(z >= 1 & z <= 8) |>   dplyr::mutate(element = paste0(element, \", **z = \", z, \"**\")) |>   dplyr::mutate(nuclide = gsub(\"[0-9]+$\", \"\", nuclide)) |>   dplyr::select(nuclide, element, atomic_mass, abundance, abundance_uncert) |>   gt(     rowname_col = \"nuclide\",     groupname_col = \"element\",     process_md = TRUE   ) |>   tab_header(     title = \"Natural Abundance Values\",     subtitle = md(\"For elements having atomic numbers from `1` to `8`.\")   ) |>   tab_stubhead(label = \"Isotope\") |>   tab_stub_indent(     rows = everything(),     indent = 1   ) |>   fmt_chem(columns = stub()) |>   fmt_number(     columns = atomic_mass,     decimals = 4,     scale_by = 1 / 1e6   ) |>   fmt_percent(     columns = contains(\"abundance\"),     decimals = 4   ) |>   cols_merge_uncert(     col_val = abundance,     col_uncert = abundance_uncert   ) |>   cols_label_with(fn = function(x) tools::toTitleCase(gsub(\"_\", \" \", x))) |>   cols_width(     stub() ~ px(70),     atomic_mass ~ px(120),     abundance ~ px(200)   ) |>   opt_align_table_header(align = \"left\") |>   opt_vertical_padding(scale = 0.5)"},{"path":"https://gt.rstudio.com/reference/tab_header.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add a table header — tab_header","text":"2-1","code":""},{"path":"https://gt.rstudio.com/reference/tab_header.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Add a table header — tab_header","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Understand what's been set inside of a gt table object — tab_info","title":"Understand what's been set inside of a gt table object — tab_info","text":"can become increasingly difficult recall ID values associated different labels gt table. , also situations gt generate ID values behalf (e.g., tab_spanner_delim(), etc.) ensuring duplicate ID values produced. latter case, impossible know ID values unless one carefully examine correct component gt_tbl object. essential know ID values targeting purposes (styling tab_style(), adding footnote marks tab_footnote(), etc.), tab_info() can help . summarizes (location) table's ID values associated labels. product informational gt table, designed easy retrieval necessary values.","code":""},{"path":"https://gt.rstudio.com/reference/tab_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Understand what's been set inside of a gt table object — tab_info","text":"","code":"tab_info(data)"},{"path":"https://gt.rstudio.com/reference/tab_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Understand what's been set inside of a gt table object — tab_info","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function.","code":""},{"path":"https://gt.rstudio.com/reference/tab_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Understand what's been set inside of a gt table object — tab_info","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_info.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Understand what's been set inside of a gt table object — tab_info","text":"use portion gtcars dataset create gt table. use tab_spanner() group two columns together spanner column ID label \"performance\". Finally, can usetab_info() separate, interactive statement can inspect table summarizes ID values associated label text parts table.","code":"gt_tbl <-   gtcars |>   dplyr::select(model, year, starts_with(\"hp\"), msrp) |>   dplyr::slice(1:4) |>   gt(rowname_col = \"model\") |>   tab_spanner(     label = \"performance\",     columns = starts_with(\"hp\")   )  gt_tbl |> tab_info()"},{"path":"https://gt.rstudio.com/reference/tab_info.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Understand what's been set inside of a gt table object — tab_info","text":"2-12","code":""},{"path":"https://gt.rstudio.com/reference/tab_info.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Understand what's been set inside of a gt table object — tab_info","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify the table output options — tab_options","title":"Modify the table output options — tab_options","text":"Modify options available table. options named components, subcomponents, element can adjusted.","code":""},{"path":"https://gt.rstudio.com/reference/tab_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify the table output options — tab_options","text":"","code":"tab_options(   data,   table.width = NULL,   table.layout = NULL,   table.align = NULL,   table.margin.left = NULL,   table.margin.right = NULL,   table.background.color = NULL,   table.additional_css = NULL,   table.font.names = NULL,   table.font.size = NULL,   table.font.weight = NULL,   table.font.style = NULL,   table.font.color = NULL,   table.font.color.light = NULL,   table.border.top.style = NULL,   table.border.top.width = NULL,   table.border.top.color = NULL,   table.border.right.style = NULL,   table.border.right.width = NULL,   table.border.right.color = NULL,   table.border.bottom.style = NULL,   table.border.bottom.width = NULL,   table.border.bottom.color = NULL,   table.border.left.style = NULL,   table.border.left.width = NULL,   table.border.left.color = NULL,   heading.background.color = NULL,   heading.align = NULL,   heading.title.font.size = NULL,   heading.title.font.weight = NULL,   heading.subtitle.font.size = NULL,   heading.subtitle.font.weight = NULL,   heading.padding = NULL,   heading.padding.horizontal = NULL,   heading.border.bottom.style = NULL,   heading.border.bottom.width = NULL,   heading.border.bottom.color = NULL,   heading.border.lr.style = NULL,   heading.border.lr.width = NULL,   heading.border.lr.color = NULL,   column_labels.background.color = NULL,   column_labels.font.size = NULL,   column_labels.font.weight = NULL,   column_labels.text_transform = NULL,   column_labels.padding = NULL,   column_labels.padding.horizontal = NULL,   column_labels.vlines.style = NULL,   column_labels.vlines.width = NULL,   column_labels.vlines.color = NULL,   column_labels.border.top.style = NULL,   column_labels.border.top.width = NULL,   column_labels.border.top.color = NULL,   column_labels.border.bottom.style = NULL,   column_labels.border.bottom.width = NULL,   column_labels.border.bottom.color = NULL,   column_labels.border.lr.style = NULL,   column_labels.border.lr.width = NULL,   column_labels.border.lr.color = NULL,   column_labels.hidden = NULL,   column_labels.units_pattern = NULL,   row_group.background.color = NULL,   row_group.font.size = NULL,   row_group.font.weight = NULL,   row_group.text_transform = NULL,   row_group.padding = NULL,   row_group.padding.horizontal = NULL,   row_group.border.top.style = NULL,   row_group.border.top.width = NULL,   row_group.border.top.color = NULL,   row_group.border.bottom.style = NULL,   row_group.border.bottom.width = NULL,   row_group.border.bottom.color = NULL,   row_group.border.left.style = NULL,   row_group.border.left.width = NULL,   row_group.border.left.color = NULL,   row_group.border.right.style = NULL,   row_group.border.right.width = NULL,   row_group.border.right.color = NULL,   row_group.default_label = NULL,   row_group.as_column = NULL,   table_body.hlines.style = NULL,   table_body.hlines.width = NULL,   table_body.hlines.color = NULL,   table_body.vlines.style = NULL,   table_body.vlines.width = NULL,   table_body.vlines.color = NULL,   table_body.border.top.style = NULL,   table_body.border.top.width = NULL,   table_body.border.top.color = NULL,   table_body.border.bottom.style = NULL,   table_body.border.bottom.width = NULL,   table_body.border.bottom.color = NULL,   stub.background.color = NULL,   stub.font.size = NULL,   stub.font.weight = NULL,   stub.text_transform = NULL,   stub.border.style = NULL,   stub.border.width = NULL,   stub.border.color = NULL,   stub.indent_length = NULL,   stub_row_group.font.size = NULL,   stub_row_group.font.weight = NULL,   stub_row_group.text_transform = NULL,   stub_row_group.border.style = NULL,   stub_row_group.border.width = NULL,   stub_row_group.border.color = NULL,   data_row.padding = NULL,   data_row.padding.horizontal = NULL,   summary_row.background.color = NULL,   summary_row.text_transform = NULL,   summary_row.padding = NULL,   summary_row.padding.horizontal = NULL,   summary_row.border.style = NULL,   summary_row.border.width = NULL,   summary_row.border.color = NULL,   grand_summary_row.background.color = NULL,   grand_summary_row.text_transform = NULL,   grand_summary_row.padding = NULL,   grand_summary_row.padding.horizontal = NULL,   grand_summary_row.border.style = NULL,   grand_summary_row.border.width = NULL,   grand_summary_row.border.color = NULL,   footnotes.background.color = NULL,   footnotes.font.size = NULL,   footnotes.padding = NULL,   footnotes.padding.horizontal = NULL,   footnotes.border.bottom.style = NULL,   footnotes.border.bottom.width = NULL,   footnotes.border.bottom.color = NULL,   footnotes.border.lr.style = NULL,   footnotes.border.lr.width = NULL,   footnotes.border.lr.color = NULL,   footnotes.marks = NULL,   footnotes.spec_ref = NULL,   footnotes.spec_ftr = NULL,   footnotes.multiline = NULL,   footnotes.sep = NULL,   source_notes.background.color = NULL,   source_notes.font.size = NULL,   source_notes.padding = NULL,   source_notes.padding.horizontal = NULL,   source_notes.border.bottom.style = NULL,   source_notes.border.bottom.width = NULL,   source_notes.border.bottom.color = NULL,   source_notes.border.lr.style = NULL,   source_notes.border.lr.width = NULL,   source_notes.border.lr.color = NULL,   source_notes.multiline = NULL,   source_notes.sep = NULL,   row.striping.background_color = NULL,   row.striping.include_stub = NULL,   row.striping.include_table_body = NULL,   container.width = NULL,   container.height = NULL,   container.padding.x = NULL,   container.padding.y = NULL,   container.overflow.x = NULL,   container.overflow.y = NULL,   ihtml.active = NULL,   ihtml.use_pagination = NULL,   ihtml.use_pagination_info = NULL,   ihtml.use_sorting = NULL,   ihtml.use_search = NULL,   ihtml.use_filters = NULL,   ihtml.use_resizers = NULL,   ihtml.use_highlight = NULL,   ihtml.use_compact_mode = NULL,   ihtml.use_text_wrapping = NULL,   ihtml.use_page_size_select = NULL,   ihtml.page_size_default = NULL,   ihtml.page_size_values = NULL,   ihtml.pagination_type = NULL,   ihtml.height = NULL,   ihtml.selection_mode = NULL,   page.orientation = NULL,   page.numbering = NULL,   page.header.use_tbl_headings = NULL,   page.footer.use_tbl_notes = NULL,   page.width = NULL,   page.height = NULL,   page.margin.left = NULL,   page.margin.right = NULL,   page.margin.top = NULL,   page.margin.bottom = NULL,   page.header.height = NULL,   page.footer.height = NULL,   quarto.use_bootstrap = NULL,   quarto.disable_processing = NULL,   latex.use_longtable = NULL,   latex.tbl.pos = NULL )"},{"path":"https://gt.rstudio.com/reference/tab_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify the table output options — tab_options","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. table.width Table width table width can specified single-length character units pixels percentage. provided single-length numeric vector, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percent units. table.layout table-layout property value table-layout CSS style HTML output context. default, \"fixed\" another valid option \"auto\". table.align Horizontal alignment table table.align option lets us set horizontal alignment table container. default, \"center\". options \"left\" \"right\". automatically set table.margin.left table.margin.right appropriate values. table.margin.left, table.margin.right Left right table margins size margins left right table within container can set table.margin.left table.margin.right. Can specified single-length character units pixels percentage. provided single-length numeric vector, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percent units. Using table.margin.left table.margin.right overwrite values set table.align. table.background.color, heading.background.color, column_labels.background.color, row_group.background.color, stub.background.color, summary_row.background.color, grand_summary_row.background.color, footnotes.background.color, source_notes.background.color Background colors options govern background colors parent element table following child elements: heading, column_labels, row_group, stub, summary_row, grand_summary_row, footnotes, source_notes. color name hexadecimal color code provided. table.additional_css Additional CSS table.additional_css option can used supply additional block CSS rules applied automatically generated table CSS. table.font.names Default table fonts names fonts used table can supplied table.font.names. vector several font names. first font available, next font tried (). table.font.size, heading.title.font.size, heading.subtitle.font.size, column_labels.font.size, row_group.font.size, stub.font.size, footnotes.font.size, source_notes.font.size Table font sizes font sizes parent text element table following child elements: heading.title, heading.subtitle, column_labels, row_group, footnotes, source_notes. Can specified single-length character vector units pixels (e.g., 12px) percentage (e.g., 80%). provided single-length numeric vector, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percentage units. table.font.weight, heading.title.font.weight, heading.subtitle.font.weight, column_labels.font.weight, row_group.font.weight, stub.font.weight Table font weights font weights table, heading.title, heading.subtitle, column_labels, row_group, stub text elements. Can text-based keyword \"normal\", \"bold\", \"lighter\", \"bolder\", , numeric value 1 1000, inclusive. Note variable fonts may support numeric mapping weight. table.font.style Default table font style default font style table. Can one either \"normal\", \"italic\", \"oblique\". table.font.color, table.font.color.light Default dark light text table options define text colors used throughout table. two variants: table.font.color text overlaid lighter background colors, table.font.color.light automatically used text needs overlaid darker background colors. color name hexadecimal color code provided. table.border.top.style, table.border.top.width, table.border.top.color, table.border.right.style, table.border.right.width, table.border.right.color, table.border.bottom.style, table.border.bottom.width, table.border.bottom.color, table.border.left.style, table.border.left.width, table.border.left.color Top border properties style, width, color properties table's absolute top absolute bottom borders. heading.align Horizontal alignment table header Controls horizontal alignment heading title subtitle. can either use \"center\", \"left\", \"right\". heading.padding, column_labels.padding, data_row.padding, row_group.padding, summary_row.padding, grand_summary_row.padding, footnotes.padding, source_notes.padding Vertical padding throughout table amount vertical padding incorporate heading (title subtitle), column_labels (includes column spanners), row group labels (row_group.padding), body/stub rows (data_row.padding), summary rows (summary_row.padding grand_summary_row.padding), footnotes source notes (footnotes.padding source_notes.padding). heading.padding.horizontal, column_labels.padding.horizontal, data_row.padding.horizontal, row_group.padding.horizontal, summary_row.padding.horizontal, grand_summary_row.padding.horizontal, footnotes.padding.horizontal, source_notes.padding.horizontal Horizontal padding throughout table amount horizontal padding incorporate heading (title subtitle), column_labels (includes column spanners), row group labels (row_group.padding.horizontal), body/stub rows (data_row.padding), summary rows (summary_row.padding.horizontal grand_summary_row.padding.horizontal), footnotes source notes (footnotes.padding.horizontal source_notes.padding.horizontal). heading.border.bottom.style, heading.border.bottom.width, heading.border.bottom.color Properties header's bottom border style, width, color properties header's bottom border. border shares space column_labels location. width border larger, visible border. heading.border.lr.style, heading.border.lr.width, heading.border.lr.color Properties header's left right borders style, width, color properties left right borders heading location. column_labels.text_transform, row_group.text_transform, stub.text_transform, summary_row.text_transform, grand_summary_row.text_transform Text transforms throughout table Options apply text transformations column_labels, row_group, stub, summary_row, grand_summary_row text elements. Either \"uppercase\", \"lowercase\", \"capitalize\" keywords can used. column_labels.vlines.style, column_labels.vlines.width, column_labels.vlines.color Properties vertical lines column labels style, width, color properties vertical lines ('vlines') column_labels. column_labels.border.top.style, column_labels.border.top.width, column_labels.border.top.color Properties border column labels style, width, color properties top border column_labels location. border shares space heading location. width border larger, visible border. column_labels.border.bottom.style, column_labels.border.bottom.width, column_labels.border.bottom.color Properties border column labels style, width, color properties bottom border column_labels location. column_labels.border.lr.style, column_labels.border.lr.width, column_labels.border.lr.color Properties left right borders next column labels style, width, color properties left right borders column_labels location. column_labels.hidden Hiding column labels option hide column labels. providing TRUE entire column_labels location seen table header (present) collapse downward. column_labels.units_pattern Pattern combine column labels units default pattern combining column labels defined units column labels. pattern initialized \"{1}, {2}\", \"{1}\" refers column label text \"{2}\" text related associated units. using cols_units(), opportunity provide specific pattern overrides units pattern unit. , specifying units directly cols_label() (units syntax surrounded \"{{\"/\"}}\") need units pattern value disregarded. row_group.border.top.style, row_group.border.top.width, row_group.border.top.color, row_group.border.bottom.style, row_group.border.bottom.width, row_group.border.bottom.color, row_group.border.left.style, row_group.border.left.width, row_group.border.left.color, row_group.border.right.style, row_group.border.right.width, row_group.border.right.color Border properties associated row_group location style, width, color properties top, bottom, left, right borders row_group location. row_group.default_label default row group label option set default row group label rows formally placed row group named group call tab_row_group(). set NA_character_ rows placed row group (one row groups already exist), rows automatically placed row group without label. row_group.as_column Structure row groups column row groups structured? default, separate rows lie groups. Setting TRUE structure row group labels separate column table stub. table_body.hlines.style, table_body.hlines.width, table_body.hlines.color, table_body.vlines.style, table_body.vlines.width, table_body.vlines.color Properties horizontal vertical lines table body style, width, color properties horizontal lines ('hlines') vertical lines ('vlines') table_body. table_body.border.top.style, table_body.border.top.width, table_body.border.top.color, table_body.border.bottom.style, table_body.border.bottom.width, table_body.border.bottom.color Properties top bottom borders table body style, width, color properties top bottom borders table_body location. stub.border.style, stub.border.width, stub.border.color Properties vertical border table stub style, width, color properties vertical border table stub. stub.indent_length Width indentation width indentation level row labels stub. indentation can set using tab_stub_indent(). default \"5px\". stub_row_group.font.size, stub_row_group.font.weight, stub_row_group.text_transform, stub_row_group.border.style, stub_row_group.border.width, stub_row_group.border.color Properties row group column table stub Options row group column table stub (made possible using row_group.as_column = TRUE). defaults options mirror stub.* variants (except stub_row_group.border.width, \"1px\" instead \"2px\"). summary_row.border.style, summary_row.border.width, summary_row.border.color Properties horizontal borders belonging summary rows style, width, color properties horizontal borders summary_row location. grand_summary_row.border.style, grand_summary_row.border.width, grand_summary_row.border.color Properties horizontal borders belonging grand summary rows style, width, color properties top borders grand_summary_row location. footnotes.border.bottom.style, footnotes.border.bottom.width, footnotes.border.bottom.color Properties bottom border belonging footnotes style, width, color properties bottom border footnotes location. footnotes.border.lr.style, footnotes.border.lr.width, footnotes.border.lr.color Properties left right borders belonging footnotes style, width, color properties left right borders footnotes location. footnotes.marks Sequence footnote marks set sequential marks used reference identify footnotes (input opt_footnote_marks()). can supply vector represents series footnote marks. vector recycled usage goes beyond length set. cycle, marks simply combined (e.g., * -> ** -> ***). option exists providing keywords certain types footnote marks. keyword \"numbers\" (default, indicating want use numeric marks). can use lowercase \"letters\" uppercase \"LETTERS\". option using traditional symbol set \"standard\" provides four symbols, , \"extended\" adds two symbols, making six. footnotes.spec_ref, footnotes.spec_ftr Specifications formatting footnote marks Optional specifications formatting footnote references (footnotes.spec_ref) associated marks footer section (footnotes.spec_ftr) (input opt_footnote_spec()). string containing specification control characters. default spec string \"^\", superscript text set italics. control characters can used : (1) \"b\" bold text, (2) \"(\" / \")\" enclosure footnote marks parentheses. footnotes.multiline, source_notes.multiline Typesetting multiple footnotes source notes option either put footnotes source notes separate lines (default, TRUE) render continuous line text footnotes.sep providing separator (default \" \") notes. footnotes.sep, source_notes.sep Separator characters adjacent footnotes source notes separating characters adjacent footnotes source notes respective footer sections rendered continuous line text (footnotes.multiline == FALSE). default value single space character (\" \"). source_notes.border.bottom.style, source_notes.border.bottom.width, source_notes.border.bottom.color Properties bottom border belonging source notes style, width, color properties bottom border source_notes location. source_notes.border.lr.style, source_notes.border.lr.width, source_notes.border.lr.color Properties left right borders belonging source notes style, width, color properties left right borders source_notes location. row.striping.background_color Background color row stripes background color striped table body rows. color name hexadecimal color code provided. row.striping.include_stub Inclusion table stub row stripes option whether include stub striping rows. row.striping.include_table_body Inclusion table body row stripes option whether include table body striping rows. container.width, container.height, container.padding.x, container.padding.y Table container dimensions padding width height table's container, , vertical horizontal padding table's container. container width height can specified units pixels percentage. padding specified length units pixels. provided numeric value, assumed value given units pixels. px() pct() helper functions can also used pass numeric values obtain values pixel percent units. container.overflow.x, container.overflow.y Table container overflow Options enable scrolling horizontal vertical directions table content overflows container dimensions. Using TRUE (default ) means horizontal vertical scrolling enabled view entire table directions. FALSE, table may clipped table width height exceeds container.width container.height. ihtml.active Display interactive HTML table option displaying interactive version HTML table (rather otherwise 'static' table). enables use controls pagination, global search, filtering, sorting. individual features controlled table.* options. default, pagination (ihtml.use_pagination) sorting (ihtml.use_sorting) features enabled. ihtml.active option, however, FALSE default. ihtml.use_pagination, ihtml.use_pagination_info Use pagination interactive HTML output, option using pagination controls (table body) can controlled ihtml.use_pagination. default, TRUE allow use page table content. informational display text regarding current page can set ihtml.use_pagination_info (TRUE default). ihtml.use_sorting Provide column sorting controls interactive HTML output, option provide controls sorting column values. default, TRUE. ihtml.use_search Provide global search field interactive HTML output, option places search field globally filtering rows requested content. default, FALSE. ihtml.use_filters Display filtering fields interactive HTML output, places search fields column header allows filtering column. default, FALSE. ihtml.use_resizers Allow column resizing interactive HTML output, allows interactive resizing columns. default, FALSE. ihtml.use_highlight Enable row highlighting hover interactive HTML output, highlights individual rows upon hover. default, FALSE. ihtml.use_compact_mode Use compact mode interactive HTML output, option reduce vertical padding thus make table consume less vertical space. default, FALSE. ihtml.use_text_wrapping Use text wrapping interactive HTML output, option control text wrapping. default (TRUE), text wrapped multiple lines; FALSE, text truncated single line. ihtml.use_page_size_select, ihtml.page_size_default, ihtml.page_size_values Change page size properties interactive HTML output, ihtml.use_page_size_select provides option display dropdown menu number rows show per page data. default, vector c(10, 25, 50, 100) corresponds options 10, 25, 50, 100 rows data per page. modify page-size options, provide numeric vector ihtml.page_size_values. default page size (initially set 10) can modified ihtml.page_size_default works whether ihtml.use_page_size_select set TRUE. ihtml.pagination_type Change pagination mode interactive HTML output using pagination, one three options presentation pagination controls. default \"numbers\", series page-number buttons presented along 'previous' 'next' buttons. \"jump\" option provides input field stepper page number. \"simple\", 'previous' 'next' buttons displayed. ihtml.height Height interactive HTML table Height table pixels. Defaults \"auto\" automatic sizing. ihtml.selection_mode Allow row selection interactive HTML output, allows users select rows clicking . option \"single\", clicking another value toggles selection previously selected row . option \"multiple\", multiple rows can selected . Selected values available Shiny apps ihtml.selection_mode NULL table used render_gt(). page.orientation Set RTF page orientation RTF output, provides two options page orientation: \"portrait\" (default) \"landscape\". page.numbering Enable RTF page numbering Within RTF output, page numbering displayed? default, set FALSE TRUE page numbering text added document header. page.header.use_tbl_headings Place table headings RTF page header TRUE RTF output tables migrate table headings (including table title column labels) page header. page header content repeat across pages. default, FALSE. page.footer.use_tbl_notes Place table footer RTF page footer TRUE RTF output tables migrate table footer content (includes footnotes source notes) page footer. page footer content repeat across pages. default, FALSE. page.width, page.height Set RTF page dimensions page width height standard portrait orientation. RTF table output default values (inches) 8.5in 11.0in. page.margin.left, page.margin.right, page.margin.top, page.margin.bottom Set RTF page margins RTF table output, options correspond left, right, top, bottom page margins. default values 1.0in. page.header.height, page.footer.height Set RTF page header footer distances heights page header footer RTF table outputs. Default values 0.5in. quarto.use_bootstrap, quarto.disable_processing Modify Quarto properties rendering gt table Quarto, table can undergo transformations support advanced Quarto features. Setting quarto.use_bootstrap TRUE (FALSE default) allow Quarto add Bootstrap classes table, allowing styles permeate table. Quarto performs alterations well can deactivated quarto.disable_processing = TRUE (option FALSE default). latex.use_longtable Use longtable latex environment default, tables produced using latex code embedded table floating environment. Setting parameter TRUE instead use longtable environment float may span multiple pages. latex.tbl.pos Specify latex floating position latex position indicator floating environment (e.g., \"!t\", \"H\"). specified without square brackets. Quarto users instead set floating position within code chunk argument tbl-pos. output table float latex.use_longtable = FALSE.","code":""},{"path":"https://gt.rstudio.com/reference/tab_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify the table output options — tab_options","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_options.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify the table output options — tab_options","text":"Use select columns exibble dataset create gt table number table parts added (using functions like summary_rows(), grand_summary_rows(), ). can use gt object going forward demo tab_options() features.    can modify table width set '100%'. effect, spans table entirely fill content width area. done table.width option take advantage pct() helper function.    table.background.color option, can modify table's background color. , want \"lightcyan\".    footnotes residing footer section tab_1. default, footnote takes new line text. can changed footnotes.multiline option. Using FALSE means footnotes placed one continuous span text. Speaking footnotes, can change 'marks' used identify . , use letters marks footnote references (instead default, numbers). accomplished footnotes.marks option, going supply letters vector .    data rows table typically take physical space control extent . data_row.padding option, possible modify top bottom padding data rows. just following example, reducing padding value 5 px (note using px() helper function ).    size title subtitle text header table can altered heading.title.font.size heading.subtitle.font.size options. , use \"small\" keyword value options.","code":"tab_1 <-   exibble |>   dplyr::select(-c(fctr, date, time, datetime)) |>   gt(     rowname_col = \"row\",     groupname_col = \"group\"   ) |>   tab_header(     title = md(\"Data listing from **exibble**\"),     subtitle = md(\"`exibble` is an R dataset\")   ) |>   fmt_number(columns = num) |>   fmt_currency(columns = currency) |>   tab_footnote(     footnote = \"Using commas for separators.\",     locations = cells_body(       columns = num,       rows = num > 1000     )   ) |>   tab_footnote(     footnote = \"Using commas for separators.\",     locations = cells_body(       columns = currency,       rows = currency > 1000     )   ) |>   tab_footnote(     footnote = \"Alphabetical fruit.\",     locations = cells_column_labels(columns = char)   )  tab_1 tab_1 |> tab_options(table.width = pct(100)) tab_1 |> tab_options(table.background.color = \"lightcyan\") tab_1 |>   tab_options(     footnotes.multiline = FALSE,     footnotes.marks = letters   ) tab_1 |> tab_options(data_row.padding = px(5)) tab_1 |>   tab_options(     heading.title.font.size = \"small\",     heading.subtitle.font.size = \"small\"   )"},{"path":"https://gt.rstudio.com/reference/tab_options.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Modify the table output options — tab_options","text":"2-12","code":""},{"path":"https://gt.rstudio.com/reference/tab_options.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Modify the table output options — tab_options","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_row_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a row group to a gt table — tab_row_group","title":"Add a row group to a gt table — tab_row_group","text":"can create row group collection rows tab_row_group(). requires specification rows included, either supplying row labels, row indices, use select helper function like starts_with(). modify order row groups, can use row_group_order(). set default row group label rows formally placed row group, can use separate call tab_options(row_group.default_label = <label>). done rows placed row group (one row groups already exist), rows automatically placed row group without label.","code":""},{"path":"https://gt.rstudio.com/reference/tab_row_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a row group to a gt table — tab_row_group","text":"","code":"tab_row_group(data, label, rows, id = label, others_label = NULL, group = NULL)"},{"path":"https://gt.rstudio.com/reference/tab_row_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a row group to a gt table — tab_row_group","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. label Row group label text scalar<character> // required text use row group label. can optionally use md() html() style text Markdown retain HTML elements text. rows Rows target <row-targeting expression> // required rows made components row group. can supply vector row ID values within c(), vector row indices, use select helpers (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). id Row group ID scalar<character> // default: label ID row group. accessing row group cells_row_groups() (using tab_style() tab_footnote()) id value used reference (label). id explicitly provided , taken label value. advisable set explicit id value plan access cell later function call label text complicated (e.g., contains markup, lengthy, ). Finally, providing id value must ensure unique across ID values set row groups (function stop id unique). others_label Deprecated Label default row group scalar<character> // default: NULL (optional) argument deprecated. Instead use tab_options(row_group.default_label = <label>). group Deprecated group label scalar<character> // default: NULL (optional) argument deprecated. Instead use label.","code":""},{"path":"https://gt.rstudio.com/reference/tab_row_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a row group to a gt table — tab_row_group","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_row_group.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a row group to a gt table — tab_row_group","text":"Using subset gtcars dataset, create simple gt table row labels (model column) inside stub. eight-row table begins row groups single use tab_row_group(), can specify row group contain rows car model begins number.    actually makes two row groups since row labels begin number. second row group catch-NA group, display label . Rather, set group double line. may preferable way display arrangement one distinct group 'others' default group. case like order reversed, can use row_group_order().    Two options include: (1) setting default label 'others' group (done tab_options()), (2) creating row groups unaccounted rows. try first option next example:    use row_group.default_label tab_options() gets job done provides default label. One drawback default/NA group ID, easily styled tab_style(); however, row groups indices index \"others\" group 1.    Now try using tab_row_group() gtcars-based table rows formally assigned different row groups. define two row groups (Markdown-infused) labels \"**Powerful Cars**\" \"**Super Powerful Cars**\". distinction groups whether hp lesser greater 600 (governed expressions provided rows argument).    Setting id values row groups makes things easier since clean, markup-free ID values reference later calls (done tab_style() invocations example ). use md() helper function makes Markdown provided label row group faithfully rendered.","code":"gtcars |>   dplyr::select(model, year, hp, trq) |>   dplyr::slice(1:8) |>   gt(rowname_col = \"model\") |>   tab_row_group(     label = \"numbered\",     rows = matches(\"^[0-9]\")   ) gtcars |>   dplyr::select(model, year, hp, trq) |>   dplyr::slice(1:8) |>   gt(rowname_col = \"model\") |>   tab_row_group(     label = \"numbered\",     rows = matches(\"^[0-9]\")   ) |>   row_group_order(groups = c(NA, \"numbered\")) gtcars |>   dplyr::select(model, year, hp, trq) |>   dplyr::slice(1:8) |>   gt(rowname_col = \"model\") |>   tab_row_group(     label = \"numbered\",     rows = matches(\"^[0-9]\")   ) |>   row_group_order(groups = c(NA, \"numbered\")) |>   tab_options(row_group.default_label = \"others\") gtcars |>   dplyr::select(model, year, hp, trq) |>   dplyr::slice(1:8) |>   gt(rowname_col = \"model\") |>   tab_row_group(     label = \"numbered\",     rows = matches(\"^[0-9]\")   ) |>   row_group_order(groups = c(NA, \"numbered\")) |>   tab_options(row_group.default_label = \"others\") |>   tab_style(     style = cell_fill(color = \"bisque\"),     locations = cells_row_groups(groups = 1)   ) |>   tab_style(     style = cell_fill(color = \"lightgreen\"),     locations = cells_row_groups(groups = \"numbered\")   ) gtcars |>   dplyr::select(model, year, hp, trq) |>   dplyr::slice(1:8) |>   gt(rowname_col = \"model\") |>   tab_row_group(     label = md(\"**Powerful Cars**\"),     rows = hp < 600,     id = \"powerful\"   ) |>   tab_row_group(     label = md(\"**Super Powerful Cars**\"),     rows = hp >= 600,     id = \"v_powerful\"   ) |>   tab_style(     style = cell_fill(color = \"gray85\"),     locations = cells_row_groups(groups = \"powerful\")   ) |>   tab_style(     style = list(       cell_fill(color = \"gray95\"),       cell_text(size = \"larger\")     ),     locations = cells_row_groups(groups = \"v_powerful\")   )"},{"path":"https://gt.rstudio.com/reference/tab_row_group.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add a row group to a gt table — tab_row_group","text":"2-4","code":""},{"path":"https://gt.rstudio.com/reference/tab_row_group.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Add a row group to a gt table — tab_row_group","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_source_note.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a source note citation — tab_source_note","title":"Add a source note citation — tab_source_note","text":"Add source note footer part gt table. source note useful citing data included table. Several can added footer, simply use multiple calls tab_source_note() inserted order provided. can use Markdown formatting note, , table intended HTML output, can include HTML formatting.","code":""},{"path":"https://gt.rstudio.com/reference/tab_source_note.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a source note citation — tab_source_note","text":"","code":"tab_source_note(data, source_note)"},{"path":"https://gt.rstudio.com/reference/tab_source_note.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a source note citation — tab_source_note","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. source_note Source note text scalar<character> // required Text used source note. can optionally use md() html() style text Markdown retain HTML elements text.","code":""},{"path":"https://gt.rstudio.com/reference/tab_source_note.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a source note citation — tab_source_note","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_source_note.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a source note citation — tab_source_note","text":"three columns gtcars dataset, create gt table. can use tab_source_note() add source note table footer. citing data source function can used text prefer display footer section.","code":"gtcars |>   dplyr::select(mfr, model, msrp) |>   dplyr::slice(1:5) |>   gt() |>   tab_source_note(source_note = \"From edmunds.com\")"},{"path":"https://gt.rstudio.com/reference/tab_source_note.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add a source note citation — tab_source_note","text":"2-8","code":""},{"path":"https://gt.rstudio.com/reference/tab_source_note.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Add a source note citation — tab_source_note","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a spanner label — tab_spanner","title":"Add a spanner label — tab_spanner","text":"tab_spanner(), can insert spanner column labels part gt table. part table contains, minimum, column labels , optionally, unlimited number levels spanners. spanner occupy space number contiguous column labels associated label ID value. function allows mapping defined column names, existing spanner ID values, mixture . spanners placed order calling tab_spanner() later call uses columns definition (even subset) first invocation, second spanner overlaid atop first. Options exist forcibly inserting spanner underneath (level space permits) replace, allows full partial spanner replacement.","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a spanner label — tab_spanner","text":"","code":"tab_spanner(   data,   label,   columns = NULL,   spanners = NULL,   level = NULL,   id = label,   gather = TRUE,   replace = FALSE )"},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a spanner label — tab_spanner","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. label Spanner label text scalar<character> // required text use spanner label. can optionally use md() html() style text Markdown retain HTML elements text. columns Columns target <column-targeting expression> // default: NULL (optional) columns serve components spanner. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). argument works tandem spanners argument. spanners Spanners target vector<character> // default: NULL (optional) spanners spanned , already defined. One spanner ID values (quotes) can supplied . argument works tandem columns argument. level Spanner level insertion scalar<numeric|integer> // default: NULL (optional) explicit level spanner placed. provided, gt choose level based inputs provided within columns spanners, placing spanner label fit. first spanner level (right column labels) 1. combination opt_interactive() ihtml.active = TRUE tab_options() level 1 supported, additional levels discarded. id Spanner ID scalar<character> // default: label ID spanner. accessing spanner spanners argument tab_spanner() cells_column_spanners() (using tab_style() tab_footnote()) id value used reference (label). id explicitly provided , taken label value. advisable set explicit id value plan access cell later function call label text complicated (e.g., contains markup, lengthy, ). Finally, providing id value must ensure unique across ID values set spanner labels (function stop id unique). gather Gather columns together scalar<logical> // default: TRUE option move specified columns unified spanner. Ordering moved--place columns preserved cases. default, set TRUE. replace Replace existing spanners scalar<logical> // default: FALSE new spanners allowed partially fully replace existing spanners? (possibility setting spanners already populated level.) default, set FALSE error occur replacement attempted.","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a spanner label — tab_spanner","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":"targeting-columns-with-the-columns-argument","dir":"Reference","previous_headings":"","what":"Targeting columns with the columns argument","title":"Add a spanner label — tab_spanner","text":"columns argument allows us target subset columns contained table. can declare column names c() (bare column names names quotes) can use tidyselect-style expressions. can basic supplying select helper like starts_with(), , providing complex incantation like (~ .numeric(.x) & max(.x, na.rm = TRUE) > 1E6) targets numeric columns maximum value greater 1,000,000 (excluding NAs consideration).","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":"details-on-spanner-placement","dir":"Reference","previous_headings":"","what":"Details on spanner placement","title":"Add a spanner label — tab_spanner","text":"take hypothetical table includes following column names order left right: year, len.pop, m.pop, len.dens, m.dens. like useful spanners, want year column (avoid using column defining spanners). start creating schematic representation wanted terms spanners:   make arrangement happen, need three separate calls tab_spanner(): tab_spanner(., label = \"Leinster\", columns = starts_with(\"len\")) tab_spanner(., label = \"Munster\", columns = starts_with(\"m\")) tab_spanner(., label = \"Two Provinces Ireland\", columns = -year) give us spanners need appropriate labels. ID values derived labels case, can directly supplied via id argument. important thing keep aware order calls matters. first two can order third one must happen last since build spanners bottom . Also note first calls rearrange columns! design gather = TRUE default purposefully gather columns together columns united single spanner. complex definitions spanners can performed Examples section demonstrates advanced calls tab_spanner(). final note, column labels (default deriving column names) likely need change especially true case. can done either cols_label() cols_label_with().","code":"| ------- `\"Two Provinces of Ireland\"` ------ <- level 2 spanner        | ---- `\"Leinster\"` ---- | --- `\"Munster\"` -- <- level 1 spanners `year` | `len.pop` | `len.dens` | `m.pop` | `m.dens` <- column names ----------------------------------------------------"},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":"incorporating-units-with-gt-s-units-notation","dir":"Reference","previous_headings":"","what":"Incorporating units with gt's units notation","title":"Add a spanner label — tab_spanner","text":"Measurement units often seen part spanner labels indeed can much straightforward include rather using devices make readers aware units specific columns. text pertaining units defined alongside spanner label. , surround portion text label corresponds units definition \"{{\"/\"}}\". Now know mark text units definition, know need know write proper units notation. notation uses succinct method writing units feel somewhat familiar though particular task hand. unit treated separate entity (parentheses symbols included) addition subscript text exponents flexible relatively easy formulate. best shown examples: \"m/s\" \"m / s\" render \"m/s\" \"m s^-1\" appear \"-1\" exponent intact \"m /s\" gives result, \"/<unit>\" equivalent \"<unit>^-1\" \"E_h\" render \"E\" \"h\" subscript \"t_i^2.5\" provides t \"\" subscript \"2.5\" exponent \"m[_0^2]\" use overstriking set scripts vertically \"g/L %C6H12O6%\" uses chemical formula (enclosed pair \"%\" characters) unit partial, formula render correctly subscripted numbers Common units difficult write using ASCII text may implicitly converted correct characters (e.g., \"u\" \"ug\", \"um\", \"uL\", \"umol\" converted Greek mu symbol; \"degC\" \"degF\" render degree sign temperature unit) can transform shorthand symbol/unit names enclosed \":\" (e.g., \":angstrom:\", \":ohm:\", etc.) proper symbols Greek letters can added enclosing letter name \":\"; can use lowercase letters (e.g., \":beta:\", \":sigma:\", etc.) uppercase letters (e.g., \":Alpha:\", \":Zeta:\", etc.) components unit (unit name, subscript, exponent) can fully partially italicized/emboldened surrounding text \"*\" \"**\"","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a spanner label — tab_spanner","text":"create gt table using small portion gtcars dataset. several columns (hp, hp_rpm, trq, trq_rpm, mpg_c, mpg_h) use tab_spanner() add spanner label \"performance\". effectively groups together several columns related car performance unifying label.    default gather = TRUE option, columns selected particular spanner moved separation . can seen example uses subset towny dataset. starting column order name, latitude, longitude, population_2016, density_2016, population_2021, density_2021. first two uses tab_spanner() deal making separate spanners two population two density columns. use, columns moved new ordering: name, latitude, longitude, population_2016, population_2021, density_2016, density_2021. third final call tab_spanner() affect ordering columns.    columns moved, minimal amount moving required (pulling columns right) ensure columns gathered appropriate spanners. last call, two things note: (1) label values can use md() (html()) helper functions help create styled text, (2) id value may supplied reference later (e.g., styling tab_style() applying footnotes tab_footnote()). possible stack multiple spanners atop consecutive calls tab_spanner(). bit like playing Tetris: putting spanner anywhere another spanner (.e., one shared columns) means second spanner reside level prior. look examples see works, also explore lesser-known placement tricks. use cut version exibble , set level-1 spanners, place level-2 spanner two spanners.    example, used spanners argument define \"Numbers Text\"-labeled spanner reside. , supplied \"num_spanner\" \"text_spanner\" ID values two spanners associated num, currency, char, fctr columns. Alternatively, given column names columns argument achieved result. actually use combination spanners columns define spanner placed. example just :    , , solely supplied column names columns instead using hybrid approach, interesting express definition spanners flexible combination. wanted extend example place spanner date, time, datetime columns? tried manner exemplified , spanner placed third level spanners:    Remember approach taken tab_spanner() keep stacking atop existing spanners. , space next \"Text Values\" spanner first level. can either revise order tab_spanner() calls, , use level argument force spanner level (long space).    puts spanner intended level. free locations available level specified get error stating columns used new spanner (can circumvented, necessary, replace = TRUE option). choose level higher maximum occupied, spanner dropped . , behaviors indicative Tetris-like rules tend work well application spanners. Using subset towny dataset, can create interesting gt table. First, certain columns selected dataset, filtering rows done, rows sorted, first 10 rows kept. data introduced gt(), apply spanner labels using two calls tab_spanner(). second , incorporate unit notation text (within \"{{\"/\"}}\") label get display nicely-formatted units.","code":"gtcars |>   dplyr::select(     -mfr, -trim, bdy_style,     -drivetrain, -trsmn, -ctry_origin   ) |>   dplyr::slice(1:8) |>   gt(rowname_col = \"model\") |>   tab_spanner(     label = \"performance\",     columns = c(       hp, hp_rpm, trq, trq_rpm, mpg_c, mpg_h     )   ) towny |>   dplyr::slice_max(population_2021, n = 5) |>   dplyr::select(     name, latitude, longitude,     ends_with(\"2016\"), ends_with(\"2021\")   ) |>   gt() |>   tab_spanner(     label = \"Population\",     columns = starts_with(\"pop\")   ) |>   tab_spanner(     label = \"Density\",     columns = starts_with(\"den\")   ) |>   tab_spanner(     label = md(\"*Location*\"),     columns = ends_with(\"itude\"),     id = \"loc\"   ) exibble_narrow <- exibble |> dplyr::slice_head(n = 3)  exibble_narrow |>   gt() |>   tab_spanner(     label = \"Row Information\",     columns = c(row, group)   ) |>   tab_spanner(     label = \"Numeric Values\",     columns = where(is.numeric),     id = \"num_spanner\"   ) |>   tab_spanner(     label = \"Text Values\",     columns = c(char, fctr),     id = \"text_spanner\"   ) |>   tab_spanner(     label = \"Numbers and Text\",     spanners = c(\"num_spanner\", \"text_spanner\")   ) exibble_narrow_gt <-   exibble_narrow |>   gt() |>   tab_spanner(     label = \"Numeric Values\",     columns = where(is.numeric),     id = \"num_spanner\"   ) |>   tab_spanner(     label = \"Text Values\",     columns = c(char, fctr),     id = \"text_spanner\"   ) |>   tab_spanner(     label = \"Text, Dates, Times, Datetimes\",     columns = contains(c(\"date\", \"time\")),     spanners = \"text_spanner\"   )  exibble_narrow_gt exibble_narrow_gt |>   tab_spanner(     label = \"Date and Time Columns\",     columns = contains(c(\"date\", \"time\")),     id = \"date_time_spanner\"   ) exibble_narrow_gt |>   tab_spanner(     label = \"Date and Time Columns\",     columns = contains(c(\"date\", \"time\")),     level = 1,     id = \"date_time_spanner\"   ) towny |>   dplyr::select(     name, ends_with(c(\"2001\", \"2006\")), matches(\"2001_2006\")   ) |>   dplyr::filter(population_2001 > 100000) |>   dplyr::slice_max(pop_change_2001_2006_pct, n = 10) |>   gt() |>   fmt_integer() |>   fmt_percent(columns = matches(\"change\"), decimals = 1) |>   tab_spanner(     label = \"Population\",     columns = starts_with(\"population\")   ) |>   tab_spanner(     label = \"Density, {{*persons* km^-2}}\",     columns = starts_with(\"density\")   ) |>   cols_label(     ends_with(\"01\") ~ \"2001\",     ends_with(\"06\") ~ \"2006\",     matches(\"change\") ~ md(\"Population Change,<br>2001 to 2006\")   ) |>   cols_width(everything() ~ px(120))"},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add a spanner label — tab_spanner","text":"2-2","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Add a spanner label — tab_spanner","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":null,"dir":"Reference","previous_headings":"","what":"Create column labels and spanners via delimited column names — tab_spanner_delim","title":"Create column labels and spanners via delimited column names — tab_spanner_delim","text":"tab_spanner_delim() can take specially-crafted column names generate one spanners (revise column labels time). done splitting column name specified delimiter text (delim) placing fragments top bottom (.e., higher-level spanners column labels) vice versa. Furthermore, neighboring text fragments different spanner levels text coalesced together. instance, three side--side column names rating_1, rating_2, rating_3 (default case least) result spanner label \"rating\" columns labels \"1\", \"2\", \"3\". many options cols_spanner_delim() slice dice delimited column names different ways: delimiter text: choose delimiter text use fragmentation column names spanners delim argument direction amount splitting: can choose split n times according limit argument, , get specify side column name splitting commence reversal fragments: can reverse order fragments get splitting procedure reverse argument column constraints: possible constrain columns gt table participate spanner creation using vectors tidyselect-style expressions","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create column labels and spanners via delimited column names — tab_spanner_delim","text":"","code":"tab_spanner_delim(   data,   delim,   columns = everything(),   split = c(\"last\", \"first\"),   limit = NULL,   reverse = FALSE )"},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create column labels and spanners via delimited column names — tab_spanner_delim","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. delim Delimiter splitting scalar<character> // required delimiter text use split one column names (.e., targeted via columns argument). columns Columns target <column-targeting expression> // default: everything() columns consider splitting, relabeling, spanner setting operations. Can either series column names provided c(), vector column indices, select helper function (e.g., starts_with(), ends_with(), contains(), matches(), num_range(), everything()). split Splitting side singl-kw:[last|first] // default: \"last\" delimiter splitting occur \"last\" instance delim character \"first\"? default uses \"last\" keyword, splitting begins last instance delimiter column name. option consequence limit value applied lesser number delimiter characters given column name (.e., number splits maximum possible number). limit Limit splitting scalar<numeric|integer|character> // default: NULL (optional) optional limit place splitting procedure. default NULL means column name split many times delimiter characters. words, default means limit. integer value given limit splitting cease iteration given limit. works tandem split since can adjust number splits either right side (split = \"last\") left side (split = \"first\") column name. reverse Reverse vector split names scalar<logical> // default: FALSE order split names reversed? default, FALSE.","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create column labels and spanners via delimited column names — tab_spanner_delim","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":"details-on-column-splitting","dir":"Reference","previous_headings":"","what":"Details on column splitting","title":"Create column labels and spanners via delimited column names — tab_spanner_delim","text":"take hypothetical table includes column names province.NL_ZH.pop, province.NL_ZH.gdp, province.NL_NH.pop, province.NL_NH.gdp, can see naming system well-defined structure. start general left (\"province\") move specific right (\"pop\"). columns table exact order, things ideal state eventual spanner labels form neighboring. using tab_spanner_delim() delim set \".\" get following text fragments: province.NL_ZH.pop -> \"province\", \"NL_ZH\", \"pop\" province.NL_ZH.gdp -> \"province\", \"NL_ZH\", \"gdp\" province.NL_NH.pop -> \"province\", \"NL_NH\", \"pop\" province.NL_NH.gdp -> \"province\", \"NL_NH\", \"gdp\" gives us following arrangement column labels spanner labels:   might situations delimiter used throughout last instance requires splitting. pair column names like north_holland_pop north_holland_area want \"pop\" \"area\" column labels underneath single spanner (\"north_holland\"). achieve , split limit arguments used values need split = \"last\" limit = 1. give us following arrangement:","code":"--------- `\"province\"` ---------- <- level 2 spanner ---`\"NL_ZH\"`--- | ---`\"NL_NH\"`--- <- level 1 spanners `\"pop\"`|`\"gdp\"` | `\"pop\"`|`\"gdp\"` <- column labels --------------------------------- --`\"north_holland\"`-- <- level 1 spanner  `\"pop\"`  |  `\"area\"` <- column labels ---------------------"},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create column labels and spanners via delimited column names — tab_spanner_delim","text":"subset towny dataset, can create gt table use tab_spanner_delim() automatically generate column spanner labels. case column names form population_<year>. underscore character delimiter separates common word \"population\" year value. default way splitting, fragments right lowest (really become new column labels) moving left get spanners. look tab_spanner_delim() handles column names:    spanner created use tab_spanner_delim() automatically given ID value gt. hard know ID value , can use tab_info() inspect table's indices ID values.    informational table, see ID spanner \"spanner-population_1996\". Also, columns still accessible original column names (tab_spanner_delim() change labels though). use tab_style() along cells_column_spanners() add styling spanner label towny_subset_gt table.    can plan ahead bit refashion column names dplyr introducing table gt() tab_spanner_delim(). column labels underscore delimiters splitting wanted (period space character used instead). usage tab_spanner_delim() gives two levels spanners. can touch labels cols_label_with() text_transform().    summarized, filtered, pivoted version pizzaplace dataset, can create another gt table use tab_spanner_delim() delimiter/separator also used tidyr::pivot_wider(). can also process generated column labels cols_label_with().","code":"towny_subset_gt <-   towny |>   dplyr::select(name, starts_with(\"population\")) |>   dplyr::filter(grepl(\"^F\", name)) |>   gt() |>   tab_spanner_delim(delim = \"_\") |>   fmt_integer()  towny_subset_gt towny_subset_gt |> tab_info() towny_subset_gt |>   tab_style(     style = cell_text(weight = \"bold\", transform = \"capitalize\"),     locations = cells_column_spanners(spanners = \"spanner-population_1996\")   ) towny |>   dplyr::slice_max(population_2021, n = 5) |>   dplyr::select(name, ends_with(\"pct\")) |>   dplyr::rename_with(     .fn = function(x) {       x |>         sub(\"pop_change_\", \"Population Change.\", x = _) |>         sub(\"_pct\", \".pct\", x = _)     }   ) |>   gt(rowname_col = \"name\") |>   tab_spanner_delim(delim = \".\") |>   fmt_number(decimals = 1, scale_by = 100) |>   cols_label_with(     fn = function(x) gsub(\"pct\", \"%\", x)   ) |>   text_transform(     fn = function(x) gsub(\"_\", \" - \", x, fixed = TRUE),     locations = cells_column_spanners()   ) |>   tab_style(     style = cell_text(align = \"center\"),     locations = cells_column_labels()   ) |>   tab_style(     style = \"padding-right: 36px;\",     locations = cells_body()   ) pizzaplace |>   dplyr::select(name, date, type, price) |>   dplyr::group_by(name, date, type) |>   dplyr::summarize(     revenue = sum(price),     sold = dplyr::n(),     .groups = \"drop\"   ) |>   dplyr::filter(date %in% c(\"2015-01-01\", \"2015-01-02\", \"2015-01-03\")) |>   dplyr::filter(type %in% c(\"classic\", \"veggie\")) |>   tidyr::pivot_wider(     names_from = date,     names_sep = \".\",     values_from = c(revenue, sold),     values_fn = sum,     names_sort = TRUE   ) |>   gt(rowname_col = \"name\", groupname_col = \"type\") |>   tab_spanner_delim(delim = \".\") |>   sub_missing(missing_text = \"\") |>   fmt_currency(columns = starts_with(\"revenue\")) |>   data_color(     columns = starts_with(\"revenue\"),     method = \"numeric\",     palette = c(\"white\", \"lightgreen\")   ) |>   cols_label_with(     fn = function(x) {       paste0(x, \" (\", vec_fmt_datetime(x, format = \"E\"), \")\")     }   )"},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Create column labels and spanners via delimited column names — tab_spanner_delim","text":"2-3","code":""},{"path":"https://gt.rstudio.com/reference/tab_spanner_delim.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Create column labels and spanners via delimited column names — tab_spanner_delim","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_stub_indent.html","id":null,"dir":"Reference","previous_headings":"","what":"Control indentation of row labels in the stub — tab_stub_indent","title":"Control indentation of row labels in the stub — tab_stub_indent","text":"Indentation row labels effective way establishing structure table stub. tab_stub_indent() allows fine control row label indentation stub. can use explicit definition indentation level (number 0 5), , employ indentation directive using keywords (\"increase\"/\"decrease\").","code":""},{"path":"https://gt.rstudio.com/reference/tab_stub_indent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control indentation of row labels in the stub — tab_stub_indent","text":"","code":"tab_stub_indent(data, rows, indent = \"increase\")"},{"path":"https://gt.rstudio.com/reference/tab_stub_indent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control indentation of row labels in the stub — tab_stub_indent","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. rows Rows target <row-targeting expression> // required rows consider indentation change. can supply vector row ID values within c(), vector row indices, use select helpers (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). indent Indentation directive scalar<character|numeric|integer> // default: \"increase\" indentation directive either keyword describing indentation change explicit integer value directly setting indentation level. keyword \"increase\" (default) increase indentation level one; \"decrease\" reverse direction. starting indentation level 0 means indentation values serves lower bound. upper bound indentation level 5.","code":""},{"path":"https://gt.rstudio.com/reference/tab_stub_indent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control indentation of row labels in the stub — tab_stub_indent","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_stub_indent.html","id":"compatibility-of-arguments-with-the-from-column-helper-function","dir":"Reference","previous_headings":"","what":"Compatibility of arguments with the from_column() helper function","title":"Control indentation of row labels in the stub — tab_stub_indent","text":"from_column() can used indent argument tab_stub_indent() obtain varying parameter values specified column within table. means row label indented little bit differently. Please note argument (indent), from_column() call needs reference column data numeric integer type. Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide().","code":""},{"path":"https://gt.rstudio.com/reference/tab_stub_indent.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control indentation of row labels in the stub — tab_stub_indent","text":"Using subset photolysis dataset within gt table, can provide indentation row labels stub via tab_stub_indent(). provide indent value 3 prominent indentation clearly shows row labels subordinate two row group labels table (\"inorganic reactions\" \"carbonyls\").    use summarized version pizzaplace dataset create another gt table row groups row labels. summary_rows(), generate summary rows top row group. Using tab_stub_indent() can add indentation row labels stub.    Indentation entries stub can controlled values within column. example using constants dataset, variations row label mutated eliminate common leading text (replacing \"...\"). time, indentation rows set 4 indent column (value 0 otherwise). tab_stub_indent() statement uses from_column(), passes values indent column namesake argument. hide indent column view use cols_hide().","code":"photolysis |>   dplyr::select(cmpd_name, products, type, l, m, n) |>   dplyr::slice_head(n = 10) |>   gt(groupname_col = \"type\", rowname_col = \"cmpd_name\") |>   fmt_chem(columns = products) |>   fmt_scientific(columns = l) |>   tab_stub_indent(     rows = everything(),     indent = 3   ) pizzaplace |>   dplyr::group_by(type, size) |>   dplyr::summarize(     sold = dplyr::n(),     income = sum(price),     .groups = \"drop\"   ) |>   gt(rowname_col = \"size\", groupname_col = \"type\") |>   tab_header(title = \"Pizzas Sold in 2015\") |>   fmt_integer(columns = sold) |>   fmt_currency(columns = income) |>   summary_rows(     fns = list(label = \"All Sizes\", fn = \"sum\"),     side = \"top\",     fmt = list(       ~ fmt_integer(., columns = sold),       ~ fmt_currency(., columns = income)     )   ) |>   tab_options(     summary_row.background.color = \"gray95\",     row_group.background.color = \"#FFEFDB\",     row_group.as_column = TRUE   ) |>   tab_stub_indent(     rows = everything(),     indent = 2   ) constants |>   dplyr::select(name, value, uncert, units) |>   dplyr::filter(     grepl(\"^atomic mass constant\", name) |       grepl(\"^Rydberg constant\", name) |       grepl(\"^Bohr magneton\", name)   ) |>   dplyr::mutate(     indent = ifelse(grepl(\"constant |magneton \", name), 4, 0),     name = gsub(\".*constant |.*magneton \", \"...\", name)   ) |>   gt(rowname_col = \"name\") |>   tab_stubhead(label = \"Physical Constant\") |>   tab_stub_indent(     rows = everything(),     indent = from_column(column = \"indent\")   ) |>   fmt_scientific(columns = c(value, uncert)) |>   fmt_units(columns = units) |>   cols_hide(columns = indent) |>   cols_label(     value = \"Value\",     uncert = \"Uncertainty\",     units = \"Units\"   ) |>   cols_width(     stub() ~ px(250),     c(value, uncert) ~ px(150),     units ~ px(80)   ) |>   tab_style(     style = cell_text(indent = px(10)),     locations = list(       cells_column_labels(columns = units),       cells_body(columns = units)     )   )"},{"path":"https://gt.rstudio.com/reference/tab_stub_indent.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Control indentation of row labels in the stub — tab_stub_indent","text":"2-6","code":""},{"path":"https://gt.rstudio.com/reference/tab_stub_indent.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Control indentation of row labels in the stub — tab_stub_indent","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_stubhead.html","id":null,"dir":"Reference","previous_headings":"","what":"Add label text to the stubhead — tab_stubhead","title":"Add label text to the stubhead — tab_stubhead","text":"can add label stubhead gt table tab_stubhead(). stubhead lone part table positioned left column labels, stub. stub exist, stubhead (visible change made using function case). flexibility use Markdown formatting stubhead label via md() helper function. Furthermore, table intended HTML output, can use HTML inside html() stubhead label.","code":""},{"path":"https://gt.rstudio.com/reference/tab_stubhead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add label text to the stubhead — tab_stubhead","text":"","code":"tab_stubhead(data, label)"},{"path":"https://gt.rstudio.com/reference/tab_stubhead.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add label text to the stubhead — tab_stubhead","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. label Stubhead label text scalar<character> // required text used stubhead label. can optionally use md() html() style text Markdown retain HTML elements text.","code":""},{"path":"https://gt.rstudio.com/reference/tab_stubhead.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add label text to the stubhead — tab_stubhead","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_stubhead.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add label text to the stubhead — tab_stubhead","text":"Using small subset gtcars dataset, can create gt table row labels. Since row labels stub (via use rowname_col = \"model\" gt() function call) stubhead, , add stubhead label (\"car\") tab_stubhead() describe stub.    stubhead can contain sorts interesting content. icon car? can make happen help fontawesome package.    stub two columns wide (made possible using row_group_as_column = TRUE gt() statement), stubhead merged cell atop two stub columns representing row group row label. example type situation table uses peeps dataset.    stubhead cell text can styled using tab_style() cells_stubhead(). example, using reactions dataset, style stubhead label vertically centered text highly emboldened.","code":"gtcars |>   dplyr::select(model, year, hp, trq) |>   dplyr::slice(1:5) |>   gt(rowname_col = \"model\") |>   tab_stubhead(label = \"car\") gtcars |>   dplyr::select(model, year, hp, trq) |>   dplyr::slice(1:5) |>   gt(rowname_col = \"model\") |>   tab_stubhead(label = fontawesome::fa(\"car\")) peeps |>   dplyr::filter(country %in% c(\"POL\", \"DEU\")) |>   dplyr::group_by(country) |>   dplyr::filter(dplyr::row_number() %in% 1:5) |>   dplyr::ungroup() |>   dplyr::mutate(name = paste0(toupper(name_family), \", \", name_given)) |>   dplyr::select(name, address, city, postcode, country) |>   gt(     rowname_col = \"name\",     groupname_col = \"country\",     row_group_as_column = TRUE   ) |>   tab_stubhead(label = \"Country Code / Person\") |>   tab_style(     style = cell_text(transform = \"capitalize\"),     locations = cells_column_labels()   ) reactions |>   dplyr::filter(cmpd_type == \"nitrophenol\") |>   dplyr::select(cmpd_name, OH_k298, Cl_k298) |>   dplyr::filter(!(is.na(OH_k298) & is.na(Cl_k298))) |>   gt(rowname_col = \"cmpd_name\") |>   tab_spanner(     label = \"Rate constant at 298 K, in {{cm^3 molecules^-1 s^-1}}\",     columns = ends_with(\"k298\")   ) |>   tab_stubhead(label = \"Nitrophenol Compound\") |>   fmt_scientific() |>   sub_missing() |>   cols_label_with(fn = function(x) sub(\"_k298\", \"\", x)) |>   cols_width(everything() ~ px(200)) |>   tab_style(     style = cell_text(v_align = \"middle\", weight = \"800\"),     locations = cells_stubhead()   )"},{"path":"https://gt.rstudio.com/reference/tab_stubhead.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add label text to the stubhead — tab_stubhead","text":"2-5","code":""},{"path":"https://gt.rstudio.com/reference/tab_stubhead.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Add label text to the stubhead — tab_stubhead","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Add custom styles to one or more cells — tab_style","title":"Add custom styles to one or more cells — tab_style","text":"tab_style() can target specific cells apply styles . best done conjunction helper functions cell_text(), cell_fill(), cell_borders(). Currently, function focused application styles HTML output (, output formats ignore tab_style() calls). Using aforementioned helper functions, styles can apply: background color cell (cell_fill(): color) cell's text color, font, size (cell_text(): color, font, size) text style (cell_text(): style), enabling use italics oblique text. text weight (cell_text(): weight), allowing use thin bold text (degree choice greater variable fonts) alignment indentation text (cell_text(): align indent) cell borders (cell_borders())","code":""},{"path":"https://gt.rstudio.com/reference/tab_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add custom styles to one or more cells — tab_style","text":"","code":"tab_style(data, style, locations)"},{"path":"https://gt.rstudio.com/reference/tab_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add custom styles to one or more cells — tab_style","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. style Style declarations <style expressions> // required styles use cells targeted locations. cell_text(), cell_fill(), cell_borders() helper functions can used easily generate valid styles. using one helper function define styles, calls must enclosed list(). Custom CSS declarations can used HTML output including css()-based statement list item. locations Locations target <locations expressions> // required cell set cells associated style. Supplying cells_*() helper functions useful way target location cells associated styling. helper functions : cells_title(), cells_stubhead(), cells_column_spanners(), cells_column_labels(), cells_row_groups(), cells_stub(), cells_body(), cells_summary(), cells_grand_summary(), cells_stub_summary(), cells_stub_grand_summary(), cells_footnotes(), cells_source_notes(). Additionally, can enclose several cells_*() calls within list() wish apply styling different types locations (e.g., body cells, row group labels, table title, etc.).","code":""},{"path":"https://gt.rstudio.com/reference/tab_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add custom styles to one or more cells — tab_style","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_style.html","id":"using-from-column-with-cell-styling-functions","dir":"Reference","previous_headings":"","what":"Using from_column() with cell_*() styling functions","title":"Add custom styles to one or more cells — tab_style","text":"from_column() can used certain arguments cell_fill() cell_text(); allows get parameter values specified column within table. means body cells targeted styling formatted little bit differently, using options taken column. cell_fill(), can use from_column() color argument. cell_text() allows use from_column() following arguments: color size align v_align style weight stretch decorate transform whitespace indent Please note aforementioned arguments, from_column() call needs reference column data correct type (different argument). Additional columns parameter values can generated cols_add() (already present). Columns contain parameter data can also hidden final display cols_hide(). Importantly, tab_style() call use from_column() within styling expressions must use cells_body() within locations. map multiple options taken column onto locations.","code":""},{"path":"https://gt.rstudio.com/reference/tab_style.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add custom styles to one or more cells — tab_style","text":"use exibble dataset create simple, two-column gt table (keeping num currency columns). tab_style() (called twice), selectively add style values formatted fmt_number(). style argument tab_style() call, can define multiple types styling cell_fill() cell_text() (enclosed list). cells targeted styling require use helpers like cells_body(), used different columns rows targeted.    subset sp500 dataset, create different gt table. , color background entire rows body cells basis value expressions involving open close columns.    another two-column table based exibble dataset, create gt table. First, replace missing values sub_missing(). Next, add styling char column. styling HTML-specific involve (within list): (1) cell_fill() call (set \"lightcyan\" background), (2) string containing CSS style declaration (\"font-variant: small-caps;\").    following table based towny dataset, use larger number tab_style() calls aim styling location available table. six separate uses tab_style(), different body cells styled background colors, header footer also receive background color fills, borders applied column body cells also column labels, , row labels stub receive custom text treatment.    from_column() can used get values column. use next example, begins table color name column column associated hexadecimal color code. show color separate column, first create one cols_add() (ensuring missing values replaced \"\" via sub_missing()). , tab_style() used style column, using color = from_column() within cell_fill().    cell_text() also allows use from_column() many arguments. take small portion data sp500 add arrow based values open close columns. Within cols_add() can create new column (dir) expression get either \"red\" \"green\" text comparison open close values. values transformed arrows text_case_match(), using fontawesome icons end. However, text values still present can used cell_text() within tab_style(). from_column() makes possible use text cells dir column color input values.","code":"exibble |>   dplyr::select(num, currency) |>   gt() |>   fmt_number(decimals = 1) |>   tab_style(     style = list(       cell_fill(color = \"lightcyan\"),       cell_text(weight = \"bold\")       ),     locations = cells_body(       columns = num,       rows = num >= 5000     )   ) |>   tab_style(     style = list(       cell_fill(color = \"#F9E3D6\"),       cell_text(style = \"italic\")       ),     locations = cells_body(       columns = currency,       rows = currency < 100     )   ) sp500 |>   dplyr::filter(     date >= \"2015-12-01\" &     date <= \"2015-12-15\"   ) |>   dplyr::select(-c(adj_close, volume)) |>   gt() |>   tab_style(     style = cell_fill(color = \"lightgreen\"),     locations = cells_body(rows = close > open)   ) |>   tab_style(     style = list(       cell_fill(color = \"red\"),       cell_text(color = \"white\")       ),     locations = cells_body(rows = open > close)   ) exibble |>   dplyr::select(char, fctr) |>   gt() |>   sub_missing() |>   tab_style(     style = list(       cell_fill(color = \"lightcyan\"),       \"font-variant: small-caps;\"     ),     locations = cells_body(columns = char)   ) towny |>   dplyr::filter(csd_type == \"city\") |>   dplyr::select(     name, land_area_km2, density_2016, density_2021,     population_2016, population_2021   ) |>   dplyr::slice_max(population_2021, n = 5) |>   gt(rowname_col = \"name\") |>   tab_header(     title = md(paste(\"Largest Five\", fontawesome::fa(\"city\") , \"in `towny`\")),     subtitle = \"Changes in vital numbers from 2016 to 2021.\"   ) |>   fmt_number(     columns = starts_with(\"population\"),     n_sigfig = 3,     suffixing = TRUE   ) |>   fmt_integer(columns = starts_with(\"density\")) |>   fmt_number(columns = land_area_km2, decimals = 1) |>   cols_merge(     columns = starts_with(\"density\"),     pattern = paste(\"{1}\", fontawesome::fa(\"arrow-right\"), \"{2}\")   ) |>   cols_merge(     columns = starts_with(\"population\"),     pattern = paste(\"{1}\", fontawesome::fa(\"arrow-right\"), \"{2}\")   ) |>   cols_label(     land_area_km2 = md(\"Area, km^2^\"),     starts_with(\"density\") ~ md(\"Density, ppl/km^2^\"),     starts_with(\"population\") ~ \"Population\"   ) |>   cols_align(align = \"center\", columns = -name) |>   cols_width(     stub() ~ px(125),     everything() ~ px(150)   ) |>   tab_footnote(     footnote = \"Data was used from their respective census-year publications.\",     locations = cells_title(groups = \"subtitle\")   ) |>   tab_source_note(source_note = md(     \"All figures are compiled in the `towny` dataset (in the **gt** package).\"   )) |>   opt_footnote_marks(marks = \"letters\") |>   tab_style(     style = list(       cell_fill(color = \"gray95\"),       cell_borders(sides = c(\"l\", \"r\"), color = \"gray50\", weight = px(3))     ),     locations = cells_body(columns = land_area_km2)   ) |>   tab_style(     style = cell_fill(color = \"lightblue\" |> adjust_luminance(steps = 2)),     locations = cells_body(columns = -land_area_km2)   ) |>   tab_style(     style = list(cell_fill(color = \"gray35\"), cell_text(color = \"white\")),     locations = list(cells_footnotes(), cells_source_notes())   ) |>   tab_style(     style = cell_fill(color = \"gray98\"),     locations = cells_title()   ) |>   tab_style(     style = cell_text(       size = \"smaller\",       weight = \"bold\",       transform = \"uppercase\"     ),     locations = cells_stub()   ) |>   tab_style(     style = cell_borders(       sides = c(\"t\", \"b\"),       color = \"powderblue\",       weight = px(3)     ),     locations = list(cells_column_labels(), cells_stubhead())   ) dplyr::tibble(   name = c(     \"red\", \"green\", \"blue\", \"yellow\", \"orange\",     \"cyan\", \"purple\", \"magenta\", \"lime\", \"pink\"   ),   hex = c(     \"#E6194B\", \"#3CB44B\", \"#4363D8\", \"#FFE119\", \"#F58231\",     \"#42D4F4\", \"#911EB4\", \"#F032E6\", \"#BFEF45\", \"#FABED4\"   ) ) |>   gt(rowname_col = \"name\") |>   cols_add(color = rep(NA_character_, 10)) |>   sub_missing(missing_text = \"\") |>   tab_style(     style = cell_fill(color = from_column(column = \"hex\")),     locations = cells_body(columns = color)   ) |>   tab_style(     style = cell_text(font = system_fonts(name = \"monospace-code\")),     locations = cells_body()   ) |>   opt_all_caps() |>   cols_width(everything() ~ px(100)) |>   tab_options(table_body.hlines.style = \"none\") sp500 |>   dplyr::filter(date > \"2015-01-01\") |>   dplyr::slice_min(date, n = 5) |>   dplyr::select(date, open, close) |>   gt(rowname_col = \"date\") |>   fmt_currency(columns = c(open, close)) |>   cols_add(dir = ifelse(close < open, \"red\", \"forestgreen\")) |>   cols_label(dir = \"\") |>   text_case_match(     \"red\" ~ fontawesome::fa(\"arrow-down\"),     \"forestgreen\" ~ fontawesome::fa(\"arrow-up\")   ) |>   tab_style(     style = cell_text(color = from_column(\"dir\")),     locations = cells_body(columns = dir)   )"},{"path":"https://gt.rstudio.com/reference/tab_style.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Add custom styles to one or more cells — tab_style","text":"2-10","code":""},{"path":"https://gt.rstudio.com/reference/tab_style.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Add custom styles to one or more cells — tab_style","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/tab_style_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Target cells in the table body and style accordingly — tab_style_body","title":"Target cells in the table body and style accordingly — tab_style_body","text":"tab_style_body() can target cells value, regex, custom matching rules apply styles surrounding context (.e., styling entire row column wherein match found). Just general tab_style() function, function focused application styles HTML output (, output formats ignore tab_style() calls). collection cell_*() helper functions available gt, can modify: background color cell (cell_fill(): color) cell's text color, font, size (cell_text(): color, font, size) text style (cell_text(): style), enabling use italics oblique text. text weight (cell_text(): weight), allowing use thin bold text (degree choice greater variable fonts) alignment indentation text (cell_text(): align indent) cell borders (cell_borders())","code":""},{"path":"https://gt.rstudio.com/reference/tab_style_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target cells in the table body and style accordingly — tab_style_body","text":"","code":"tab_style_body(   data,   style,   columns = everything(),   rows = everything(),   values = NULL,   pattern = NULL,   fn = NULL,   targets = \"cell\",   extents = \"body\" )"},{"path":"https://gt.rstudio.com/reference/tab_style_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target cells in the table body and style accordingly — tab_style_body","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. style Style declarations <style expressions> // required styles use targeted cells. cell_text(), cell_fill(), cell_borders() can used easily generate valid styles. using one helper function define styles, calls must enclosed list(). Custom CSS declarations can used HTML output including css()-based statement list item. columns Columns target <column-targeting expression> // default: everything() columns substitution operations constrained. Can either series column names provided c(), vector column indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). rows Rows target <row-targeting expression> // default: everything() conjunction columns, can specify rows form constraint targeting operations. default everything() results rows columns formatted. Alternatively, can supply vector row IDs within c(), vector row indices, select helper function (e.g. starts_with(), ends_with(), contains(), matches(), num_range(), everything()). can also use expressions filter rows need (e.g., [colname_1] > 100 & [colname_2] < 50). values Values targeting vector<character|numeric|integer> // default: NULL (optional) specific value values targeted styling. pattern also supplied values ignored. pattern Regex pattern targeting scalar<character> // default: NULL (optional) regex pattern can target solely values character-based columns. values also supplied, pattern take precedence. fn Function return logical values <function> // default: NULL (optional) supplied function operates cell column specified columns rows. function fashioned single logical value returned. either values pattern also supplied, fn take precedence. targets Styling targets vector<character> // default: \"cell\" vector styling target keywords contain expand target cell. default, vector just containing \"cell\". However, keywords \"row\" \"column\" may used separately combination style target cells' associated rows columns. extents Styling extents vector<character> // default: \"body\" vector locations project styling. default, vector just containing \"body\", whereby styled rows columns (facilitated via inclusion \"row\" \"column\" keywords targets) permeate stub. additional keyword \"stub\" may used alone conjunction \"body\" project expand styling stub.","code":""},{"path":"https://gt.rstudio.com/reference/tab_style_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target cells in the table body and style accordingly — tab_style_body","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/tab_style_body.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target cells in the table body and style accordingly — tab_style_body","text":"Use exibble create gt table stub row groups. contains assortment values potentially undergo styling via tab_style_body().   Cells table body can styled specification literal values values argument tab_style_body(). okay search numerical, character, logical values across columns. target values 49.95 33.33 style cells orange fill.    Multiple styles can combined list, example using cell targets:    can opt color entire rows columns (, want ) specific keywords targets argument. 49.95 value style entire row 33.33 entire column get styling.    minor variation prior example, possible extend styling locations, , entirely project styling elsewhere. done extents argument. Valid keywords can included vector : \"body\" (default) \"stub\". take previous example extend styling row stub.    can also use pattern argument target cell values character-based columns. \"fctr\" column skipped fact factor-based column.    flexibility targeting, best use fn argument. function give fn invoked separately cells columns argument tab_style_body() might useful limit cells evaluated. next example, supplied function used numeric values can make sure using columns = (.numeric).    Styling every NA value table also easily accomplished fn argument way .na().","code":"gt_tbl <-   exibble |>   gt(     rowname_col = \"row\",     groupname_col = \"group\"   ) gt_tbl |>   tab_style_body(     style = cell_fill(color = \"orange\"),     values = c(49.95, 33.33)   ) gt_tbl |>   tab_style_body(     style = list(       cell_text(font = google_font(\"Inter\"), color = \"white\"),       cell_fill(color = \"red\"),       cell_borders(         sides = c(\"left\", \"right\"),         color = \"steelblue\",         weight = px(4)       )     ),     values = c(49.95, 33.33)   ) gt_tbl |>   tab_style_body(     style = cell_fill(color = \"lightblue\"),     values = 49.95,     targets = \"row\"   ) |>   tab_style_body(     style = cell_fill(color = \"lightblue\"),     values = 33.33,     targets = \"column\"   ) gt_tbl |>   tab_style_body(     style = cell_fill(color = \"lightblue\"),     values = 49.95,     targets = \"row\",     extents = c(\"body\", \"stub\")   ) |>   tab_style_body(     style = cell_fill(color = \"lightblue\"),     values = 33.33,     targets = \"column\"   ) gt_tbl |>   tab_style_body(     style = cell_fill(color = \"green\"),     pattern = \"ne|na\"   ) gt_tbl |>   tab_style_body(     columns = where(is.numeric),     style = cell_fill(color = \"pink\"),     fn = function(x) x >= 0 && x < 50   ) gt_tbl |>   tab_style_body(     style = cell_text(color = \"red3\"),     fn = function(x) is.na(x)   ) |>   sub_missing(missing_text = \"Not Available\")"},{"path":"https://gt.rstudio.com/reference/tab_style_body.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Target cells in the table body and style accordingly — tab_style_body","text":"2-11","code":""},{"path":"https://gt.rstudio.com/reference/tab_style_body.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Target cells in the table body and style accordingly — tab_style_body","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/test_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a path to a test image — test_image","title":"Generate a path to a test image — test_image","text":"Two test images available within gt package. contain imagery (sized 200px 200px) one PNG file SVG file. function useful paired local_image() since test various sizes test image within function.","code":""},{"path":"https://gt.rstudio.com/reference/test_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a path to a test image — test_image","text":"","code":"test_image(type = c(\"png\", \"svg\"))"},{"path":"https://gt.rstudio.com/reference/test_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a path to a test image — test_image","text":"type image type singl-kw:[png|svg] // default: \"png\" type image produce can either \"png\" (default) \"svg\".","code":""},{"path":"https://gt.rstudio.com/reference/test_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a path to a test image — test_image","text":"character vector single path image file.","code":""},{"path":"https://gt.rstudio.com/reference/test_image.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Generate a path to a test image — test_image","text":"9-4","code":""},{"path":"https://gt.rstudio.com/reference/test_image.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Generate a path to a test image — test_image","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/text_case_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform whole or partial text replacements with a 'switch'-like approach — text_case_match","title":"Perform whole or partial text replacements with a 'switch'-like approach — text_case_match","text":"text_case_match() provides useful interface approach replacing table cells behaves much like switch statement. targeting cell transformation happens .locations argument. overall targeting handled, need supply sequence two-sided formulas matching general form: <vector_old_text> ~ <new_text>. left hand side (LHS) character vector containing strings match . right hand side (RHS) contain single string (something coercible length one character vector). also .replace argument changes matching replacing behavior. default, text_case_match() try match entire strings replace strings. can changed partial matching replacement strategy alternate option.","code":""},{"path":"https://gt.rstudio.com/reference/text_case_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform whole or partial text replacements with a 'switch'-like approach — text_case_match","text":"","code":"text_case_match(   .data,   ...,   .default = NULL,   .replace = c(\"all\", \"partial\"),   .locations = cells_body() )"},{"path":"https://gt.rstudio.com/reference/text_case_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform whole or partial text replacements with a 'switch'-like approach — text_case_match","text":".data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. ... Matching expressions <multiple expressions> // required sequence two-sided formulas matching general construction: <old_text> ~ <new_text>. left hand side (LHS) determines values match can length (allowing new_text replace different values old_text). right hand side (RHS) provides replacement text (must resolve single value character class). .default Default replacement text scalar<character> // default: NULL (optional) replacement text use cell values matched LHS inputs. NULL, default, replacement text used. .replace Method text replacement singl-kw:[|partial] // default: \"\" choice matching done. default \"\" means old_text (LHS formulas given ...) must match cell text completely. option, replacement completely replace matched text. \"partial\", match occur substrings old_text. way, replacements act matched substrings. .locations Locations target <locations expressions> // default: cells_body() cell set cells associated text transformation. cells_column_spanners(), cells_column_labels(), cells_row_groups(), cells_stub(), cells_body() can used . can enclose several calls within list() wish make transformation happen different locations.","code":""},{"path":"https://gt.rstudio.com/reference/text_case_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform whole or partial text replacements with a 'switch'-like approach — text_case_match","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/text_case_match.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform whole or partial text replacements with a 'switch'-like approach — text_case_match","text":"use exibble dataset create simple, two-column gt table (keeping char fctr columns). char column, transform NA value \"elderberry\" using text_case_match() function. fctr column, sophisticated matches performed using text_case_match(). column spelled numbers can produce LHS help vec_fmt_spelled_num(). replacements contain descriptive text. last call text_case_match(), use .default replace text non-matched cases.    Next, use transformed version towny dataset create gt table. Transform text csd_type column using two-sided formulas supplied text_case_match(). can replace matches LHS Fontawesome icons furnished fontawesome R package.","code":"exibble |>   dplyr::select(char, fctr) |>   gt() |>   text_case_match(     NA ~ \"elderberry\",     .locations = cells_body(columns = char)   ) |>   text_case_match(     vec_fmt_spelled_num(1:4) ~ \"one to four\",     vec_fmt_spelled_num(5:6) ~ \"five or six\",     .default = \"seven or more\",     .locations = cells_body(columns = fctr)   ) towny |>   dplyr::select(name, csd_type, population_2021) |>   dplyr::filter(csd_type %in% c(\"city\", \"town\")) |>   dplyr::slice_max(population_2021, n = 5, by = csd_type) |>   dplyr::arrange(csd_type) |>   gt() |>   fmt_integer() |>   text_case_match(     \"city\" ~ fontawesome::fa(\"city\"),     \"town\" ~ fontawesome::fa(\"house-chimney\")   ) |>   cols_label(     name = \"City/Town\",     csd_type = \"\",     population_2021 = \"Population\"   )"},{"path":"https://gt.rstudio.com/reference/text_case_match.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Perform whole or partial text replacements with a 'switch'-like approach — text_case_match","text":"4-3","code":""},{"path":"https://gt.rstudio.com/reference/text_case_match.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Perform whole or partial text replacements with a 'switch'-like approach — text_case_match","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/text_case_when.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform whole text replacements using a 'case-when'-expression approach — text_case_when","title":"Perform whole text replacements using a 'case-when'-expression approach — text_case_when","text":"text_case_when() provides useful interface case--case approach replacing entire table cells. First , make sure targeting appropriate cells .locations argument. Following , supply sequence two-sided formulas matching general form: <logical_stmt> ~ <new_text>. left hand side (LHS) predicate statement evaluates logical vector length one (.e., either TRUE FALSE). refer values undergoing transformation, need use x variable.","code":""},{"path":"https://gt.rstudio.com/reference/text_case_when.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform whole text replacements using a 'case-when'-expression approach — text_case_when","text":"","code":"text_case_when(.data, ..., .default = NULL, .locations = cells_body())"},{"path":"https://gt.rstudio.com/reference/text_case_when.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform whole text replacements using a 'case-when'-expression approach — text_case_when","text":".data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. ... Matching expressions <multiple expressions> // required sequence two-sided formulas. left hand side (LHS) determines values match case. right hand side (RHS) provides replacement text (must resolve value character class). LHS inputs must evaluate logical vectors. .default Default replacement text scalar<character> // default: NULL (optional) replacement text use cell values matched LHS inputs. NULL, default, replacement text used. .locations Locations target <locations expressions> // default: cells_body() cell set cells associated text transformation. cells_column_spanners(), cells_column_labels(), cells_row_groups(), cells_stub(), cells_body() can used . can enclose several calls within list() wish make transformation happen different locations.","code":""},{"path":"https://gt.rstudio.com/reference/text_case_when.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform whole text replacements using a 'case-when'-expression approach — text_case_when","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/text_case_when.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform whole text replacements using a 'case-when'-expression approach — text_case_when","text":"Use portion metro dataset create gt table. use text_case_when() supply pairs predicate statements replacement text. connect_rer column, perform count pattern matches stringr::str_count() determine cells 1, 2, 3 matched patterns. cases, descriptive replacement text provided. , use .default value replace non-matched cases empty string (\"\"). Finally, use cols_label() modify labels three columns.","code":"metro |>   dplyr::arrange(desc(passengers)) |>   dplyr::select(name, lines, connect_rer) |>   dplyr::slice_head(n = 10) |>   gt() |>   text_case_when(     stringr::str_count(x, pattern = \"[ABCDE]\") == 1 ~ \"One connection.\",     stringr::str_count(x, pattern = \"[ABCDE]\") == 2 ~ \"Two connections.\",     stringr::str_count(x, pattern = \"[ABCDE]\") == 3 ~ \"Three connections.\",     .default = \"\", .locations = cells_body(columns = connect_rer)   ) |>   cols_label(     name = \"Station\",     lines = \"Lines Serviced\",     connect_rer = \"RER Connections\"   )"},{"path":"https://gt.rstudio.com/reference/text_case_when.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Perform whole text replacements using a 'case-when'-expression approach — text_case_when","text":"4-2","code":""},{"path":"https://gt.rstudio.com/reference/text_case_when.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Perform whole text replacements using a 'case-when'-expression approach — text_case_when","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/text_replace.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform highly targeted text replacement with a regex pattern — text_replace","title":"Perform highly targeted text replacement with a regex pattern — text_replace","text":"text_replace() provides specialized interface replacing text fragments table cells literal text. need ensure targeting appropriate cells locations argument. done, remaining two values supply regex pattern (pattern) replacement matched text (replacement).","code":""},{"path":"https://gt.rstudio.com/reference/text_replace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform highly targeted text replacement with a regex pattern — text_replace","text":"","code":"text_replace(data, pattern, replacement, locations = cells_body())"},{"path":"https://gt.rstudio.com/reference/text_replace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform highly targeted text replacement with a regex pattern — text_replace","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. pattern Regex pattern match scalar<character> // required regex pattern used target text fragments cells resolved locations. replacement Replacement text scalar<character> // required replacement text matched text fragments. locations Locations target <locations expressions> // default: cells_body() cell set cells associated text transformation. cells_column_spanners(), cells_column_labels(), cells_row_groups(), cells_stub(), cells_body() can used . can enclose several calls within list() wish make transformation happen different locations.","code":""},{"path":"https://gt.rstudio.com/reference/text_replace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform highly targeted text replacement with a regex pattern — text_replace","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/text_replace.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform highly targeted text replacement with a regex pattern — text_replace","text":"Use metro dataset create gt table. cols_merge(), merge name caption columns together caption NA value (special pattern syntax \"{1}<<({2})>>\" takes care ). merged content now part name column. like modify wherever text parentheses: (1) make text italicized, (2) introduce line break text parentheses. can text_replace(). pattern value \"\\\\((.*?)\\\\)\" match text parentheses, inner \"(.*?)\" capture group. replacement value \"<br>(<em>\\\\1<\/em>)\" puts capture group text \"\\\\1\" within <em> tags, wraps literal parentheses around , prepends line break tag.","code":"metro |>   dplyr::select(name, caption, lines) |>   dplyr::slice(110:120) |>   gt() |>   cols_merge(     columns = c(name, caption),     pattern = \"{1}<< ({2})>>\"   ) |>   text_replace(     locations = cells_body(columns = name),     pattern = \"\\\\((.*?)\\\\)\",     replacement = \"<br>(<em>\\\\1<\/em>)\"   )"},{"path":"https://gt.rstudio.com/reference/text_replace.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Perform highly targeted text replacement with a regex pattern — text_replace","text":"4-1","code":""},{"path":"https://gt.rstudio.com/reference/text_replace.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Perform highly targeted text replacement with a regex pattern — text_replace","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/text_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform text transformations with a custom function — text_transform","title":"Perform text transformations with a custom function — text_transform","text":"Text transforming gt act modifying formatted strings targeted cells. text_transform() provides flexibility text_*() functions family functions. , target cells undergo modification locations argument also supplying function fn argument. function given fn ideally least take x input (stands character vector essentially targeted cells) return character vector length input. Using construction function(x) { .. } function recommended.","code":""},{"path":"https://gt.rstudio.com/reference/text_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform text transformations with a custom function — text_transform","text":"","code":"text_transform(data, fn, locations = cells_body())"},{"path":"https://gt.rstudio.com/reference/text_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform text transformations with a custom function — text_transform","text":"data gt table data object obj:<gt_tbl> // required gt table object commonly created use gt() function. fn Function text transformation <function> // required function use text transformation. include x argument return character vector length input x. locations Locations target <locations expressions> // default: cells_body() cell set cells associated text transformation. cells_column_spanners(), cells_column_labels(), cells_row_groups(), cells_stub(), cells_body() can used . can enclose several calls within list() wish make transformation happen different locations.","code":""},{"path":"https://gt.rstudio.com/reference/text_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform text transformations with a custom function — text_transform","text":"object class gt_tbl.","code":""},{"path":"https://gt.rstudio.com/reference/text_transform.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform text transformations with a custom function — text_transform","text":"Use subset sp500 dataset create gt table. Transform text date column using function supplied text_transform() (via fn argument). Note x fn = function (x) part consists entirely ISO 8601 date strings (acceptable input vec_fmt_date() vec_fmt_datetime()).    use summarized version gtcars dataset create gt table. First, numeric values n column formatted spelled-numbers fmt_spelled_num(). output values indeed spelled exclusively lowercase letters. actually want words begin capital letter end period. make possible, text_transform() used since can modify already-formatted text. fn argument, provide custom function uses R's toTitleCase() operating x (numbers--text strings) within paste0() period can properly placed.    may occasions want remove text. example based pizzaplace dataset, generate gt table summarizes entire year data colorizing daily sales revenue. Individual cell values needed (since encoding color suffices), , text_transform() used turn every value empty string: \"\".","code":"sp500 |>   dplyr::slice_head(n = 10) |>   dplyr::select(date, open, close) |>   dplyr::arrange(-dplyr::row_number()) |>   gt() |>   fmt_currency() |>   text_transform(     fn = function(x) {       paste0(         \"<strong>\",         vec_fmt_date(x, date_style = \"m_day_year\"),         \"<\/strong>\",         \"&mdash;W\",         vec_fmt_datetime(x, format = \"w\")       )     },     locations = cells_body(columns = date)   ) |>   cols_label(     date = \"Date and Week\",     open = \"Opening Price\",     close = \"Closing Price\"   ) gtcars |>   dplyr::filter(ctry_origin %in% c(\"Germany\", \"Italy\", \"Japan\")) |>   dplyr::count(mfr, ctry_origin, sort = TRUE) |>   dplyr::arrange(ctry_origin) |>   gt(rowname_col = \"mfr\", groupname_col = \"ctry_origin\") |>   cols_label(n = \"No. of Entries\") |>   tab_stub_indent(rows = everything(), indent = 2) |>   cols_align(align = \"center\", columns = n) |>   fmt_spelled_num() |>   text_transform(     fn = function(x) {       paste0(tools::toTitleCase(x), \".\")     },     locations = cells_body(columns = n)   ) pizzaplace |>   dplyr::group_by(date) |>   dplyr::summarize(rev = sum(price)) |>   dplyr::ungroup() |>   dplyr::mutate(     month = lubridate::month(date, label = TRUE),     day_num = lubridate::mday(date)   ) |>   dplyr::select(-date) |>   tidyr::pivot_wider(names_from = month, values_from = rev) |>   gt(rowname_col = \"day_num\") |>   data_color(     method = \"numeric\",     palette = \"wesanderson::Zissou1\",     na_color = \"white\"   ) |>   text_transform(     fn = function(x) \"\",     locations = cells_body()   ) |>   opt_table_lines(extent = \"none\") |>   opt_all_caps() |>   cols_width(everything() ~ px(35)) |>   cols_align(align = \"center\")"},{"path":"https://gt.rstudio.com/reference/text_transform.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Perform text transformations with a custom function — text_transform","text":"4-4","code":""},{"path":"https://gt.rstudio.com/reference/text_transform.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Perform text transformations with a custom function — text_transform","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/towny.html","id":null,"dir":"Reference","previous_headings":"","what":"Populations of all municipalities in Ontario from 1996 to 2021 — towny","title":"Populations of all municipalities in Ontario from 1996 to 2021 — towny","text":"dataset containing census population data six census years (1996 2021) 414 Ontario's local municipalities. Municipal Act Ontario (2001) defines local municipality \"single-tier municipality lower-tier municipality\". 173 single-tier municipalities 241 lower-tier municipalities representing 99 percent Ontario's population 17 percent land use. towny dataset include information specific municipality location (latitude longitude columns), website URLs, classifications, land area sizes according 2021 boundaries. Additionally, computed columns containing population density values census year population change values adjacent census years.","code":""},{"path":"https://gt.rstudio.com/reference/towny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populations of all municipalities in Ontario from 1996 to 2021 — towny","text":"","code":"towny"},{"path":"https://gt.rstudio.com/reference/towny.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Populations of all municipalities in Ontario from 1996 to 2021 — towny","text":"tibble 414 rows 25 variables: name name municipality. website website municipality. NA official site. status status municipality. either \"lower-tier\" \"single-tier\". single-tier municipality, takes municipal duties outlined Municipal Act Provincial laws, independent upper-tier municipality. Part upper-tier municipality lower-tier municipality. upper-tier lower-tier municipalities responsible carrying duties laid Municipal Act provincial laws. csd_type Census Subdivision Type. can one \"village\", \"town\", \"township\", \"municipality\", \"city\". census_div Census division, 49. made single-tier municipalities, regional municipalities, counties, districts. latitude, longitude location municipality, given latitude longitude values decimal degrees. land_area_km2 total area local municipality square kilometers. population_1996, population_2001, population_2006, population_2011, population_2016, population_2021 Population values municipality 1996 2021 census years. density_1996, density_2001, density_2006, density_2011, density_2016, density_2021 Population density values, calculated persons per square kilometer, municipality 1996 2021 census years. pop_change_1996_2001_pct, pop_change_2001_2006_pct, pop_change_2006_2011_pct, pop_change_2011_2016_pct, pop_change_2016_2021_pct Population changes adjacent pairs census years, 1996 2021.","code":""},{"path":"https://gt.rstudio.com/reference/towny.html","id":"dataset-id-and-badge","dir":"Reference","previous_headings":"","what":"Dataset ID and Badge","title":"Populations of all municipalities in Ontario from 1996 to 2021 — towny","text":"DATA-7","code":""},{"path":"https://gt.rstudio.com/reference/towny.html","id":"dataset-introduced","dir":"Reference","previous_headings":"","what":"Dataset Introduced","title":"Populations of all municipalities in Ontario from 1996 to 2021 — towny","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/towny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Populations of all municipalities in Ontario from 1996 to 2021 — towny","text":"","code":"dplyr::glimpse(towny) #> Rows: 414 #> Columns: 25 #> $ name                     <chr> \"Addington Highlands\", \"Adelaide Metcalfe\", \"… #> $ website                  <chr> \"https://addingtonhighlands.ca\", \"https://ade… #> $ status                   <chr> \"lower-tier\", \"lower-tier\", \"lower-tier\", \"lo… #> $ csd_type                 <chr> \"township\", \"township\", \"township\", \"township… #> $ census_div               <chr> \"Lennox and Addington\", \"Middlesex\", \"Simcoe\"… #> $ latitude                 <dbl> 45.00000, 42.95000, 44.13333, 45.52917, 43.85… #> $ longitude                <dbl> -77.25000, -81.70000, -79.93333, -76.89694, -… #> $ land_area_km2            <dbl> 1293.99, 331.11, 371.53, 519.59, 66.64, 116.6… #> $ population_1996          <int> 2429, 3128, 9359, 2837, 64430, 1027, 8315, 16… #> $ population_2001          <int> 2402, 3149, 10082, 2824, 73753, 956, 8593, 18… #> $ population_2006          <int> 2512, 3135, 10695, 2716, 90167, 958, 8654, 19… #> $ population_2011          <int> 2517, 3028, 10603, 2844, 109600, 864, 9196, 2… #> $ population_2016          <int> 2318, 2990, 10975, 2935, 119677, 969, 9680, 2… #> $ population_2021          <int> 2534, 3011, 10989, 2995, 126666, 954, 9949, 2… #> $ density_1996             <dbl> 1.88, 9.45, 25.19, 5.46, 966.84, 8.81, 21.22,… #> $ density_2001             <dbl> 1.86, 9.51, 27.14, 5.44, 1106.74, 8.20, 21.93… #> $ density_2006             <dbl> 1.94, 9.47, 28.79, 5.23, 1353.05, 8.22, 22.09… #> $ density_2011             <dbl> 1.95, 9.14, 28.54, 5.47, 1644.66, 7.41, 23.47… #> $ density_2016             <dbl> 1.79, 9.03, 29.54, 5.65, 1795.87, 8.31, 24.71… #> $ density_2021             <dbl> 1.96, 9.09, 29.58, 5.76, 1900.75, 8.18, 25.39… #> $ pop_change_1996_2001_pct <dbl> -0.0111, 0.0067, 0.0773, -0.0046, 0.1447, -0.… #> $ pop_change_2001_2006_pct <dbl> 0.0458, -0.0044, 0.0608, -0.0382, 0.2226, 0.0… #> $ pop_change_2006_2011_pct <dbl> 0.0020, -0.0341, -0.0086, 0.0471, 0.2155, -0.… #> $ pop_change_2011_2016_pct <dbl> -0.0791, -0.0125, 0.0351, 0.0320, 0.0919, 0.1… #> $ pop_change_2016_2021_pct <dbl> 0.0932, 0.0070, 0.0013, 0.0204, 0.0584, -0.01…"},{"path":"https://gt.rstudio.com/reference/unit_conversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a conversion factor across two measurement units of a given class — unit_conversion","title":"Get a conversion factor across two measurement units of a given class — unit_conversion","text":"unit_conversion() helper function gives us conversion factor transforming value one form measurement units target form. example length value expressed miles transform value one kilometers multiplication value conversion factor (case 1.60934). unit_conversion() understand source destination units, need provide keyword value arguments. aid reference , call info_unit_conversions() display information table contains keywords every conversion type.","code":""},{"path":"https://gt.rstudio.com/reference/unit_conversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a conversion factor across two measurement units of a given class — unit_conversion","text":"","code":"unit_conversion(from, to)"},{"path":"https://gt.rstudio.com/reference/unit_conversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a conversion factor across two measurement units of a given class — unit_conversion","text":"Units input value scalar<character> // required keyword representing units value requires unit conversion. case value units miles, necessary input \"length.mile\". Desired units value scalar<character> // required keyword representing target units value units defined . case input value units miles rather want value expressed kilometers, value \"length.kilometer\".","code":""},{"path":"https://gt.rstudio.com/reference/unit_conversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a conversion factor across two measurement units of a given class — unit_conversion","text":"single numerical value.","code":""},{"path":"https://gt.rstudio.com/reference/unit_conversion.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a conversion factor across two measurement units of a given class — unit_conversion","text":"use portion towny dataset create table showing population, density, land area 10 municipalities. land_area_km2 values units square kilometers, however, rather values square miles. can convert numeric values formatting values fmt_number() using unit_conversion() scale_by argument since return value conversion factor (applied value multiplication). done converting 'people per square kilometer' values density_2021 'people per square mile', however, units convert denominator inverse conversion factor must used.    small slice gibraltar dataset, display temperature values terms degrees Celsius (present data) temperatures degrees Fahrenheit (achievable via conversion). can duplicate temp column cols_add() (naming new column temp_f) formatting fmt_integer() can call unit_conversion() within scale_by argument perform transformation formatting values integers.","code":"towny |>   dplyr::arrange(desc(density_2021)) |>   dplyr::slice_head(n = 10) |>   dplyr::select(name, population_2021, density_2021, land_area_km2) |>   gt(rowname_col = \"name\") |>   fmt_integer(columns = population_2021) |>   fmt_number(     columns = land_area_km2,     decimals = 1,     scale_by = unit_conversion(       from = \"area.square-kilometer\",       to = \"area.square-mile\"     )   ) |>   fmt_number(     columns = density_2021,     decimals = 1,     scale_by = 1 / unit_conversion(       from = \"area.square-kilometer\",       to = \"area.square-mile\"     )   ) |>   cols_label(     land_area_km2 = \"Land Area,<br>sq. mi\",     population_2021 = \"Population\",     density_2021 = \"Density,<br>ppl / sq. mi\",     .fn = md   ) gibraltar |>   dplyr::filter(     date == \"2023-05-15\",     time >= \"06:00\",     time <= \"12:00\"   ) |>   dplyr::select(time, temp) |>   gt() |>   tab_header(     title = \"Air Temperature During Late Morning Hours at LXGB Stn.\",     subtitle = \"May 15, 2023\"   ) |>   cols_add(temp_f = temp) |>   cols_move(columns = temp_f, after = temp) |>   tab_spanner(     label = \"Temperature\",     columns = starts_with(\"temp\")   ) |>   fmt_number(     columns = temp,     decimals = 1   ) |>   fmt_integer(     columns = temp_f,     scale_by = unit_conversion(       from = \"temperature.C\",       to = \"temperature.F\"     )   ) |>   cols_label(     time = \"Time\",     temp = \"{{degC}}\",     temp_f = \"{{degF}}\"   ) |>   cols_width(     starts_with(\"temp\") ~ px(80),     time ~ px(100)   ) |>   opt_horizontal_padding(scale = 3) |>   opt_vertical_padding(scale = 0.5) |>   opt_align_table_header(align = \"left\") |>   tab_options(heading.title.font.size = px(16))"},{"path":"https://gt.rstudio.com/reference/unit_conversion.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Get a conversion factor across two measurement units of a given class — unit_conversion","text":"8-7","code":""},{"path":"https://gt.rstudio.com/reference/unit_conversion.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Get a conversion factor across two measurement units of a given class — unit_conversion","text":"v0.11.0 (July 9, 2024)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_bytes.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as values in terms of bytes — vec_fmt_bytes","title":"Format a vector as values in terms of bytes — vec_fmt_bytes","text":"numeric values vector, can transform byte values human readable units. vec_fmt_bytes() allows formatting byte sizes either two common representations: (1) decimal units (powers 1000, examples \"kB\" \"MB\"), (2) binary units (powers 1024, examples \"KiB\" \"MiB\"). assumed input numeric values represent number bytes automatic truncation values occur. numeric values scaled range 1 <1000 decorated correct unit symbol according standard chosen. control formatting byte sizes, can use following options: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_bytes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as values in terms of bytes — vec_fmt_bytes","text":"","code":"vec_fmt_bytes(   x,   standard = c(\"decimal\", \"binary\"),   decimals = 1,   n_sigfig = NULL,   drop_trailing_zeros = TRUE,   drop_trailing_dec_mark = TRUE,   use_seps = TRUE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   incl_space = TRUE,   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_bytes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as values in terms of bytes — vec_fmt_bytes","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. standard Standard used express byte sizes singl-kw:[decimal|binary] // default: \"decimal\" form expressing large byte sizes divided : (1) decimal units (powers 1000; e.g., \"kB\" \"MB\"), (2) binary units (powers 1024; e.g., \"KiB\" \"MiB\"). decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 1 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". trailing zeros can removed drop_trailing_zeros = TRUE. n_sigfig Number significant figures scalar<numeric|integer>(val>=1) // default: NULL (optional) option format numbers n significant figures. default, NULL thus number values formatted according number decimal places set via decimals. opting format according rules significant figures, n_sigfig must number greater equal 1. values passed decimals drop_trailing_zeros arguments ignored. drop_trailing_zeros Drop trailing zeros scalar<logical> // default: FALSE logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark Drop trailing decimal mark scalar<logical> // default: TRUE logical value determines whether decimal marks always appear even decimal digits display formatting (e.g., 23 becomes 23. FALSE). default trailing decimal marks shown. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). dec_mark Decimal mark scalar<character> // default: \".\" string used decimal mark. example, using dec_mark = \",\" value 0.152 result formatted value \"0,152\"). argument ignored locale supplied (.e., NULL). force_sign Forcing display positive sign scalar<logical> // default: FALSE positive sign shown positive numbers (effectively showing sign numbers except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. incl_space Include space value units scalar<logical> // default: TRUE option whether include space value units. default use space character separation. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_bytes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as values in terms of bytes — vec_fmt_bytes","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_bytes.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as values in terms of bytes — vec_fmt_bytes","text":"create numeric vector next examples:   Using vec_fmt_bytes() default options create character vector values bytes. NA values remain NA values. rendering context autodetected unless specified output argument (, \"plain\" output type).     can change number decimal places decimals option:     formatting different locale, supply locale ID gt handle locale-specific formatting options:     need positive negative signs output values, use force_sign = TRUE:     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(3.24294e14, 8, 1362902, -59027, NA) vec_fmt_bytes(num_vals) #> [1] \"324.3 TB\" \"8 B\" \"1.4 MB\" \"-59 kB\" \"NA\" vec_fmt_bytes(num_vals, decimals = 2) #> [1] \"324.29 TB\" \"8 B\" \"1.36 MB\" \"-59.03 kB\" \"NA\" vec_fmt_bytes(num_vals, locale = \"fi\") #> [1] \"324,3 TB\" \"8 B\" \"1,4 MB\" \"-59 kB\" \"NA\" vec_fmt_bytes(num_vals, force_sign = TRUE) #> [1] \"+324.3 TB\" \"+8 B\" \"+1.4 MB\" \"-59 kB\" \"NA\" vec_fmt_bytes(num_vals, pattern = \"[{x}]\") #> [1] \"[324.3 TB]\" \"[8 B]\" \"[1.4 MB]\" \"[-59 kB]\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_bytes.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as values in terms of bytes — vec_fmt_bytes","text":"15-12","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_bytes.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as values in terms of bytes — vec_fmt_bytes","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_currency.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as currency values — vec_fmt_currency","title":"Format a vector as currency values — vec_fmt_currency","text":"numeric values vector, can perform currency-based formatting. function supports automatic formatting three-letter numeric currency code. can also specify custom currency formatted according output context currency() helper function. fine control conversion numeric values currency values, take advantage following options: currency: providing currency code common currency name procure correct currency symbol number currency subunits; also use currency() helper function specify custom currency currency symbol placement: currency symbol can placed values decimals/subunits: choice number decimal places, choice decimal symbol, option whether include exclude currency subunits (decimal portion) negative values: choice negative sign parentheses values less zero digit grouping separators: options enable/disable digit separators provide choice separator symbol scaling: can choose scale targeted values multiplier value large-number suffixing: larger figures (thousands, millions, etc.) can autoscaled decorated appropriate suffixes pattern: option use text pattern decoration formatted currency values locale-based formatting: providing locale ID result currency formatting specific chosen locale; also retrieve locale's currency none explicitly given can call info_currencies() useful reference possible inputs currency argument.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_currency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as currency values — vec_fmt_currency","text":"","code":"vec_fmt_currency(   x,   currency = NULL,   use_subunits = TRUE,   decimals = NULL,   drop_trailing_dec_mark = TRUE,   use_seps = TRUE,   accounting = FALSE,   scale_by = 1,   suffixing = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   placement = \"left\",   incl_space = FALSE,   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_currency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as currency values — vec_fmt_currency","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. currency Currency use scalar<character>|obj:<gt_currency> // default: NULL (optional) currency use numeric value. input can supplied 3-letter currency code (e.g., \"USD\" U.S. Dollars, \"EUR\" Euro currency). Use info_currencies() get information table valid currency codes examples . Alternatively, can provide common currency name (e.g., \"dollar\", \"pound\", \"yen\", etc.) simplify process. Use info_currencies() type == \"symbol\" option view information table supported currency symbol names along examples. can also use currency() helper function specify custom currency, string vary across output contexts. example, using currency(html = \"&fnof;\", default = \"f\") give us suitable glyph Dutch guilder HTML output table, simply letter \"f\" output contexts). Please note decimals default 2 using currency() helper function. use_subunits Show hide currency subunits scalar<logical> // default: TRUE option whether subunits portion currency value displayed. example, input value 273.81, default formatting produce \"$273.81\". Removing subunits (use_subunits = FALSE) give us \"$273\". decimals Number decimal places scalar<numeric|integer>(val>=0) // default: NULL (optional) decimals values corresponds exact number decimal places use. value optional currency intrinsic number decimal places (.e., subunits). value 2.34 can, example, formatted 0 decimal places currency used \"USD\" result \"$2\". 4 decimal places, formatted value becomes \"$2.3400\". drop_trailing_dec_mark Drop trailing decimal mark scalar<logical> // default: TRUE logical value determines whether decimal marks always appear even decimal digits display formatting. example, use_subunits = FALSE decimals = 0 formatted value \"$23\" can fashioned \"$23.\" setting drop_trailing_dec_mark = FALSE. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting Use accounting style scalar<logical> // default: FALSE option use accounting style values. Normally, negative values shown minus sign using accounting style instead put negative values parentheses. scale_by Scale values fixed multiplier scalar<numeric|integer> // default: 1 numeric values multiplied scale_by value undergoing formatting. Since default value 1, values changed unless different multiplier value supplied. value ignored using suffixing options (.e., suffixing set FALSE). suffixing Specification large-number suffixing scalar<logical>|vector<character> // default: FALSE suffixing option allows us scale apply suffixes larger numbers (e.g., 1924000 can transformed 1.92M). option can accept logical value, FALSE (default) perform transformation TRUE apply thousands (\"K\"), millions (\"M\"), billions (\"B\"), trillions (\"T\") suffixes automatic value scaling. can alternatively provide character vector serves specification symbols used value ranges. preferred symbols replace defaults (e.g., c(\"k\", \"Ml\", \"Bn\", \"Tr\") replaces \"K\", \"M\", \"B\", \"T\"). Including NA values vector ensure particular range either included transformation (e.g., c(NA, \"M\", \"B\", \"T\") modify numbers thousands range) range inherit previous suffix (e.g., c(\"K\", \"M\", NA, \"T\"), numbers range millions billions terms millions). use suffixing (set expressly FALSE) means value provided scale_by ignored. using system = \"ind\" default suffix set provided suffixing = TRUE equivalent c(NA, \"L\", \"Cr\"). apply suffixes thousands range, express values lakhs crores. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). dec_mark Decimal mark scalar<character> // default: \".\" string used decimal mark. example, using dec_mark = \",\" value 0.152 result formatted value \"0,152\"). argument ignored locale supplied (.e., NULL). force_sign Forcing display positive sign scalar<logical> // default: FALSE positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. placement Currency symbol placement singl-kw:[left|right] // default: \"left\" placement currency symbol. can either \"left\" (\"$450\") \"right\" (yields \"450$\"). incl_space Include space value currency symbol scalar<logical> // default: FALSE option whether include space value currency symbol. default introduce space character. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_currency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as currency values — vec_fmt_currency","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_currency.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as currency values — vec_fmt_currency","text":"create numeric vector next examples:   Using vec_fmt_currency() default options create character vector numeric values transformed U.S. Dollars (\"USD\"). Furthermore, rendering context autodetected unless specified output argument (, \"plain\" output type).     can supply currency code currency argument. use British Pounds currency = \"GBP\":     formatting different locale, supply locale ID let gt handle locale-specific formatting options:     many options formatting values. Perhaps need explicit positive negative signs? Use force_sign = TRUE .     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(5.2, 8.65, 0, -5.3, NA) vec_fmt_currency(num_vals) #> [1] \"$5.20\" \"$8.65\" \"$0.00\" \"-$5.30\" \"NA\" vec_fmt_currency(num_vals, currency = \"GBP\") #> [1] \"GBP5.20\" \"GBP8.65\" \"GBP0.00\" \"-GBP5.30\" \"NA\" vec_fmt_currency(num_vals, locale = \"fr\") #> [1] \"EUR5,20\" \"EUR8,65\" \"EUR0,00\" \"-EUR5,30\" \"NA\" vec_fmt_currency(num_vals, force_sign = TRUE) #> [1] \"+$5.20\" \"+$8.65\" \"$0.00\" \"-$5.30\" \"NA\" vec_fmt_currency(num_vals, pattern = \"`{x}`\") #> [1] \"`$5.20`\" \"`$8.65`\" \"`$0.00`\" \"`-$5.30`\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_currency.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as currency values — vec_fmt_currency","text":"15-8","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_currency.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as currency values — vec_fmt_currency","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as date values — vec_fmt_date","title":"Format a vector as date values — vec_fmt_date","text":"Format vector values date values using one 41 preset date styles. Input can form POSIXt (.e., datetimes), Date type, character (must ISO 8601 form YYYY-MM-DD HH:MM:SS YYYY-MM-DD).","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as date values — vec_fmt_date","text":"","code":"vec_fmt_date(   x,   date_style = \"iso\",   pattern = \"{x}\",   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as date values — vec_fmt_date","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. date_style Predefined style dates scalar<character>|scalar<numeric|integer>(1<=val<=41) // default: \"iso\" date style use. default short name \"iso\" corresponds ISO 8601 date formatting. 41 date styles total short names can viewed using info_date_style(). pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as date values — vec_fmt_date","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":"formatting-with-the-date-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the date_style argument","title":"Format a vector as date values — vec_fmt_date","text":"need supply preset date style date_style argument. date styles numerous can handle localization supported locale. large segment date styles termed flexible date formats means output adapt locale provided. feature makes flexible date formats better option locales \"en\" (default locale). following table provides listing date styles output values (corresponding input date 2000-02-29). can call info_date_style() console view similar table date styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as date values — vec_fmt_date","text":"create character vector dates ISO-8601 format next examples:   Using vec_fmt_date() (\"wday_month_day_year\" date style) result character vector formatted dates. NA values remain NA values. rendering context autodetected unless specified output argument (, \"plain\" output type).     can choose 41 different date formatting styles. Many styles flexible, meaning structure format adapt different locales. use \"yMMMEd\" date style demonstrate (first default locale \"en\"):     perform type formatting French (\"fr\") locale:     can always use info_date_style() call info table serves handy reference date_style options. last example, one can wrap date values pattern pattern argument. Note NA values pattern applied.","code":"str_vals <- c(\"2022-06-13\", \"2019-01-25\", \"2015-03-23\", NA) vec_fmt_date(str_vals, date_style = \"wday_month_day_year\") #> [1] \"Monday, June 13, 2022\" \"Friday, January 25, 2019\" #> [3] \"Monday, March 23, 2015\" NA vec_fmt_date(str_vals, date_style = \"yMMMEd\") #> [1] \"Mon, Jun 13, 2022\" \"Fri, Jan 25, 2019\" \"Mon, Mar 23, 2015\" NA vec_fmt_date(str_vals, date_style = \"yMMMEd\", locale = \"fr\") #> [1] \"lun. 13 juin 2022\" \"ven. 25 janv. 2019\" \"lun. 23 mars 2015\" NA vec_fmt_date(str_vals, pattern = \"Date: {x}\") #> [1] \"Date: 2022-06-13\" \"Date: 2019-01-25\" \"Date: 2015-03-23\" NA"},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as date values — vec_fmt_date","text":"15-13","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_date.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as date values — vec_fmt_date","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as datetime values — vec_fmt_datetime","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Format values vector datetime values using either presets date time components formatting directive (can either use CLDR datetime pattern strptime formatting). Input can form POSIXct (.e., datetimes), Date type, character (must ISO 8601 form YYYY-MM-DD HH:MM:SS YYYY-MM-DD).","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as datetime values — vec_fmt_datetime","text":"","code":"vec_fmt_datetime(   x,   date_style = \"iso\",   time_style = \"iso\",   sep = \" \",   format = NULL,   tz = NULL,   pattern = \"{x}\",   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as datetime values — vec_fmt_datetime","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. date_style Predefined style dates scalar<character>|scalar<numeric|integer>(1<=val<=41) // default: \"iso\" date style use. default short name \"iso\" corresponds ISO 8601 date formatting. 41 date styles total short names can viewed using info_date_style(). time_style Predefined style times scalar<character>|scalar<numeric|integer>(1<=val<=25) // default: \"iso\" time style use. default short name \"iso\" corresponds times formatted within ISO 8601 datetime values. 25 time styles total short names can viewed using info_time_style(). sep Separator date time components scalar<character> // default: \" \" separator string use date time components. default, single space character (\" \"). used specifying format code. format Date/time formatting string scalar<character> // default: NULL (optional) optional formatting string used generating custom dates/times. used arguments governing preset styles (date_style time_style) ignored favor formatting via format string. tz Time zone scalar<character> // default: NULL (optional) time zone printing dates/times (.e., output). default NULL preserve time zone input data output. providing time zone, must one recognized user's operating system (vector valid tz values can produced OlsonNames()). pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as datetime values — vec_fmt_datetime","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"formatting-with-the-date-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the date_style argument","title":"Format a vector as datetime values — vec_fmt_datetime","text":"can supply preset date style date_style argument separately handle date portion output. date styles numerous can handle localization supported locale. large segment date styles termed flexible date formats means output adapt locale provided. feature makes flexible date formats better option locales \"en\" (default locale). following table provides listing date styles output values (corresponding input date 2000-02-29). can call info_date_style() console view similar table date styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"formatting-with-the-time-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the time_style argument","title":"Format a vector as datetime values — vec_fmt_datetime","text":"can supply preset time style time_style argument separately handle time portion output. many time styles can handle localization supported locale. Many time styles termed flexible time formats means output adapt locale provided. feature makes flexible time formats better option locales \"en\" (default locale). following table provides listing time styles output values (corresponding input time 14:35:00). noted represent 12- 24-hour time. flexible formats (begin \"E\") include day week. Keep mind pairing time_style values date_style avoid redundant repeating information. can call info_time_style() console view similar table time styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"formatting-with-a-cldr-datetime-pattern","dir":"Reference","previous_headings":"","what":"Formatting with a CLDR datetime pattern","title":"Format a vector as datetime values — vec_fmt_datetime","text":"can use CLDR datetime pattern format argument create highly customized locale-aware output. character string consists two types elements: Pattern fields, repeat specific pattern character one times. fields replaced date time data formatting. character sets -Z -z reserved use pattern characters. Literal text, output verbatim formatting. can include: characters outside reserved character sets, including spaces punctuation. text single vertical quotes (e.g., 'text'). Two adjacent single vertical quotes (”), represent literal single quote, either inside outside quoted text. number pattern fields quite sizable first look CLDR datetime patterns work. use datetime string \"2018-07-04T22:05:09.2358(America/Vancouver)\" examples follow. \"mm/dd/y\" -> \"05/04/2018\" \"EEEE, MMMM d, y\" -> \"Wednesday, July 4, 2018\" \"MMM d E\" -> \"Jul 4 Wed\" \"HH:mm\" -> \"22:05\" \"h:mm \" -> \"10:05 PM\" \"EEEE, MMMM d, y '' h:mm \" -> \"Wednesday, July 4, 2018 10:05 PM\" individual pattern fields:","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"calendar-year","dir":"Reference","previous_headings":"","what":"Calendar Year","title":"Format a vector as datetime values — vec_fmt_datetime","text":"yields calendar year, always numeric. cases length \"y\" field specifies minimum number digits display, zero-padded necessary. digits displayed needed show full year. exception: \"yy\" gives use just two low-order digits year, zero-padded necessary. use cases, \"y\" \"yy\" good enough.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"year-in-the-week-in-year-calendar","dir":"Reference","previous_headings":"","what":"Year in the Week in Year Calendar","title":"Format a vector as datetime values — vec_fmt_datetime","text":"year 'Week Year' based calendars year transition occurs week boundary. may differ calendar year \"y\" near year transition. numeric year designation used conjunction pattern character \"w\" ISO year-week calendar defined ISO 8601.","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"quarter-of-the-year-formatting-and-standalone-versions","dir":"Reference","previous_headings":"","what":"Quarter of the Year: formatting and standalone versions","title":"Format a vector as datetime values — vec_fmt_datetime","text":"quarter names identified numerically, starting 1 ending 4. Quarter names may vary along two axes: width context. context either 'formatting' (taken default), form used within complete date format string, , 'standalone', form date elements used independently (calendar headers). standalone form may used date format shares form name. , formatting form quarters year consists run \"Q\" values whereas standalone form uses \"q\".","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"month-formatting-and-standalone-versions","dir":"Reference","previous_headings":"","what":"Month: formatting and standalone versions","title":"Format a vector as datetime values — vec_fmt_datetime","text":"month names identified numerically, starting 1 ending 12. Month names may vary along two axes: width context. context either 'formatting' (taken default), form used within complete date format string, , 'standalone', form date elements used independently (calendar headers). standalone form may used date format shares form name. , formatting form months consists run \"M\" values whereas standalone form uses \"L\".","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"week-of-year","dir":"Reference","previous_headings":"","what":"Week of Year","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Values calculated week year range 1 53. Week 1 year first week contains least specified minimum number days year. Weeks week 1 one year week 1 following year numbered sequentially 2 52 53 (needed). two available field lengths. display week year value \"ww\" width always show two digits (weeks 1 9 zero padded).","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"week-of-month","dir":"Reference","previous_headings":"","what":"Week of Month","title":"Format a vector as datetime values — vec_fmt_datetime","text":"week month can range 1 5. first day every month always begins week 1 every transition beginning week, week month value incremented 1.","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"day-of-month","dir":"Reference","previous_headings":"","what":"Day of Month","title":"Format a vector as datetime values — vec_fmt_datetime","text":"day month value always numeric two available field length choices formatting. display day month value \"dd\" formatting always show two digits (days 1 9 zero padded).","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"day-of-year","dir":"Reference","previous_headings":"","what":"Day of Year","title":"Format a vector as datetime values — vec_fmt_datetime","text":"day year value ranges 1 (January 1) either 365 366 (December 31), higher value range indicates year leap year (29 days February, instead 28). field length specifies minimum number digits, zero-padding necessary.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"day-of-week-in-month","dir":"Reference","previous_headings":"","what":"Day of Week in Month","title":"Format a vector as datetime values — vec_fmt_datetime","text":"day week month returns numerical value indicating number times given weekday occurred month (e.g., '2nd Monday March'). conveniently resolves predicable case structure ranges day month values return predictable day week month values: days 1 - 7 -> 1 days 8 - 14 -> 2 days 15 - 21 -> 3 days 22 - 28 -> 4 days 29 - 31 -> 5","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"modified-julian-date","dir":"Reference","previous_headings":"","what":"Modified Julian Date","title":"Format a vector as datetime values — vec_fmt_datetime","text":"modified version Julian date obtained subtracting 2,400,000.5 days Julian date (number days since January 1, 4713 BC). essentially results number days since midnight November 17, 1858. half day offset (unlike Julian date, modified Julian date referenced midnight instead noon).","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"day-of-week-name","dir":"Reference","previous_headings":"","what":"Day of Week Name","title":"Format a vector as datetime values — vec_fmt_datetime","text":"name day week offered four different widths.","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"am-pm-period-of-day","dir":"Reference","previous_headings":"","what":"AM/PM Period of Day","title":"Format a vector as datetime values — vec_fmt_datetime","text":"denotes noon noon time periods. May upper lowercase depending locale options. wide form may short form 'real' long form (e.g. 'ante meridiem') customarily used. narrow form must unique, unlike fields.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"am-pm-period-of-day-plus-noon-and-midnight","dir":"Reference","previous_headings":"","what":"AM/PM Period of Day Plus Noon and Midnight","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Provide PM well phrases exactly noon midnight. May upper lowercase depending locale options. locale notion unique 'noon' (.e., 12:00), PM form may substituted. similar behavior can occur 'midnight' (00:00) form. narrow form must unique, unlike fields. () input_midnight: \"2020-05-05T00:00:00\" (b) input_noon: \"2020-05-05T12:00:00\"","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"flexible-day-periods","dir":"Reference","previous_headings":"","what":"Flexible Day Periods","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Flexible day periods denotes things like 'afternoon', 'evening', etc., flexibility comes locale's language script. locale associated rule set specifies day periods start end locale. () input_morning: \"2020-05-05T00:08:30\" (b) input_afternoon: \"2020-05-05T14:00:00\"","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"hour-","dir":"Reference","previous_headings":"","what":"Hour 0-23","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Hours 0 23 standard 24-hour clock cycle (midnight plus 1 minute 00:01) using \"HH\" (common width indicates zero-padding 2 digits). Using \"2015-08-01T08:35:09\":","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"hour--1","dir":"Reference","previous_headings":"","what":"Hour 1-12","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Hours 1 12 standard 12-hour clock cycle (midnight plus 1 minute 12:01) using \"hh\" (common width indicates zero-padding 2 digits). Using \"2015-08-01T08:35:09\":","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"hour--2","dir":"Reference","previous_headings":"","what":"Hour 1-24","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Using hours 1 24 less common way express 24-hour clock cycle (midnight plus 1 minute 24:01) using \"kk\" (common width indicates zero-padding 2 digits). Using \"2015-08-01T08:35:09\":","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"hour--3","dir":"Reference","previous_headings":"","what":"Hour 0-11","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Using hours 0 11 less common way express 12-hour clock cycle (midnight plus 1 minute 00:01) using \"KK\" (common width indicates zero-padding 2 digits). Using \"2015-08-01T08:35:09\":","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"minute","dir":"Reference","previous_headings":"","what":"Minute","title":"Format a vector as datetime values — vec_fmt_datetime","text":"minute hour can number 0 59. Use \"m\" show minimum number digits, \"mm\" always show two digits (zero-padding, necessary).","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"seconds","dir":"Reference","previous_headings":"","what":"Seconds","title":"Format a vector as datetime values — vec_fmt_datetime","text":"second minute can number 0 59. Use \"s\" show minimum number digits, \"ss\" always show two digits (zero-padding, necessary).","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"fractional-second","dir":"Reference","previous_headings":"","what":"Fractional Second","title":"Format a vector as datetime values — vec_fmt_datetime","text":"fractional second truncates (like time fields) width requested (.e., count letters). using pattern \"SSSS\" display four digits past decimal (, incidentally, needs added manually pattern).","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"milliseconds-elapsed-in-day","dir":"Reference","previous_headings":"","what":"Milliseconds Elapsed in Day","title":"Format a vector as datetime values — vec_fmt_datetime","text":"86,400,000 milliseconds day \"\" pattern provide whole number. width can go nine digits \"AAAAAAAAA\" higher field widths result zero padding necessary. Using \"2011-07-27T00:07:19.7223\":","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"the-era-designator","dir":"Reference","previous_headings":"","what":"The Era Designator","title":"Format a vector as datetime values — vec_fmt_datetime","text":"provides era name given date. Gregorian calendar two eras: AD BC. AD year numbering system, AD 1 immediately preceded 1 BC, nothing (year zero).","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"tz-short-and-long-specific-non-location-format","dir":"Reference","previous_headings":"","what":"TZ // Short and Long Specific non-Location Format","title":"Format a vector as datetime values — vec_fmt_datetime","text":"short long specific non-location formats time zones suggested displaying time user friendly time zone name. short specific format unavailable, fall back short localized GMT format (\"O\"). long specific format unavailable, fall back long localized GMT format (\"OOOO\").","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"tz-common-utc-offset-formats","dir":"Reference","previous_headings":"","what":"TZ // Common UTC Offset Formats","title":"Format a vector as datetime values — vec_fmt_datetime","text":"ISO8601 basic format hours, minutes optional seconds fields represented \"Z\", \"ZZ\", \"ZZZ\". format equivalent RFC 822 zone format (optional seconds field absent). equivalent \"xxxx\" specifier. field pattern \"ZZZZ\" represents long localized GMT format. equivalent \"OOOO\" specifier. Finally, \"ZZZZZ\" pattern yields ISO8601 extended format hours, minutes optional seconds fields. ISO8601 UTC indicator Z used local time offset 0. equivalent \"XXXXX\" specifier.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"tz-short-and-long-localized-gmt-formats","dir":"Reference","previous_headings":"","what":"TZ // Short and Long Localized GMT Formats","title":"Format a vector as datetime values — vec_fmt_datetime","text":"localized GMT formats come two widths \"O\" (removes minutes field 0) \"OOOO\" (always contains minutes field). use GMT indicator changes according locale.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"tz-short-and-long-generic-non-location-formats","dir":"Reference","previous_headings":"","what":"TZ // Short and Long Generic non-Location Formats","title":"Format a vector as datetime values — vec_fmt_datetime","text":"generic non-location formats useful displaying recurring wall time (e.g., events, meetings) anywhere people want overly specific. either unavailable, fallback generic location format (\"VVVV\"), short localized GMT format final fallback.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"tz-short-time-zone-ids-and-exemplar-city-formats","dir":"Reference","previous_headings":"","what":"TZ // Short Time Zone IDs and Exemplar City Formats","title":"Format a vector as datetime values — vec_fmt_datetime","text":"formats provide variations time zone ID often include exemplar city. widest formats, \"VVVV\", useful populating choice list time zones, supports 1--1 name/zone ID mapping uniform text formats.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"tz-iso-formats-with-z-for-","dir":"Reference","previous_headings":"","what":"TZ // ISO 8601 Formats with Z for +0000","title":"Format a vector as datetime values — vec_fmt_datetime","text":"\"X\"-\"XXX\" field patterns represent valid ISO 8601 patterns time zone offsets datetimes. final two widths, \"XXXX\" \"XXXXX\" allow optional seconds fields. seconds field supported ISO 8601 specification. , ISO 8601 UTC indicator Z used local time offset 0.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"tz-iso-formats-no-use-of-z-for-","dir":"Reference","previous_headings":"","what":"TZ // ISO 8601 Formats (no use of Z for +0000)","title":"Format a vector as datetime values — vec_fmt_datetime","text":"\"x\"-\"xxxxx\" field patterns represent valid ISO 8601 patterns time zone offsets datetimes. similar \"X\"-\"XXXXX\" field patterns except ISO 8601 UTC indicator Z used local time offset 0.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"formatting-with-a-strptime-format-code","dir":"Reference","previous_headings":"","what":"Formatting with a strptime format code","title":"Format a vector as datetime values — vec_fmt_datetime","text":"Performing custom date/time formatting format argument can also occur strptime format code. works constructing string individual format codes representing formatted date time elements. indicated leading %, literal characters interpreted characters starting % character. First , look format code combinations work well together strptime format. give us intuition generally work. use datetime \"2015-06-08 23:05:37.48\" examples follow. \"%m/%d/%Y\" -> \"06/08/2015\" \"%, %B %e, %Y\" -> \"Monday, June 8, 2015\" \"%b %e %\" -> \"Jun 8 Mon\" \"%H:%M\" -> \"23:05\" \"%:%M %p\" -> \"11:05 pm\" \"%, %B %e, %Y %:%M %p\" -> \"Monday, June 8, 2015 11:05 pm\" individual format codes date components: \"%\" -> \"Mon\" (abbreviated day week name) \"%\" -> \"Monday\" (full day week name) \"%w\" -> \"1\" (day week number 0..6; Sunday 0) \"%u\" -> \"1\" (day week number 1..7; Monday 1, Sunday 7) \"%y\" -> \"15\" (abbreviated year, using final two digits) \"%Y\" -> \"2015\" (full year) \"%b\" -> \"Jun\" (abbreviated month name) \"%B\" -> \"June\" (full month name) \"%m\" -> \"06\" (month number) \"%d\" -> \"08\" (day number, zero-padded) \"%e\" -> \"8\" (day number without zero padding) \"%j\" -> \"159\" (day year, always zero-padded) \"%W\" -> \"23\" (week number year, always zero-padded) \"%V\" -> \"24\" (week number year, following ISO 8601 standard) \"%C\" -> \"20\" (century number) individual format codes time components: \"%H\" -> \"23\" (24h hour) \"%\" -> \"11\" (12h hour) \"%M\" -> \"05\" (minute) \"%S\" -> \"37\" (second) \"%OS3\" -> \"37.480\" (seconds decimals; 3 decimal places ) %p -> \"pm\" (PM indicator) extra formats may find useful: \"%z\" -> \"+0000\" (signed time zone offset, using UTC) \"%F\" -> \"2015-06-08\" (date ISO 8601 date format) \"%%\" -> \"%\" (literal \"%\" character, case need )","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as datetime values — vec_fmt_datetime","text":"create character vector datetime values ISO-8601 format next examples:   Using vec_fmt_datetime() different date_style time_style options (, date_style = \"yMMMEd\" time_style = \"Hm\") result character vector formatted datetime values. NA values remain NA values. rendering context autodetected unless specified output argument (, \"plain\" output type).     can choose 41 different date styles 25 time formatting styles. Many styles flexible, meaning structure format adapt different locales. use combination \"yMMMd\" \"hms\" date time styles demonstrate (first default locale \"en\"):     perform type formatting Italian (\"\") locale:     can always use info_date_style() info_time_style() call info tables serve handy references date_style time_style options. possible supply time formatting pattern within format argument. One way CLDR pattern, locale-aware:     using locale argument, can formatted Dutch datetime values:     also possible use strptime format code format (however, value provided locale ignored).     last example, one can wrap datetime values pattern pattern argument. Note NA values pattern applied.","code":"str_vals <- c(\"2022-06-13 18:36\", \"2019-01-25 01:08\", NA) vec_fmt_datetime(   str_vals,   date_style = \"yMMMEd\",   time_style = \"Hm\" ) #> [1] \"Mon, Jun 13, 2022 18:36\" \"Fri, Jan 25, 2019 01:08\" NA vec_fmt_datetime(   str_vals,   date_style = \"yMMMd\",   time_style = \"hms\" ) #> [1] \"Jun 13, 2022 6:36:00 PM\" \"Jan 25, 2019 1:08:00 AM\" NA vec_fmt_datetime(   str_vals,   date_style = \"yMMMd\",   time_style = \"hms\",   locale = \"it\" ) #> [1] \"13 giu 2022 6:36:00 PM\" \"25 gen 2019 1:08:00 AM\" NA vec_fmt_datetime(str_vals, format = \"EEEE, MMMM d, y, h:mm a\") #> [1] \"Monday, June 13, 2022, 06:36 PM\" #> [2] \"Friday, January 25, 2019, 01:08 AM\" #> [3] NA vec_fmt_datetime(   str_vals,   format = \"EEEE, MMMM d, y, h:mm a\",   locale = \"nl\" ) #> [1] \"maandag, juni 13, 2022, 6:36 p.m.\" #> [2] \"vrijdag, januari 25, 2019, 1:08 a.m.\" #> [3] NA vec_fmt_datetime(str_vals, format = \"%A, %B %e, %Y at %I:%M %p\") #> [1] \"Monday, June 13, 2022 at 06:36 pm\" #> [2] \"Friday, January 25, 2019 at 01:08 am\" #> [3] NA vec_fmt_datetime(   str_vals,   sep = \" at \",   pattern = \"Date and Time: {x}\" ) #> [1] \"Date and Time: 2022-06-13 at 18:36:00\" #> [2] \"Date and Time: 2019-01-25 at 01:08:00\" #> [3] NA"},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as datetime values — vec_fmt_datetime","text":"15-15","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_datetime.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as datetime values — vec_fmt_datetime","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"Format input values time duration values whether input values numbers difftime class. can specify time units numeric input values (weeks, days, hours, minutes, seconds) output can customized duration style (corresponding narrow, wide, colon-separated, ISO forms) choice output units ranging weeks seconds.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"","code":"vec_fmt_duration(   x,   input_units = NULL,   output_units = NULL,   duration_style = c(\"narrow\", \"wide\", \"colon-sep\", \"iso\"),   trim_zero_units = TRUE,   max_output_units = NULL,   pattern = \"{x}\",   use_seps = TRUE,   sep_mark = \",\",   force_sign = FALSE,   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. input_units Declaration duration units numerical values scalar<character> // default: NULL (optional) one selected columns contains numeric values (difftime values, contain duration units), keyword must provided input_units gt determine values interpreted terms duration. accepted units : \"seconds\", \"minutes\", \"hours\", \"days\", \"weeks\". output_units Choice output units mult-kw:[weeks|days|hours|minutes|seconds] // default: NULL (optional) Controls output time units. default, NULL, means gt automatically choose time units based input duration value. control time units considered output (trimming trim_zero_units) can specify vector one following keywords: \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\". duration_style Style representing duration values singl-kw:[narrow|wide|colon-sep|iso] // default: \"narrow\" choice four formatting styles output duration values. \"narrow\" (default style), duration values formatted single letter time-part units (e.g., 1.35 days styled \"1d 8h 24m\"). \"wide\", example value expanded \"1 day 8 hours 24 minutes\" formatting. \"colon-sep\" style put days, hours, minutes, seconds \"([D]/)[HH]:[MM]:[SS]\" format. \"iso\" style produce value conforms ISO 8601 rules duration values (e.g., 1.35 days become \"P1DT8H24M\"). trim_zero_units Trimming zero values scalar<logical>|mult-kw:[leading|trailing|internal] // default: TRUE Provides methods remove output time units zero values. default TRUE duration values might otherwise formatted \"0w 1d 0h 4m 19s\" trim_zero_units = FALSE instead displayed \"1d 4m 19s\". Aside using TRUE/FALSE provide vector keywords precise control. keywords : (1) \"leading\", omit leading zero-value time units (e.g., \"0w 1d\" -> \"1d\"), (2) \"trailing\", omit trailing zero-value time units (e.g., \"3d 5h 0s\" -> \"3d 5h\"), \"internal\", removes internal zero-value time units (e.g., \"5d 0h 33m\" -> \"5d 33m\"). max_output_units Maximum number time units display scalar<numeric|integer>(val>=1) // default: NULL (optional) output_units NULL, output time units unspecified left gt handle, numeric value provided max_output_units taken maximum number time units display output time duration values. default, NULL possible time units displayed. option effect duration_style = \"colon-sep\" (output_units can used customize type duration output). pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). force_sign Forcing display positive sign scalar<logical> // default: FALSE positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default negative values display minus sign. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":"output-units-for-the-colon-separated-duration-style","dir":"Reference","previous_headings":"","what":"Output units for the colon-separated duration style","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"colon-separated duration style (enabled duration_style = \"colon-sep\") essentially clock-based output format uses display logic chronograph watch functionality. , default, display duration values (D/)HH:MM:SS format. duration values greater equal 24 hours number days prepended adjoining slash mark. output format versatile, can changed somewhat output_units option. following combinations output units permitted: c(\"minutes\", \"seconds\") -> MM:SS c(\"hours\", \"minutes\") -> HH:MM c(\"hours\", \"minutes\", \"seconds\") -> HH:MM:SS c(\"days\", \"hours\", \"minutes\") -> (D/)HH:MM specialized combinations result default set used, c(\"days\", \"hours\", \"minutes\", \"seconds\")","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"create difftime-based vector next examples:   Using vec_fmt_duration() defaults provides us succinct vector formatted durations.     can elect use just time units days describe duration values.     can also use numeric values input vector vec_fmt_duration(). numeric vector use examples:   necessary thing numeric values input defining time unit values .     can define set output time units want see.     many duration 'styles' choose . opt \"wide\" style.     can always perform locale-specific formatting vec_fmt_duration(). attempt type duration formatting \"nl\" locale.","code":"difftimes <-   difftime(     lubridate::ymd(\"2017-01-15\"),     lubridate::ymd(c(\"2015-06-25\", \"2016-03-07\", \"2017-01-10\"))   ) vec_fmt_duration(difftimes) #> [1] \"81w 3d\" \"44w 6d\" \"5d\" vec_fmt_duration(difftimes, output_units = \"days\") #> [1] \"570d\" \"314d\" \"5d\" num_vals <- c(3.235, 0.23, 0.005, NA) vec_fmt_duration(num_vals, input_units = \"days\") #> [1] \"3d 5h 38m 24s\" \"5h 31m 12s\" \"7m 12s\" \"NA\" vec_fmt_duration(   num_vals,   input_units = \"days\",   output_units = c(\"hours\", \"minutes\") ) #> [1] \"77h 38m\" \"5h 31m\" \"7m\" \"NA\" vec_fmt_duration(   num_vals,   input_units = \"days\",   duration_style = \"wide\" ) #> [1] \"3 days 5 hours 38 minutes 24 seconds\" #> [2] \"5 hours 31 minutes 12 seconds\" #> [3] \"7 minutes 12 seconds\" #> [4] \"NA\" vec_fmt_duration(   num_vals,   input_units = \"days\",   duration_style = \"wide\",   locale = \"nl\" ) #> [1] \"3 dagen 5 uur 38 minuten 24 seconden\" #> [2] \"5 uur 31 minuten 12 seconden\" #> [3] \"7 minuten 12 seconden\" #> [4] \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"15-16","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_duration.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector of numeric or duration values as styled time duration strings — vec_fmt_duration","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_engineering.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as values in engineering notation — vec_fmt_engineering","title":"Format a vector as values in engineering notation — vec_fmt_engineering","text":"numeric values vector, can perform formatting targeted values rendered engineering notation, numbers written form mantissa (m) exponent (n). combined construction either form m x 10^n mEn. mantissa number 1 1000 exponent multiple 3. example, number 0.0000345 can written engineering notation 34.50 x 10^-6. notation helps simplify calculations make easier compare numbers different scales. fine control formatting task, following options: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol scaling: can choose scale targeted values multiplier value pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_engineering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as values in engineering notation — vec_fmt_engineering","text":"","code":"vec_fmt_engineering(   x,   decimals = 2,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   scale_by = 1,   exp_style = \"x10n\",   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign_m = FALSE,   force_sign_n = FALSE,   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_engineering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as values in engineering notation — vec_fmt_engineering","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". drop_trailing_zeros Drop trailing zeros scalar<logical> // default: FALSE logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark Drop trailing decimal mark scalar<logical> // default: TRUE logical value determines whether decimal marks always appear even decimal digits display formatting (e.g., 23 becomes 23. FALSE). default trailing decimal marks shown. scale_by Scale values fixed multiplier scalar<numeric|integer> // default: 1 numeric values multiplied scale_by value undergoing formatting. Since default value 1, values changed unless different multiplier value supplied. exp_style Style declaration exponent formatting scalar<character> // default: \"x10n\" Style formatting use scientific notation formatting. default \"x10n\" options include using single letter (e.g., \"e\", \"E\", etc.), letter followed \"1\" signal minimum digit width one, \"low-ten\" using stylized \"10\" marker. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). dec_mark Decimal mark scalar<character> // default: \".\" string used decimal mark. example, using dec_mark = \",\" value 0.152 result formatted value \"0,152\"). argument ignored locale supplied (.e., NULL). force_sign_m, force_sign_n Forcing display positive sign scalar<logical> // default: FALSE plus sign shown positive values mantissa (first component, force_sign_m) exponent (force_sign_n)? effectively show sign values except zero either numeric components notation. , use TRUE either one options. default FALSE, negative numbers display sign. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_engineering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as values in engineering notation — vec_fmt_engineering","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_engineering.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as values in engineering notation — vec_fmt_engineering","text":"create numeric vector next examples:   Using vec_fmt_engineering() default options create character vector values engineering notation. NA values remain NA values. rendering context autodetected unless specified output argument (, \"plain\" output type).     can change number decimal places decimals option:     formatting different locale, supply locale ID gt handle locale-specific formatting options:     need positive negative signs mantissa component given value, use force_sign_m = TRUE:     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(3.24e-4, 8.65, 1362902.2, -59027.3, NA) vec_fmt_engineering(num_vals) #> [1] \"324.00 x 10^-6\" \"8.65\" \"1.36 x 10^6\" \"-59.03 x 10^3\" \"NA\" vec_fmt_engineering(num_vals, decimals = 1) #> [1] \"324.0 x 10^-6\" \"8.7\" \"1.4 x 10^6\" \"-59.0 x 10^3\" \"NA\" vec_fmt_engineering(num_vals, locale = \"da\") #> [1] \"324,00 x 10^-6\" \"8,65\" \"1,36 x 10^6\" \"-59,03 x 10^3\" \"NA\" vec_fmt_engineering(num_vals, force_sign_m = TRUE) #> [1] \"+324.00 x 10^-6\" \"+8.65\" \"+1.36 x 10^6\" \"-59.03 x 10^3\" \"NA\" vec_fmt_engineering(num_vals, pattern = \"/{x}/\") #> [1] \"/324.00 x 10^-6/\" \"/8.65/\" \"/1.36 x 10^6/\" \"/-59.03 x 10^3/\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_engineering.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as values in engineering notation — vec_fmt_engineering","text":"15-4","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_engineering.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as values in engineering notation — vec_fmt_engineering","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_fraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as mixed fractions — vec_fmt_fraction","title":"Format a vector as mixed fractions — vec_fmt_fraction","text":"numeric values vector, can perform mixed-fraction-based formatting. several options setting accuracy fractions. Furthermore, option choosing layout (.e., typesetting style) mixed-fraction output. following options available controlling type formatting: accuracy: express fractional part mixed fractions; three keyword options allowance arbitrary denominator settings simplification: option simplify fractions whenever possible layout: can choose output values diagonal inline fractions digit grouping separators: options enable/disable digit separators provide choice separator symbol whole number portion pattern: option use text pattern decoration formatted mixed fractions locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_fraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as mixed fractions — vec_fmt_fraction","text":"","code":"vec_fmt_fraction(   x,   accuracy = NULL,   simplify = TRUE,   layout = c(\"inline\", \"diagonal\"),   use_seps = TRUE,   pattern = \"{x}\",   sep_mark = \",\",   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_fraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as mixed fractions — vec_fmt_fraction","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. accuracy Accuracy fractions singl-kw:[low|med|high]|scalar<numeric|integer>(val>=1) // default: \"low\" type fractions generate. can either one keywords \"low\", \"med\", \"high\" (generate fractions denominators 1, 2, 3 digits, respectively) integer value greater zero obtain fractions fixed denominator (2 yields halves, 3 thirds, 4 quarters, etc.). latter option, using simplify = TRUE simplify fractions possible (e.g., 2/4 simplified 1/2). default, \"low\" option used. simplify Simplify fraction scalar<logical> // default: TRUE choosing provide numeric value accuracy, option simplify fraction (possible) can taken TRUE (default). FALSE, denominators fractions fixed value provided accuracy. layout Layout fractions HTML output singl-kw:[inline|diagonal] // default: \"inline\" HTML output, \"inline\" layout default. layout places numerals fraction baseline uses standard slash character. \"diagonal\" layout generate fractions typeset raised/lowered numerals virgule. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_fraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as mixed fractions — vec_fmt_fraction","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_fraction.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as mixed fractions — vec_fmt_fraction","text":"create numeric vector next examples:   Using vec_fmt_fraction() create character vector fractions. NA values render \"NA\". rendering context autodetected unless specified output argument (, \"plain\" output type).     many options formatting fractions. like higher degree accuracy computation fractions can supply \"med\" \"high\" keywords accuracy argument:     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(0.0052, 0.08, 0, -0.535, NA) vec_fmt_fraction(num_vals) #> [1] \"0\" \"1/9\" \"0\" \"-5/9\" \"NA\" vec_fmt_fraction(num_vals, accuracy = \"high\") #> [1] \"1/200\" \"2/25\" \"0\" \"-107/200\" \"NA\" vec_fmt_fraction(num_vals, accuracy = 8, pattern = \"[{x}]\") #> [1] \"[0]\" \"[1/8]\" \"[0]\" \"[-1/2]\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_fraction.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as mixed fractions — vec_fmt_fraction","text":"15-7","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_fraction.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as mixed fractions — vec_fmt_fraction","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as indexed characters — vec_fmt_index","title":"Format a vector as indexed characters — vec_fmt_index","text":"numeric values vector, can transform index values, usually based letters. characters can derived specified locale intended ordering (often leaving characters diacritical marks).","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as indexed characters — vec_fmt_index","text":"","code":"vec_fmt_index(   x,   case = c(\"upper\", \"lower\"),   index_algo = c(\"repeat\", \"excel\"),   pattern = \"{x}\",   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as indexed characters — vec_fmt_index","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. case Use uppercase lowercase letters singl-kw:[upper|lower] // default: \"upper\" resulting index characters rendered uppercase (\"upper\") lowercase (\"lower\") letters? default, set \"upper\". index_algo Indexing algorithm singl-kw:[repeat|excel] // default: \"repeat\" indexing algorithm handles recycling index character set. default, \"repeat\" option used characters doubled, tripled, , moving past character set limit. alternative \"excel\" option, Excel-based column naming adapted used (e.g., [..., Y, Z, AA, AB, ...]). pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as indexed characters — vec_fmt_index","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_index.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as indexed characters — vec_fmt_index","text":"create numeric vector next examples:   Using vec_fmt_index() default options create character vector values rendered index numerals. Zero values rendered \"\" (.e., empty strings), NA values remain NA values, negative values automatically made positive. rendering context autodetected unless specified output argument (, \"plain\" output type).     can also use vec_fmt_index() case = \"lower\" option create character vector values rendered lowercase Roman numerals.     formatting different locale, supply locale ID let gt obtain locale-specific set index values:     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(1, 4, 5, 8, 12, 20, 26, 34, 0, -5, 1.3, NA) vec_fmt_index(num_vals) #> [1] \"A\" \"D\" \"E\" \"H\" \"L\" \"T\" \"Z\" \"HH\" \"\" \"E\" \"A\" \"NA\" vec_fmt_index(num_vals, case = \"lower\") #> [1] \"a\" \"d\" \"e\" \"h\" \"l\" \"t\" \"z\" \"hh\" \"\" \"e\" \"a\" \"NA\" vec_fmt_index(1:10, locale = \"so\") #> [1] \"B\" \"C\" \"D\" \"F\" \"G\" \"H\" \"J\" \"K\" \"L\" \"M\" vec_fmt_index(num_vals, case = \"lower\", pattern = \"{x}.\") #> [1] \"a.\" \"d.\" \"e.\" \"h.\" \"l.\" \"t.\" \"z.\" \"hh.\" \".\" \"e.\" \"a.\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_index.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as indexed characters — vec_fmt_index","text":"15-10","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_index.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as indexed characters — vec_fmt_index","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as integer values — vec_fmt_integer","title":"Format a vector as integer values — vec_fmt_integer","text":"numeric values vector, can perform number-based formatting input values always rendered integer values within character vector. following major options available: digit grouping separators: options enable/disable digit separators provide choice separator symbol scaling: can choose scale targeted values multiplier value large-number suffixing: larger figures (thousands, millions, etc.) can autoscaled decorated appropriate suffixes pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as integer values — vec_fmt_integer","text":"","code":"vec_fmt_integer(   x,   use_seps = TRUE,   accounting = FALSE,   scale_by = 1,   suffixing = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   force_sign = FALSE,   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as integer values — vec_fmt_integer","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting Use accounting style scalar<logical> // default: FALSE option use accounting style values. Normally, negative values shown minus sign using accounting style instead put negative values parentheses. scale_by Scale values fixed multiplier scalar<numeric|integer> // default: 1 numeric values multiplied scale_by value undergoing formatting. Since default value 1, values changed unless different multiplier value supplied. value ignored using suffixing options (.e., suffixing set FALSE). suffixing Specification large-number suffixing scalar<logical>|vector<character> // default: FALSE suffixing option allows us scale apply suffixes larger numbers (e.g., 1924000 can transformed 2M). option can accept logical value, FALSE (default) perform transformation TRUE apply thousands (K), millions (M), billions (B), trillions (T) suffixes automatic value scaling. can alternatively provide character vector serves specification symbols used value ranges. preferred symbols replace defaults (e.g., c(\"k\", \"Ml\", \"Bn\", \"Tr\") replaces \"K\", \"M\", \"B\", \"T\"). Including NA values vector ensure particular range either included transformation (e.g., c(NA, \"M\", \"B\", \"T\") modify numbers thousands range) range inherit previous suffix (e.g., c(\"K\", \"M\", NA, \"T\"), numbers range millions billions terms millions). use suffixing (set expressly FALSE) means value provided scale_by ignored. using system = \"ind\" default suffix set provided suffixing = TRUE equivalent c(NA, \"L\", \"Cr\"). apply suffixes thousands range, express values lakhs crores. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). force_sign Forcing display positive sign scalar<logical> // default: FALSE positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as integer values — vec_fmt_integer","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_integer.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as integer values — vec_fmt_integer","text":"create numeric vector next examples:   Using vec_fmt_integer() default options create character vector input values undergo rounding become integers NA values render \"NA\". Also, rendering context autodetected unless specified output argument (, \"plain\" output type).     can change digit separator mark period sep_mark option:     Many options abound formatting values. need positive negative signs front every value, use force_sign = TRUE:     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(5.2, 8.65, 13602, -5.3, NA) vec_fmt_integer(num_vals) #> [1] \"5\" \"9\" \"13,602\" \"-5\" \"NA\" vec_fmt_integer(num_vals, sep_mark = \".\") #> [1] \"5\" \"9\" \"13.602\" \"-5\" \"NA\" vec_fmt_integer(num_vals, force_sign = TRUE) #> [1] \"+5\" \"+9\" \"+13,602\" \"-5\" \"NA\" vec_fmt_integer(num_vals, pattern = \"`{x}`\") #> [1] \"`5`\" \"`9`\" \"`13,602`\" \"`-5`\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_integer.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as integer values — vec_fmt_integer","text":"15-2","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_integer.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as integer values — vec_fmt_integer","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_markdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector containing Markdown text — vec_fmt_markdown","title":"Format a vector containing Markdown text — vec_fmt_markdown","text":"Markdown-formatted text input vector transformed appropriate output type.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_markdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector containing Markdown text — vec_fmt_markdown","text":"","code":"vec_fmt_markdown(   x,   md_engine = c(\"markdown\", \"commonmark\"),   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_markdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector containing Markdown text — vec_fmt_markdown","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. md_engine Choice Markdown engine singl-kw:[markdown|commonmark] // default: \"markdown\" engine preference Markdown rendering. default, set \"markdown\" gt use markdown package Markdown conversion HTML LaTeX. option \"commonmark\" commonmark package used. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_markdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector containing Markdown text — vec_fmt_markdown","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_markdown.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector containing Markdown text — vec_fmt_markdown","text":"Create vector Markdown-based text snippets.   vec_fmt_markdown() can easily convert different output types, like HTML   LaTeX","code":"text_vec <-   c(     \"This **is** *Markdown*.\",     \"Info on Markdown syntax can be found [here](https://daringfireball.net/projects/markdown/).\",     \"The **gt** package has these datasets: - `countrypops` - `sza` - `gtcars` - `sp500` - `pizzaplace` - `exibble`\"   ) vec_fmt_markdown(text_vec, output = \"html\") #> [1] \"This <strong>is<\/strong> <em>Markdown<\/em>.<\/span>\" #> [2] \"Info on Markdown syntax can be found\\n<a href=\\\"https://daringfireball.net/projects/markdown/\\\">here<\/a>.<\/span>\" #> [3] \"The <strong>gt<\/strong> package has these datasets:<\/p>\\n<ul>\\n<li><code>countrypops<\/code><\/li>\\n<li><code>sza<\/code><\/li>\\n<li><code>gtcars<\/code><\/li>\\n<li><code>sp500<\/code><\/li>\\n<li><code>pizzaplace<\/code><\/li>\\n<li><code>exibble<\/code><\/li>\\n<\/ul>\" vec_fmt_markdown(text_vec, output = \"latex\") #> [1] \"This \\\\textbf{is} \\\\emph{Markdown}.\" #> [2] \"Info on Markdown syntax can be found\\n\\\\href{https://daringfireball.net/projects/markdown/}{here}.\" #> [3] \"The \\\\textbf{gt} package has these datasets:\\n\\n\\\\begin{itemize}\\n\\\\item \\\\texttt{countrypops}\\n\\n\\\\item \\\\texttt{sza}\\n\\n\\\\item \\\\texttt{gtcars}\\n\\n\\\\item \\\\texttt{sp500}\\n\\n\\\\item \\\\texttt{pizzaplace}\\n\\n\\\\item \\\\texttt{exibble}\\n\\n\\\\end{itemize}\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_markdown.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector containing Markdown text — vec_fmt_markdown","text":"15-17","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_markdown.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector containing Markdown text — vec_fmt_markdown","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as numeric values — vec_fmt_number","title":"Format a vector as numeric values — vec_fmt_number","text":"numeric values vector, can perform number-based formatting values rendered character vector level precision. following major options available: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol scaling: can choose scale targeted values multiplier value large-number suffixing: larger figures (thousands, millions, etc.) can autoscaled decorated appropriate suffixes pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as numeric values — vec_fmt_number","text":"","code":"vec_fmt_number(   x,   decimals = 2,   n_sigfig = NULL,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   use_seps = TRUE,   accounting = FALSE,   scale_by = 1,   suffixing = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as numeric values — vec_fmt_number","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". n_sigfig Number significant figures scalar<numeric|integer>(val>=1) // default: NULL (optional) option format numbers n significant figures. default, NULL thus number values formatted according number decimal places set via decimals. opting format according rules significant figures, n_sigfig must number greater equal 1. values passed decimals drop_trailing_zeros arguments ignored. drop_trailing_zeros Drop trailing zeros scalar<logical> // default: FALSE logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark Drop trailing decimal mark scalar<logical> // default: TRUE logical value determines whether decimal marks always appear even decimal digits display formatting (e.g., 23 becomes 23. FALSE). default trailing decimal marks shown. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting Use accounting style scalar<logical> // default: FALSE option use accounting style values. Normally, negative values shown minus sign using accounting style instead put negative values parentheses. scale_by Scale values fixed multiplier scalar<numeric|integer> // default: 1 numeric values multiplied scale_by value undergoing formatting. Since default value 1, values changed unless different multiplier value supplied. value ignored using suffixing options (.e., suffixing set FALSE). suffixing Specification large-number suffixing scalar<logical>|vector<character> // default: FALSE suffixing option allows us scale apply suffixes larger numbers (e.g., 1924000 can transformed 1.92M). option can accept logical value, FALSE (default) perform transformation TRUE apply thousands (\"K\"), millions (\"M\"), billions (\"B\"), trillions (\"T\") suffixes automatic value scaling. can alternatively provide character vector serves specification symbols used value ranges. preferred symbols replace defaults (e.g., c(\"k\", \"Ml\", \"Bn\", \"Tr\") replaces \"K\", \"M\", \"B\", \"T\"). Including NA values vector ensure particular range either included transformation (e.g., c(NA, \"M\", \"B\", \"T\") modify numbers thousands range) range inherit previous suffix (e.g., c(\"K\", \"M\", NA, \"T\"), numbers range millions billions terms millions). use suffixing (set expressly FALSE) means value provided scale_by ignored. using system = \"ind\" default suffix set provided suffixing = TRUE equivalent c(NA, \"L\", \"Cr\"). apply suffixes thousands range, express values lakhs crores. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). dec_mark Decimal mark scalar<character> // default: \".\" string used decimal mark. example, using dec_mark = \",\" value 0.152 result formatted value \"0,152\"). argument ignored locale supplied (.e., NULL). force_sign Forcing display positive sign scalar<logical> // default: FALSE positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as numeric values — vec_fmt_number","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_number.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as numeric values — vec_fmt_number","text":"create numeric vector next examples:   Using vec_fmt_number() default options create character vector numeric values two decimal places NA values render \"NA\". Also, rendering context autodetected unless specified output argument (, \"plain\" output type).     can change decimal mark comma, sure change digit separator mark default comma something else (period works ):     formatting different locale, supply locale ID let gt handle locale-specific formatting options:     many options formatting values. Perhaps need explicit positive negative signs? Use force_sign = TRUE .     trailing zeros past decimal mark can stripped using drop_trailing_zeros option.     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(5.2, 8.65, 0, -5.3, NA) vec_fmt_number(num_vals) #> [1] \"5.20\" \"8.65\" \"0.00\" \"-5.30\" \"NA\" vec_fmt_number(num_vals, sep_mark = \".\", dec_mark = \",\") #> [1] \"5,20\" \"8,65\" \"0,00\" \"-5,30\" \"NA\" vec_fmt_number(num_vals, locale = \"fr\") #> [1] \"5,20\" \"8,65\" \"0,00\" \"-5,30\" \"NA\" vec_fmt_number(num_vals, force_sign = TRUE) #> [1] \"+5.20\" \"+8.65\" \"0.00\" \"-5.30\" \"NA\" vec_fmt_number(num_vals, drop_trailing_zeros = TRUE) #> [1] \"5.2\" \"8.65\" \"0\" \"-5.3\" \"NA\" vec_fmt_number(num_vals, pattern = \"`{x}`\") #> [1] \"`5.20`\" \"`8.65`\" \"`0.00`\" \"`-5.30`\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_number.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as numeric values — vec_fmt_number","text":"15-1","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_number.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as numeric values — vec_fmt_number","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_partsper.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as parts-per quantities — vec_fmt_partsper","title":"Format a vector as parts-per quantities — vec_fmt_partsper","text":"numeric values vector, can format values rendered per mille, ppm, ppb, etc., quantities. following list keywords (associated naming scaling factors) available use within vec_fmt_partsper(): \"per-mille\": Per mille, (1 part 1,000) \"per-myriad\": Per myriad, (1 part 10,000) \"pcm\": Per cent mille (1 part 100,000) \"ppm\": Parts per million, (1 part 1,000,000) \"ppb\": Parts per billion, (1 part 1,000,000,000) \"ppt\": Parts per trillion, (1 part 1,000,000,000,000) \"ppq\": Parts per quadrillion, (1 part 1,000,000,000,000,000) function provides lot formatting control can use following options: custom symbol/units: can override automatic symbol units display choice situation warrants decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol value scaling toggle: choose disable automatic value scaling situation values already scaled coming (just require appropriate symbol unit display) pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_partsper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as parts-per quantities — vec_fmt_partsper","text":"","code":"vec_fmt_partsper(   x,   to_units = c(\"per-mille\", \"per-myriad\", \"pcm\", \"ppm\", \"ppb\", \"ppt\", \"ppq\"),   symbol = \"auto\",   decimals = 2,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   scale_values = TRUE,   use_seps = TRUE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   incl_space = \"auto\",   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_partsper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as parts-per quantities — vec_fmt_partsper","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. to_units Output Quantity singl-kw:[per-mille|per-myriad|pcm|ppm|ppb|ppt|ppq] // default: \"per-mille\" keyword signifies desired output quantity. can following set: \"per-mille\", \"per-myriad\", \"pcm\", \"ppm\", \"ppb\", \"ppt\", \"ppq\". symbol Symbol units use output display scalar<character> // default: \"auto\" symbol/units use quantity. default, set \"auto\" gt choose appropriate symbol based to_units keyword output context. However, can changed supplying string (e.g, using symbol = \"ppbV\" to_units = \"ppb\"). decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". drop_trailing_zeros Drop trailing zeros scalar<logical> // default: FALSE logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark Drop trailing decimal mark scalar<logical> // default: TRUE logical value determines whether decimal marks always appear even decimal digits display formatting (e.g., 23 becomes 23. FALSE). default trailing decimal marks shown. scale_values Scale input values accordingly scalar<logical> // default: TRUE values scaled multiplication according keyword set to_units? default TRUE since expectation normally values proportions. Setting FALSE signifies values already scaled require appropriate symbol/units formatted. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). dec_mark Decimal mark scalar<character> // default: \".\" string used decimal mark. example, using dec_mark = \",\" value 0.152 result formatted value \"0,152\"). argument ignored locale supplied (.e., NULL). force_sign Forcing display positive sign scalar<logical> // default: FALSE positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. incl_space Include space value symbol/units scalar<character>|scalar<logical> // default: \"auto\" option whether include space value symbol/units. default \"auto\" provides spacing dependent mark . can directly controlled using either TRUE FALSE. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_partsper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as parts-per quantities — vec_fmt_partsper","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_partsper.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as parts-per quantities — vec_fmt_partsper","text":"create numeric vector next examples:   Using vec_fmt_partsper() default options create character vector resultant per mille values two decimal places NA values render \"NA\". rendering context autodetected unless specified output argument (, \"plain\" output type).     can change output units different measure. ppm units desired to_units = \"ppm\" can used.     can change decimal mark comma, sure change digit separator mark default comma something else (period works ):     formatting different locale, supply locale ID let gt handle locale-specific formatting options:     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(10^(-3:-5), NA) vec_fmt_partsper(num_vals) #> [1] \"1.00%.\" \"0.10%.\" \"0.01%.\" \"NA\" vec_fmt_partsper(num_vals, to_units = \"ppm\") #> [1] \"1,000.00 ppm\" \"100.00 ppm\" \"10.00 ppm\" \"NA\" vec_fmt_partsper(   num_vals,   to_units = \"ppm\",   sep_mark = \".\",   dec_mark = \",\" ) #> [1] \"1.000,00 ppm\" \"100,00 ppm\" \"10,00 ppm\" \"NA\" vec_fmt_partsper(num_vals, to_units = \"ppm\", locale = \"es\") #> [1] \"1.000,00 ppm\" \"100,00 ppm\" \"10,00 ppm\" \"NA\" vec_fmt_partsper(num_vals, to_units = \"ppm\", pattern = \"{x}V\") #> [1] \"1,000.00 ppmV\" \"100.00 ppmV\" \"10.00 ppmV\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_partsper.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as parts-per quantities — vec_fmt_partsper","text":"15-6","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_partsper.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as parts-per quantities — vec_fmt_partsper","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as percentage values — vec_fmt_percent","title":"Format a vector as percentage values — vec_fmt_percent","text":"numeric values vector, can perform percentage-based formatting. assumed numeric values input vector proportional values , case, values automatically multiplied 100 decorating percent sign (case accommodated though setting scale_values FALSE). control percentage formatting, can use following options: percent sign placement: percent sign can placed values space can inserted symbol value. decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol digit grouping separators: options enable/disable digit separators provide choice separator symbol pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result number formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as percentage values — vec_fmt_percent","text":"","code":"vec_fmt_percent(   x,   decimals = 2,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   scale_values = TRUE,   use_seps = TRUE,   accounting = FALSE,   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign = FALSE,   incl_space = FALSE,   placement = \"right\",   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as percentage values — vec_fmt_percent","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". drop_trailing_zeros Drop trailing zeros scalar<logical> // default: FALSE logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark Drop trailing decimal mark scalar<logical> // default: TRUE logical value determines whether decimal marks always appear even decimal digits display formatting (e.g., 23 becomes 23. FALSE). default trailing decimal marks shown. scale_values Multiply input values 100 scalar<logical> // default: TRUE values scaled multiplication 100? default scaling performed since expectation incoming values usually proportional. Setting FALSE signifies values already scaled require percent sign formatted. use_seps Use digit group separators scalar<logical> // default: TRUE option use digit group separators. type digit group separator set sep_mark overridden locale ID provided locale. setting TRUE default. accounting Use accounting style scalar<logical> // default: FALSE option use accounting style values. Normally, negative values shown minus sign using accounting style instead put negative values parentheses. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). dec_mark Decimal mark scalar<character> // default: \".\" string used decimal mark. example, using dec_mark = \",\" value 0.152 result formatted value \"0,152\"). argument ignored locale supplied (.e., NULL). force_sign Forcing display positive sign scalar<logical> // default: FALSE positive sign shown positive values (effectively showing sign values except zero)? , use TRUE option. default FALSE, negative numbers display minus sign. option disregarded using accounting notation accounting = TRUE. incl_space Include space value % sign scalar<logical> // default: FALSE option whether include space value percent sign. default introduce space character. placement Percent sign placement singl-kw:[right|left] // default: \"right\" option governs placement percent sign. can either \"right\" (default) \"left\". locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as percentage values — vec_fmt_percent","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_percent.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as percentage values — vec_fmt_percent","text":"create numeric vector next examples:   Using vec_fmt_percent() default options create character vector resultant percentage values two decimal places NA values render \"NA\". rendering context autodetected unless specified output argument (, \"plain\" output type).     can change decimal mark comma, sure change digit separator mark default comma something else (period works ):     formatting different locale, supply locale ID let gt handle locale-specific formatting options:     many options formatting values. Perhaps need explicit positive negative signs? Use force_sign = TRUE .     trailing zeros past decimal mark can stripped using drop_trailing_zeros option.     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(0.0052, 0.08, 0, -0.535, NA) vec_fmt_percent(num_vals) #> [1] \"0.52%\" \"8.00%\" \"0.00%\" \"-53.50%\" \"NA\" vec_fmt_percent(num_vals, sep_mark = \".\", dec_mark = \",\") #> [1] \"0,52%\" \"8,00%\" \"0,00%\" \"-53,50%\" \"NA\" vec_fmt_percent(num_vals, locale = \"pt\") #> [1] \"0,52%\" \"8,00%\" \"0,00%\" \"-53,50%\" \"NA\" vec_fmt_percent(num_vals, force_sign = TRUE) #> [1] \"+0.52%\" \"+8.00%\" \"0.00%\" \"-53.50%\" \"NA\" vec_fmt_percent(num_vals, drop_trailing_zeros = TRUE) #> [1] \"0.52%\" \"8%\" \"0%\" \"-53.5%\" \"NA\" vec_fmt_percent(num_vals, pattern = \"{x}wt\") #> [1] \"0.52%wt\" \"8.00%wt\" \"0.00%wt\" \"-53.50%wt\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_percent.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as percentage values — vec_fmt_percent","text":"15-5","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_percent.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as percentage values — vec_fmt_percent","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_roman.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as Roman numerals — vec_fmt_roman","title":"Format a vector as Roman numerals — vec_fmt_roman","text":"numeric values vector, can transform Roman numerals, rounding values necessary.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_roman.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as Roman numerals — vec_fmt_roman","text":"","code":"vec_fmt_roman(   x,   case = c(\"upper\", \"lower\"),   pattern = \"{x}\",   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_roman.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as Roman numerals — vec_fmt_roman","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. case Use uppercase lowercase letters singl-kw:[upper|lower] // default: \"upper\" Roman numerals rendered uppercase (\"upper\") lowercase (\"lower\") letters? default, set \"upper\". pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_roman.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as Roman numerals — vec_fmt_roman","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_roman.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as Roman numerals — vec_fmt_roman","text":"create numeric vector next examples:   Using vec_fmt_roman() default options create character vector values rendered Roman numerals. Zero values rendered \"N\", NA values remain NA values, negative values automatically made positive, values greater equal 3900 rendered \"ex terminis\". rendering context autodetected unless specified output argument (, \"plain\" output type).     can also use vec_fmt_roman() case = \"lower\" option create character vector values rendered lowercase Roman numerals.     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(1, 4, 5, 8, 12, 20, 0, -5, 1.3, NA) vec_fmt_roman(num_vals) #> [1] \"I\" \"IV\" \"V\" \"VIII\" \"XII\" \"XX\" \"N\" \"V\" \"I\" \"NA\" vec_fmt_roman(num_vals, case = \"lower\") #> [1] \"i\" \"iv\" \"v\" \"viii\" \"xii\" \"xx\" \"n\" \"v\" \"i\" \"NA\" vec_fmt_roman(num_vals, case = \"lower\", pattern = \"{x}.\") #> [1] \"i.\" \"iv.\" \"v.\" \"viii.\" \"xii.\" \"xx.\" \"n.\" \"v.\" \"i.\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_roman.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as Roman numerals — vec_fmt_roman","text":"15-9","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_roman.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as Roman numerals — vec_fmt_roman","text":"v0.8.0 (November 16, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_scientific.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as values in scientific notation — vec_fmt_scientific","title":"Format a vector as values in scientific notation — vec_fmt_scientific","text":"numeric values vector, can perform formatting targeted values rendered scientific notation, extremely large small numbers can expressed practical fashion. , numbers written form mantissa (m) exponent (n) construction m x 10^n mEn. mantissa component number 1 10. instance, 2.5 x 10^9 can used represent value 2,500,000,000 scientific notation. similar way, 0.00000012 can expressed 1.2 x 10^-7. Due ability describe numbers succinctly ease calculation, scientific notation widely employed scientific technical domains. fine control formatting task, following options: decimals: choice number decimal places, option drop trailing zeros, choice decimal symbol scaling: can choose scale targeted values multiplier value pattern: option use text pattern decoration formatted values locale-based formatting: providing locale ID result formatting specific chosen locale","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_scientific.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as values in scientific notation — vec_fmt_scientific","text":"","code":"vec_fmt_scientific(   x,   decimals = 2,   n_sigfig = NULL,   drop_trailing_zeros = FALSE,   drop_trailing_dec_mark = TRUE,   scale_by = 1,   exp_style = \"x10n\",   pattern = \"{x}\",   sep_mark = \",\",   dec_mark = \".\",   force_sign_m = FALSE,   force_sign_n = FALSE,   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_scientific.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as values in scientific notation — vec_fmt_scientific","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. decimals Number decimal places scalar<numeric|integer>(val>=0) // default: 2 corresponds exact number decimal places use. value 2.34 can, example, formatted 0 decimal places result \"2\". 4 decimal places, formatted value becomes \"2.3400\". n_sigfig Number significant figures scalar<numeric|integer>(val>=1) // default: NULL (optional) option format numbers n significant figures. default, NULL thus number values formatted according number decimal places set via decimals. opting format according rules significant figures, n_sigfig must number greater equal 1. values passed decimals drop_trailing_zeros arguments ignored. drop_trailing_zeros Drop trailing zeros scalar<logical> // default: FALSE logical value allows removal trailing zeros (redundant zeros decimal mark). drop_trailing_dec_mark Drop trailing decimal mark scalar<logical> // default: TRUE logical value determines whether decimal marks always appear even decimal digits display formatting (e.g., 23 becomes 23. FALSE). default trailing decimal marks shown. scale_by Scale values fixed multiplier scalar<numeric|integer> // default: 1 numeric values multiplied scale_by value undergoing formatting. Since default value 1, values changed unless different multiplier value supplied. exp_style Style declaration exponent formatting scalar<character> // default: \"x10n\" Style formatting use scientific notation formatting. default \"x10n\" options include using single letter (e.g., \"e\", \"E\", etc.), letter followed \"1\" signal minimum digit width one, \"low-ten\" using stylized \"10\" marker. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. sep_mark Separator mark digit grouping scalar<character> // default: \",\" string use separator groups digits. example, using sep_mark = \",\" value 1000 result formatted value \"1,000\". argument ignored locale supplied (.e., NULL). dec_mark Decimal mark scalar<character> // default: \".\" string used decimal mark. example, using dec_mark = \",\" value 0.152 result formatted value \"0,152\"). argument ignored locale supplied (.e., NULL). force_sign_m, force_sign_n Forcing display positive sign scalar<logical> // default: FALSE plus sign shown positive values mantissa (first component, force_sign_m) exponent (force_sign_n)? effectively show sign values except zero either numeric components notation. , use TRUE either one options. default FALSE, negative numbers display sign. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_scientific.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as values in scientific notation — vec_fmt_scientific","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_scientific.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as values in scientific notation — vec_fmt_scientific","text":"create numeric vector next examples:   Using vec_fmt_scientific() default options create character vector values scientific notation. NA values remain NA values. rendering context autodetected unless specified output argument (, \"plain\" output type).     can change number decimal places decimals option:     formatting different locale, supply locale ID gt handle locale-specific formatting options:     need positive negative signs mantissa component given value, use force_sign_m = TRUE:     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(3.24e-4, 8.65, 1362902.2, -59027.3, NA) vec_fmt_scientific(num_vals) #> [1] \"3.24 x 10^-4\" \"8.65\" \"1.36 x 10^6\" \"-5.90 x 10^4\" \"NA\" vec_fmt_scientific(num_vals, decimals = 1) #> [1] \"3.2 x 10^-4\" \"8.7\" \"1.4 x 10^6\" \"-5.9 x 10^4\" \"NA\" vec_fmt_scientific(num_vals, locale = \"es\") #> [1] \"3,24 x 10^-4\" \"8,65\" \"1,36 x 10^6\" \"-5,90 x 10^4\" \"NA\" vec_fmt_scientific(num_vals, force_sign_m = TRUE) #> [1] \"+3.24 x 10^-4\" \"+8.65\" \"+1.36 x 10^6\" \"-5.90 x 10^4\" \"NA\" vec_fmt_scientific(num_vals, pattern = \"[{x}]\") #> [1] \"[3.24 x 10^-4]\" \"[8.65]\" \"[1.36 x 10^6]\" \"[-5.90 x 10^4]\" \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_scientific.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as values in scientific notation — vec_fmt_scientific","text":"15-3","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_scientific.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as values in scientific notation — vec_fmt_scientific","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_spelled_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as spelled-out numbers — vec_fmt_spelled_num","title":"Format a vector as spelled-out numbers — vec_fmt_spelled_num","text":"numeric values vector, can transform numbers spelled . values 0 100 can spelled according specified locale. example, value 23 rendered \"twenty-three\" locale English-language one (, provided ); Swedish locale provided (e.g., \"sv\"), output instead \"tjugotre\".","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_spelled_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as spelled-out numbers — vec_fmt_spelled_num","text":"","code":"vec_fmt_spelled_num(   x,   pattern = \"{x}\",   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_spelled_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as spelled-out numbers — vec_fmt_spelled_num","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_spelled_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as spelled-out numbers — vec_fmt_spelled_num","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_spelled_num.html","id":"supported-locales","dir":"Reference","previous_headings":"","what":"Supported locales","title":"Format a vector as spelled-out numbers — vec_fmt_spelled_num","text":"following 80 locales supported locale argument vec_fmt_spelled_num(): \"af\" (Afrikaans), \"ak\" (Akan), \"\" (Amharic), \"ar\" (Arabic), \"az\" (Azerbaijani), \"\" (Belarusian), \"bg\" (Bulgarian), \"bs\" (Bosnian), \"ca\" (Catalan), \"ccp\" (Chakma), \"chr\" (Cherokee), \"cs\" (Czech), \"cy\" (Welsh), \"da\" (Danish), \"de\" (German), \"de-CH\" (German (Switzerland)), \"ee\" (Ewe), \"el\" (Greek), \"en\" (English), \"eo\" (Esperanto), \"es\" (Spanish), \"et\" (Estonian), \"fa\" (Persian), \"ff\" (Fulah), \"fi\" (Finnish), \"fil\" (Filipino), \"fo\" (Faroese), \"fr\" (French), \"fr-\" (French (Belgium)), \"fr-CH\" (French (Switzerland)), \"ga\" (Irish), \"\" (Hebrew), \"hi\" (Hindi), \"hr\" (Croatian), \"hu\" (Hungarian), \"hy\" (Armenian), \"id\" (Indonesian), \"\" (Icelandic), \"\" (Italian), \"ja\" (Japanese), \"ka\" (Georgian), \"kk\" (Kazakh), \"kl\" (Kalaallisut), \"km\" (Khmer), \"ko\" (Korean), \"ky\" (Kyrgyz), \"lb\" (Luxembourgish), \"lo\" (Lao), \"lrc\" (Northern Luri), \"lt\" (Lithuanian), \"lv\" (Latvian), \"mk\" (Macedonian), \"ms\" (Malay), \"mt\" (Maltese), \"\" (Burmese), \"ne\" (Nepali), \"nl\" (Dutch), \"nn\" (Norwegian Nynorsk), \"\" (Norwegian), \"pl\" (Polish), \"pt\" (Portuguese), \"qu\" (Quechua), \"ro\" (Romanian), \"ru\" (Russian), \"se\" (Northern Sami), \"sk\" (Slovak), \"sl\" (Slovenian), \"sq\" (Albanian), \"sr\" (Serbian), \"sr-Latn\" (Serbian (Latin)), \"su\" (Sundanese), \"sv\" (Swedish), \"sw\" (Swahili), \"ta\" (Tamil), \"th\" (Thai), \"tr\" (Turkish), \"uk\" (Ukrainian), \"vi\" (Vietnamese), \"yue\" (Cantonese), \"zh\" (Chinese).","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_spelled_num.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as spelled-out numbers — vec_fmt_spelled_num","text":"create numeric vector next examples:   Using vec_fmt_spelled_num() create character vector values rendered spelled-numbers. NA values remain NA values. rendering context autodetected unless specified output argument (, \"plain\" output type).     formatting different locale, supply locale ID let gt obtain locale-specific set spelled numbers:     last example, one can wrap values pattern pattern argument. Note NA values pattern applied.","code":"num_vals <- c(1, 8, 23, 76, 0, -5, 200, NA) vec_fmt_spelled_num(num_vals) #> [1] \"one\"     \"eight\"     \"twenty-three\"  \"seventy-six\"  \"zero\" #> [6] \"-5\"      \"200\"       \"NA\" vec_fmt_spelled_num(num_vals, locale = \"af\") #> [1] \"een\"     \"agt\"     \"drie-en-twintig\"     \"ses-en-sewentig\" #> [5] \"nul\"     \"-5\"      \"200\"                 \"NA\" vec_fmt_spelled_num(num_vals, pattern = \"{x}.\") #> [1] \"one.\"     \"eight.\"     \"twenty-three.\"  \"seventy-six.\"  \"zero.\" #> [6] \"-5.\"      \"200.\"       \"NA\""},{"path":"https://gt.rstudio.com/reference/vec_fmt_spelled_num.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as spelled-out numbers — vec_fmt_spelled_num","text":"15-11","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_spelled_num.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as spelled-out numbers — vec_fmt_spelled_num","text":"v0.9.0 (Mar 31, 2023)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a vector as time values — vec_fmt_time","title":"Format a vector as time values — vec_fmt_time","text":"Format vector values time values using one 25 preset time styles. Input can form POSIXt (.e., datetimes), character (must ISO 8601 forms HH:MM:SS YYYY-MM-DD HH:MM:SS), Date (always results formatting 00:00:00).","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a vector as time values — vec_fmt_time","text":"","code":"vec_fmt_time(   x,   time_style = \"iso\",   pattern = \"{x}\",   locale = NULL,   output = c(\"auto\", \"plain\", \"html\", \"latex\", \"rtf\", \"word\") )"},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a vector as time values — vec_fmt_time","text":"x input vector vector(numeric|integer) // required input vector undergo transformation character vector length. Values within vector formatted. time_style Predefined style times scalar<character>|scalar<numeric|integer>(1<=val<=25) // default: \"iso\" time style use. default short name \"iso\" corresponds times formatted within ISO 8601 datetime values. 25 time styles total short names can viewed using info_time_style(). pattern Specification formatting pattern scalar<character> // default: \"{x}\" formatting pattern allows decoration formatted value. formatted value represented {x} (can used multiple times, needed) characters interpreted string literals. locale Locale identifier scalar<character> // default: NULL (optional) optional locale identifier can used formatting values according locale's rules. Examples include \"en\" English (United States) \"fr\" French (France). can call info_locales() useful reference locales supported. output Output format singl-kw:[auto|plain|html|latex|rtf|word] // default: \"auto\" output style resulting character vector. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a vector as time values — vec_fmt_time","text":"character vector.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":"formatting-with-the-time-style-argument","dir":"Reference","previous_headings":"","what":"Formatting with the time_style argument","title":"Format a vector as time values — vec_fmt_time","text":"need supply preset time style time_style argument. many time styles can handle localization supported locale. Many time styles termed flexible time formats means output adapt locale provided. feature makes flexible time formats better option locales \"en\" (default locale). following table provides listing time styles output values (corresponding input time 14:35:00). noted represent 12- 24-hour time. can call info_time_style() console view similar table time styles example output.","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a vector as time values — vec_fmt_time","text":"create character vector datetime values ISO-8601 format next examples:   Using vec_fmt_time() (\"iso-short\" time style) result character vector formatted times. NA values remain NA values. rendering context autodetected unless specified output argument (, \"plain\" output type).     can choose 25 different time formatting styles. Many styles flexible, meaning structure format adapt different locales. use \"Bhms\" time style demonstrate (first default locale \"en\"):     perform type formatting German (\"de\") locale:     can always use info_time_style() call info table serves handy reference time_style options. last example, one can wrap time values pattern pattern argument. Note NA values pattern applied.","code":"str_vals <- c(\"2022-06-13 18:36\", \"2019-01-25 01:08\", NA) vec_fmt_time(str_vals, time_style = \"iso-short\") #> [1] \"18:36\" \"01:08\" NA vec_fmt_time(str_vals, time_style = \"Bhms\") #> [1] \"6:36:00 in the evening\" \"1:08:00 at night\" NA vec_fmt_time(str_vals, time_style = \"Bhms\", locale = \"de\") #> [1] \"6:36:00 abends\" \"1:08:00 nachts\" NA vec_fmt_time(   str_vals,   time_style = \"hm\",   pattern = \"temps: {x}\",   locale = \"fr-CA\" ) #> [1] \"temps: 6:36 PM\" \"temps: 1:08 AM\" NA"},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Format a vector as time values — vec_fmt_time","text":"15-14","code":""},{"path":"https://gt.rstudio.com/reference/vec_fmt_time.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Format a vector as time values — vec_fmt_time","text":"v0.7.0 (Aug 25, 2022)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/reference/web_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for adding an image from the web — web_image","title":"Helper function for adding an image from the web — web_image","text":"can flexibly add web image inside table web_image(). function provides convenient way generate HTML fragment image URL. function currently HTML-based, useful HTML table output. use function inside data cells, recommended use text_transform(). function, can specify data cells target include web_image() call within required user-defined function (fn argument). want include image places (e.g., header, within footnote text, etc.) need wrap web_image() inside html(). , function creates HTML image tag, , call web_image(\"http://example.com/image.png\") evaluates : <img src=\\\"http://example.com/image.png\\\" style=\\\"height:30px;\\\"> height 30px default height chosen work well within heights table rows.","code":""},{"path":"https://gt.rstudio.com/reference/web_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for adding an image from the web — web_image","text":"","code":"web_image(url, height = 30)"},{"path":"https://gt.rstudio.com/reference/web_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for adding an image from the web — web_image","text":"url image URL scalar<character> // required url resolves image file. height Height image scalar<numeric|integer> // default: 30 absolute height image table cell (\"px\" units). default, set \"30px\".","code":""},{"path":"https://gt.rstudio.com/reference/web_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for adding an image from the web — web_image","text":"character object HTML fragment can placed inside cell.","code":""},{"path":"https://gt.rstudio.com/reference/web_image.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for adding an image from the web — web_image","text":"Get PNG-based logo R Project image URL.   Create tibble contains heights image pixels (one column string, numerical values), , create gt table. Use text_transform() insert R logo PNG image various sizes.    Get SVG-based logo R Project image URL.   Create tibble contains heights image pixels (one column string, numerical values), , create gt table. Use tab_header() insert R logo SVG image title five times subtitle.","code":"r_png_url <- \"https://www.r-project.org/logo/Rlogo.png\" dplyr::tibble(   pixels = px(seq(10, 35, 5)),   image = seq(10, 35, 5) ) |>   gt() |>   text_transform(     locations = cells_body(columns = image),     fn = function(x) {       web_image(         url = r_png_url,         height = as.numeric(x)       )     }   ) r_svg_url <- \"https://www.r-project.org/logo/Rlogo.svg\" dplyr::tibble(   pixels = px(seq(10, 35, 5)),   image = seq(10, 35, 5) ) |>   gt() |>   tab_header(     title = html(       \"<strong>R Logo<\/strong>\",       web_image(         url = r_svg_url,         height = px(50)       )     ),     subtitle = html(       web_image(         url = r_svg_url,         height = px(12)       ) |>         rep(5)     )   )"},{"path":"https://gt.rstudio.com/reference/web_image.html","id":"function-id","dir":"Reference","previous_headings":"","what":"Function ID","title":"Helper function for adding an image from the web — web_image","text":"9-1","code":""},{"path":"https://gt.rstudio.com/reference/web_image.html","id":"function-introduced","dir":"Reference","previous_headings":"","what":"Function Introduced","title":"Helper function for adding an image from the web — web_image","text":"v0.2.0.5 (March 31, 2020)","code":""},{"path":[]},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-development-version","dir":"Changelog","previous_headings":"","what":"gt (development version)","title":"gt (development version)","text":"Significantly faster rendering certain large tables, optimizing internal rownum_translation() utility. (@magnusdv, #1924) Interactive tables can support selection ihtml.selection_mode option. (@jonthegeek, #1909) Tables embedded Shiny apps gt_output() render_gt() ihtml.selection_mode enabled also act inputs, reporting row numbers selected (#354, #1368). (@jonthegeek, #1909)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-0111","dir":"Changelog","previous_headings":"","what":"gt 0.11.1","title":"gt 0.11.1","text":"CRAN release: 2024-10-04","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"breaking-changes-0-11-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"gt 0.11.1","text":"extract_body() function now, default, display columns hidden (e.g., cols_hide() cols_merge*()); previous behavior can restored using incl_hidden_cols = TRUE.","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"improvements-to-the-latex-output-format-0-11-1","dir":"Changelog","previous_headings":"","what":"Improvements to the LaTeX output format","title":"gt 0.11.1","text":"PDF output now defaults full-width floating environment using tabular*. Float position can controlled latex.tbl.pos argument tab_options. Quarto users can alternatively use tbl-pos argument control positioning. use longtable environment instead, use tab_option(latex.use_longtable = TRUE). (@AronGullickson, #1588) Creating caption tab_caption() now preserved LaTeX output as_latex(). Cross-referencing table using internal cross-referencing system bookdown now enabled PDF HTML outputs (HTML, set options(\"htmltools.preserve.raw\" = FALSE)). Quarto users use tbl-cap label cell options. (@nielsbock, #1800) Improved centering stubhead label Latex row_group_as_column = TRUE width row name column specified. (@kbrevoort, #1804) LaTeX now correctly renders text size changed (#1885). (@olivroy, #1899) Fixed bug caused error LaTeX (1) row_group_as_column = TRUE, (2) row groups specified using tab_row_group(), (3) user specified width row label column. (@kbrevoort, #1804) Fixed issue column widths weren’t set properly using col_widths() LaTeX output (#1837). (@snhansen, #1867)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"interactive-table-support-0-11-1","dir":"Changelog","previous_headings":"","what":"Interactive table support","title":"gt 0.11.1","text":"Interactive tables show border opt_table_lines(extent = \"none\") specified (#1307). Interactive tables now respect styling options, namely: column_labels.background.color, row_group.background.color, row_group.font.weight, table_body.hlines.style, table.font.weight, table.font.size, stub.font.weight. (#1693) opt_interactive() now works columns merged cols_merge(). (@olivroy, #1785) opt_interactive() now works columns substituted sub_*(). (@olivroy, #1759) support cells_stubhead() styling footnotes interactive tables.","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-11-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.11.1","text":"New arguments added extract_body() better control columns present returned data (#1875). (#1889) locale argument gt() now defaults getOption(\"gt.locale\") set. (#1894) optional argument levels added cells_column_spanners() constrain targeting column spanners level. (@obsaditelnost, #1858) Fixed bug using pct() column widths as_gtable() (#1771). (@teunbrand, #1776) Fixed bug gt(row_group_as_column = TRUE) create wrong layout as_gtable() groups unique. (@olivroy, #1803) Showing currency symbols grid output now works. (@olivroy, #1788) data_color() longer errors tidyselect selection empty (like fmt_*() functions) (#1665). (@olivroy, #1795) Fixed issue using text_case_match(.replace = \"\", .locations = cells_column_spanners()). (@olivroy, #1823) Improved performance footnote rendering. (@olivroy, #1818) Improved footnote rendering Quarto fmt_markdown() (#1773). (@olivroy, #1860) Fixed issue md(\"\") fail Quarto (#1769). (@olivroy, #1772) Fixed bug spanners didn’t render correctly Quarto (#1839). (#1856) vec_fmt_markdown() works correctly inside Quarto (#1840). (@olivroy, #1841) Fixed issue tab_spanner_delim() fail resolve duplicate ID value. (@olivroy, #1821) Fixed issue multiple text_replace() calls produce bad results cells_column_labels(). (@olivroy, #1824) cols_add() works correctly cases. (#1893) tab_footnote() now correctly adds footnote marks cells_stub_summary() cells_stub_grand_summary() locations (#1832). (@olivroy, #1833) tidyselect::(), tidyselect::all_of(), tidyselect::any_of() now re-exported gt. (#1830) Fixed issue md() fmt_markdown() render factors numeric levels rather text labels (#1882). (@rossellhayes, #1883) vec_fmt_*() (incidentally cols_nanoplot()) faster now. (@olivroy, #1888, #1891, #1896, #1901) Improved error messages text_transform() function locations couldn’t resolved. (@olivroy, #1774) tab_row_group() gives precise error message rows can’t resolved correctly (#1535). (@olivroy, #1770)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-0110","dir":"Changelog","previous_headings":"","what":"gt 0.11.0","title":"gt 0.11.0","text":"CRAN release: 2024-07-09","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-11-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.11.0","text":"gt tables can now rendered grid graphics system new as_gtable() function (#180, #420, #509, #961, #1652, #1701). Thank @teunbrand valuable contribution! (#1563, #1648, #1655, #1727) new fmt_chem() function, ’s possible format chemical formulas chemical equations table body. (#1636) added fmt_email() can transform email addresses table cells usable ‘mailto:’ links. operates similarly fmt_url() removes unneeded anchor tag attributes (#1616). (#1649) new fmt_tf() function lets format logical values gt table. express ‘yes’ ‘’, ‘true’ ‘false’, , perhaps use pairings complementary symbols make sense table (#1650). (#1654) new fmt_country() added help making country names consistent localizable. input text can either consist 2- 3-letter ISO 3166-1 country codes. (#1645, #1696) Math formulas (written LaTeX) can now rendered HTML md() fmt_markdown(). LaTeX formulas can set $ $$ delimiters inline block rendering styles. requires katex package work (’s optional dependency), rendering formulas dependency-free output (#375, #616, #1163). (#1578) added unit_conversion() helper function help perform unit conversions. function returns conversion factor transforming value one form measurement units target form. works wonderfully scale_by argument present many number-based fmt_*() functions. (#1704, #1709, #1710, #1729) plot() method added gt_tbl one can quickly create reprex visual example (e.g., exibble |> gt() |> plot()). (#1742) info_time_style() info_date_style() gain locale argument preview time date formatting specific locale. (#1747) Several datasets added package: reactions, photolysis, peeps, nuclides, gibraltar, films. (#1619, #1641, #1664, #1668, #1686, #1695)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"improvements-to-the-latex-output-format-0-11-0","dir":"Changelog","previous_headings":"","what":"Improvements to the LaTeX output format","title":"gt 0.11.0","text":"host improvements made LaTeX output styling made tab_options() tab_style() now honored. styling implemented now includes: (1) font size, underlining, italicizing, bolding, indenting text, coloring text, filling cell backgrounds, modifying text case (.e., uppercase, lowercase, sentence case) (#1472). (#1594, #1603, #1746, thanks much @kbrevoort) Text spanner labels now nicely wrapped LaTeX output, wrapping (#1656). (#1716, #1746) gt() setting row_group_as_column == TRUE now implemented LaTeX output. (#1716) LaTeX output now understands can convert lengths expressed pixels (internal conversion pt units performed) (#1582). (#1595) fix made correct error related converting px units pt units LaTeX output. (#1591, thank @AaronGullickson)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"improvements-to-interactive-html-tables-via-opt_interactive-0-11-0","dir":"Changelog","previous_headings":"","what":"Improvements to interactive HTML tables via opt_interactive()","title":"gt 0.11.0","text":"performance interactive table rendering opt_interactive() improved (#1289). (#1735) opt_interactive() now shows row names rownames_to_stub = TRUE (#1702). (@olivroy, #1706) ’s now better support displaying group columns, present, interactive tables (#1705). (@olivroy, #1725, #1758, #1760) Interactive tables can now display stub header label created tab_stubhead(). (@olivroy, #1758). longer error hidden column spanner label interactive HTML table (.e., opt_interactive()) context. (#1629) Interactive tables now render first level column groups added tab_spanner() (#1618). Thanks @obsaditelnost work ! (#1623) opt_interactive() function now height argument help specify height interactive table (#1544). (@olivroy, #1723). using opt_interactive(use_pagination = FALSE) pagination controls now entirely removed instead merely non-functional (#1542). (#1642) supplying locale value interactive table, now ensure supplied locale normalized (\"fr_CH\" internally corrected \"fr-CH\") (#1637). (#1643)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-11-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.11.0","text":"fill_color argument fmt_icon() now allows use named vector/list apply different colors different icons (#1560). (#1647) fmt_flag() gains locale argument SVG title text displays country names locale language. (#1645) better represent missing values nanoplots, \"marker\" option added cols_nanoplot() (#1567). (#1587) Many info_*() functions upgraded better functionality refreshed look. (#1720, #1748, #1754) metro dataset updated six new Line 11 stations opened 2024-06-13. (#1708) HTML tables produced Quarto, now use data-qmd-base64 attribute along base64 text passing Markdown text Quarto (handles Markdown conversion) (#1487, #1488). (#1688, #1690, #1734) Scientific engineering notation longer unexpectedly wrap lines HTML smaller column widths. (#1621) Footnote marks HTML table outputs longer unexpectedly increase text line height (#1556). (#1644) now ensure tables print correctly called inline code .qmd .Rmd documents (#1055). (#1689) data_color() throws informative error internal calculation failed (e.g., presence infinite values) (#1373). (@olivroy, #1585) data_color() provides informative error message rows doesn’t resolve anything. (@olivroy, #1659) data_color() provides error message rows doesn’t resolve anything (#1659). (@olivroy, #1660). summary_rows() now throws informative error message use grand_summary_rows() row groups detected (#1292). (@olivroy, #1752) Boxplot-based nanoplots now correctly determine data points outliers. (#1756) issue row group set column stub, corrupting setting column widths HTML output tables, fixed (#1253, #1510). (#1744) rendering footnotes source notes received fixes ensure requested notes inserted also typesetting options tab_options() implemented (#1505, #1615). (#1620, #1751) Using fmt_*() function stub composed Markdown HTML longer results error (#1600). (#1627) combination using cols_label() + summary_rows() / grand_summary_rows() longer causes error RTF output gtsave() (#1233). (#1596) now ensure id values stripped HTML tags using tab_row_group(). Previously condition create corrupted row group labels (#1143). (#1750) cols_hide() longer errors column wasn’t supplied. Error messages also clearer supplying column doesn’t exist (#1631). (#1632) cols_units(), tab_footnote() tab_style() now give better error messages locations correctly specified (#475). (@olivroy, #1638, #1640, #1733) Error messages now improved rm_spanners(), rm_footnotes(), rm_source_notes() (#1638). (#1661) Error messages vec_*() functions now standardized check_vector_valid(). (#1662) Running testthat tests longer fails Windows due gtsave() path incompatibilities (#1626). (#1627) Tests run Windows less noisy now (render related warnings). (#1634) Much code refactoring, linting, test improvements performed @olivroy, resulting many performance gains. (#1666, #1683, #1694, #1699, #1715, #1718, #1728, #1730, #1731, #1732, #1733, #1753) gt now depends R 3.6. (#1599, #1731).","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"documentation-enhancements-0-11-0","dir":"Changelog","previous_headings":"","what":"Documentation enhancements","title":"gt 0.11.0","text":"Many small documentation fixes performed. (#1555, #1598, #1633, #1658, #1663, #1676, #1685, #1700, #1703, #1717, #1719, #1721) examples added demonstrate various functions can used. (#1646, #1667, #1677, #1698, #1724, #1737)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-0101","dir":"Changelog","previous_headings":"","what":"gt 0.10.1","title":"gt 0.10.1","text":"CRAN release: 2024-01-17","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"improvements-to-nanoplots-0-10-1","dir":"Changelog","previous_headings":"","what":"Improvements to nanoplots","title":"gt 0.10.1","text":"Box plots can now generated via cols_nanoplot() using plot_type = \"boxplot\". plots laid horizontally , default, share plot axis across rows. (#1527) can now single line bar plots generated cols_nanoplot(). plot_type set \"bar\" single values found, horizontal bars generated comparable across rows. (#1514, #1515, #1519) autohide argument added cols_nanoplot() function columns containing input data nanoplots conveniently hidden final presentation. (#1533) Added option (data_area_fill_color arg nanoplot_options()) change fill color nanoplot data area line-type plots (#1521). (#1534)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-10-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.10.1","text":"performance rendering bigger tables HTML improved now three times faster . (#1470, thanks @mgirlich) Introduced small performance improvement longer calling utils::packageVersion() internally (#1524). (#1525, thank @slodge) Code test refactoring performed generally improve performance code readability. (#1480) gtsave() function now returns file path invisibly instead TRUE. (#1478) functions now produce better error messages provided gt_tbl object. (#1504, #1624) URL formatting fmt_url() improved preventing link text breaking across lines (#1509). (#1537) now remove unnecessary newlines HTML text produced as_raw_html(), caused issue integrating gt tables blastula email messages (#1506). (#1520) tab_spanner_delim() now lets use delim strings longer single character (#1469). (#1513) Fix footnotes LaTeX tables footnote marks added; previously showed \"NA\" mark footer area longer displayed (#1416). (#1512, thanks @kbrevoort) LaTeX tables can now overall width specified (#119, #329). (#1495, thank @kbrevoort) Fix issue cols_width() specification involving percentage values fails LaTeX tables (#1465). (#1495, thanks @kbrevoort!) Several documentation fixes made address inconsistencies improve clarity. (#1491)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-0100","dir":"Changelog","previous_headings":"","what":"gt 0.10.0","title":"gt 0.10.0","text":"CRAN release: 2023-10-07","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"nanoplots-0-10-0","dir":"Changelog","previous_headings":"","what":"Nanoplots","title":"gt 0.10.0","text":"can now add little plots called nanoplots gt table (#299, #515). (#1431, #1439, #1445, #1453, #1458, #1459, #1461, #1462) function cols_nanoplot() adds new column contains plots. data can obtained one columns table. helper function called nanoplot_options() allows altering composition styling nanoplots new column. two basic types nanoplots available: \"line\" \"bar\". line plot shows individual data points smooth connecting lines allow easier scanning values. can opt straight-line connections data points, , connections (’s ). data feed line plot can consist single vector values (resulting equally-spaced y values), , can supply two vectors representative x y. bar plot built little bit differently. focus evenly-spaced bars (requiring single vector values) project zero line, clearly showing difference positive negative values. default, type nanoplot basic interactivity. One can hover data points vertical guides display values ascribed . guide left-hand side plot area display minimal maximal y values hover.","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"other-great-new-features-0-10-0","dir":"Changelog","previous_headings":"","what":"Other great new features","title":"gt 0.10.0","text":"Brand new rows can added gt table new rows_add() function. user can supply new row data name value pairs. control placed way ..arguments (new rows added bottom table default). can also add empty (.e., NA) rows .n_empty option (#698). (#1323) complement rows_add(), cols_add() function added. New columns can indeed added gt table function, interface close dplyr::mutate(). (#1367) can now use empty table starting point gt table. can used conjunction cols_add() rows_add() build table piece--piece specific workflows/settings. constitutes empty tables can : 0 x 0 tables, 0 x n tables (rows, columns), n x 0 tables (rows, columns; treated 0 x 0 tables). (#1376) now way better express measurement units gt something called units notation. intuitive easy--learn syntax, gt ensure measurement units formatted correctly matter output type . can format units table body fmt_units(), can attach units column labels cols_units(), can integrate units notation already-available cols_label() tab_spanner() functions (#417, #533). (#1357, #1426, #1446) useful new helper function, from_column(), added can fetch values (compatible arguments) column input table. example, using fmt_scientific() number significant figures vary across values formatted, column containing values n_sigfig argument can referenced from_column(). (#1392, #1393, #1395, #1396, #1399, #1403) new fmt_icon() function able add icons Font Awesome icon library. works way ’s similar fmt_flag(), identifiers formatted cells transformed -place SVG-based icons. (#1413) info_icons() info_flags() functions added help people know valid codes flags icons (using fmt_icon() fmt_flag()). (#1421) added extract_body() function, lets pull data frame associated body cells. Importantly, extraction can happen different stages table build (e.g., \"init\", \"text_transformed\", etc.), allowing user access table formatted body cells different applications (verification formatting, debugging new formatting functions, etc.) (#1441). (#1449) Interactive HTML tables (usually generated use opt_interactive()) can now use localized labels/controls. using 574 supported locales gt, interactive table fully translated language locale (#1308). (#1389) illness constants datasets added. datasets units column useful making examples fmt_units() function. (#1357)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"improvements-to-the-word-output-format-0-10-0","dir":"Changelog","previous_headings":"","what":"Improvements to the Word output format","title":"gt 0.10.0","text":"Processing Word output now escapes HTML places (#1378). (#1303) Word output format now uses side argument present summary_rows() grand_summary_rows() place new summary rows either top bottom row group (summary_rows()) table whole (grand_summary_rows()). (#1325) Tables rendered Word output can now handle specific case table summary rows doesn’t row names. (#1325) Summary rows Word output tables can now placed top bottom group (top bottom table). (#1402) Word output tables can now contain images. entails compatibility fmt_image() function, , images (local remote) can inserted Markdown (#1272). (#1273)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"documentation-enhancements-0-10-0","dir":"Changelog","previous_headings":"","what":"Documentation enhancements","title":"gt 0.10.0","text":"gt website updated slightly different look; section names updated consistency (#1419). (#1287, #1340, #1341, #1444) ’ve improved formatting arguments documentation short titles descriptions regarding expected inputs default values. looks great internal R help pages pkgdown-generated website (#1290). (#1338) Several small documentation updates made, emphasis improving examples (#1304, #1349, #1369). (#1293, #1316, #1324, #1329, #1330, #1331, #1334, #1381, #1383, #1395, #1404, #1442, #1454)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-10-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.10.0","text":"tab_spanner_delim() function given limit argument splitting particular side can stop early precisely. (#1328) width argument added fmt_image(). change can variously set width, height, . Significant figures support added fmt_scientific() vec_fmt_scientific() functions; new n_sigfig argument . (#1411) cols_merge_range() function now locale argument. Range patterns across locales different (can involve use single hyphen, en dash, em dash, tilde, etc.) make sense follow convention locale provided (#158). (#1423) fmt_url() function now options adding anchor tag attributes (\"target\", \"rel\", \"referrerpolicy\", \"hreflang\"). Thanks @elipousson work ! (#1428). (#1452) now rudimentary support defining column widths LaTeX output tables (cols_width()). accepts length values ‘px’ automatic conversion ‘pt’ values performed maximize compatibility different LaTeX flavors (#634, #851, #1417). (#1371, #1450) ’s now possible use background fill colors perform text coloring emboldened/italicized text within body cells LaTeX tables. commonly performed use tab_style() data_color() (#84, #869). (#1352) gtsave() function now works gt_group objects (usually generated gt_split() gt_group()) (#1354). (#1365) gt_group objects can now printed using R Markdown Quarto (#1286). (#1332) using fmt_currency() locale value set, gt now use automatically select locale’s default currency. countries can multiple currencies, opt -widely used currency (users alternatively specify currency code info_currencies() contains supported currencies used package) (#1346). (#1347) columns argument cols_hide() cols_unhide() can now accept NULL (.e., columns resolved). functions longer error case (#1342). (#1343) countrypops dataset updated recent (August 2023) World Bank data revises population estimates brings final year 2022. examples, tests, articles using dataset also updated. (#1410) refinements made system font stacks defined system_fonts(). (#1447) Databricks notebook environment now detected gt, tables now automatically displayed without call extra printing functions. (#1427) Display issues scientific engineering notation formatting (lack dropping trailing zeros, promised drop_trailing_zeros argument) fixed. Part fix involves adding drop_trailing_dec_mark argument four functions fmt_scientific(), fmt_engineering(), vec_fmt_scientific() vec_fmt_engineering(). (#1380) Fixed incorrect country code reference Netherlands cause incorrect flag appear using fmt_flag(). (#1319) Many new flags added fmt_flag() (#1333, #1335). (#1336) cases, incorrect rounding duration values using fmt_duration(). now fixed, thanks @rcannood (#1374). (#1375) Fixed issue cols_label_with() column names wouldn’t relabeled resolved columns subset total columns available. (#1326) Fixed LaTeX bug characters following \\midrule corrupt table (#145, #391, #1107, #1182). (#1390) Provided rendering fallback HTML tables rendered Quarto combination fmt_markdown() tab_options(quarto.disable_processing = TRUE) incorrectly result empty cells. (#1455) issue associated lack HTML formatting within interactive tables fixed (#1299, #1370, #1384, #1443). (#1388) Many user-facing error messages enhanced using latest features cli package. (#1337, thanks @olivroy!) Unit tests can now successfully run Linux flavors don’t locale utility (#1214). (#1350, thanks @bastistician!) ever ‘undetermined’ (\"und\") locale used, automatically mapped \"en\" locale. (#1394) Many unit tests added much increased test coverage many modified increase speed running test suite. (#1291, #1294, #1298, #1350, #1412) Added utility functions extract examples regularly building Quarto website (integration testing). (#1344)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-090","dir":"Changelog","previous_headings":"","what":"gt 0.9.0","title":"gt 0.9.0","text":"CRAN release: 2023-03-31","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.9.0","text":"summary_rows() grand_summary_rows() functions rewritten extensively allow flexibility providing aggregation information fns. documentation functions walk new ways can express aggregations. formatting cells new summary rows now easier thanks new fmt argument. can provide single formatting expression number list. dedicated documentation section formatting can walk . Furthermore, now option place summary rows top bottom group (summary_rows()) table (grand_summary_rows()) new side argument (#177, #270, #292, #545, #581, #784, #785, #840). (#1159, #1171) data_color() function completely overhauled make easier use also powerful. gains rows argument better constrain colorization take place. Instead use functions scales define coloring scheme, can now use method argument handle cases (otherwise, new fn argument allows color-mapping function used). new palette argument allows flexible input color palettes. One adjacent columns can receive coloring treatment way new target_columns argument. Coloring can now also applied row-wise fashion using direction = \"row\". Despite changes, older code still work revamped function (#116, #633, #637, #1103, #1119). (#1147) now much improved cols_merge() function! gained rows argument limiting body cells get merged together. pattern argument now advanced syntax. now following delimiters rules: (1) { } arranging single column values row-wise fashion, (2) << >> surround spans text removed contained { } yields missing value. new << >> delimiters help cases NA values present omitted merging process (#1167). (#1144, #1168) cols_label() function improved allowing formula expressions given .... two-sided formulas (e.g., <LHS> ~ <RHS>), left-hand side corresponds selections columns right-hand side evaluates single-length values label apply. Named arguments format <column name> = <label> still also valid input simple mappings column name label text. Also, ’s .fn argument, takes function applied provided label values (#1146). (#1255, #1256, #1265) Interactive HTML tables can now generated gt. Options enabling interactive table rendering available tab_options() also opt_interactive(). collection use_* arguments opt_interactive() allow control pagination, global search, filtering, sorting, . documentation within opt_interactive() demonstrates generate HTML tables interactive elements (#207). (#902, #1252, #1261, #1278, #1280) new function, cols_label_with(), added relabeling columns via functions. allows functions applied arbitrary sets columns, taking advantage tidyselect. ’s like dplyr::rename_with() gt table, doesn’t need unique names labeling (#701). (#1158, thank @christopherkenny!) added fmt_spelled_num() vec_fmt_spelled_num() numeric values transformed spelled numbers. values 0 100 can spelled according given locale value. example, value 23 rendered \"twenty-three\" locale English-language one (, provided ); Swedish locale provided (e.g., \"sv\"), output instead \"tjugotre\". (#1198) fmt_index() vec_fmt_index() functions added numeric values undergo transformation index values, usually based letters (depending locale chosen). example, value 5 rendered \"E\" locale English-language one. characters chosen indexing based character sets intended ordering (often leaving characters diacritical marks). (#1189) body cells contain URLs, new fmt_url() function can used make navigable links. several options provided control links styled (conventional underline style button-like text) (#609). (#1205, #1220, #1221) easily insert graphics body cells, added fmt_image() function. allows one images placed targeted cells. cells need contain reference image file, either: (1) complete http/https local paths files; (2) file names, common path can provided via path; (3) fragment file name, file_pattern argument helps compose entire file name path argument provides path information. (#1240) new fmt_flag() function helps inserting flag icon (multiple) body cells. input cells need contain 2-letter ISO 3166-1 country codes (e.g., Mauritius \"MU\" country code). function parse targeted body cells insert appropriate flag icon. Multiple flags can included per body cell separating country codes commas. (#1241, #1244, #1251) fmt_bins(), can format bin interval syntax (returned cut()) form presents better display table. ’s possible format values intervals fmt argument, , separator can modified sep argument. (#1250) new fmt_auto() function added automatically apply formatting various types way best suits data table provided. example, function attempt format numbers condensed optimal width, , currency values can detected (currency codes embedded column name) formatted correct way (#248). (#1176) Three text_*() functions added better enable transformations formatted text various table locations: text_replace(), text_case_when(), text_case_match(). (#1238) can use 15 system font stacks available gt! families themed system fonts widely available different computer systems. Examples include ‘System UI’ (default font stack), ‘Humanist’, ‘Neo-Grotesque’. new helper function system_fonts() can used access various font stack useful specifying font values cell_text() function. opt_table_font() function upgraded include stack argument (accepts keywords different font stacks). (#1275) now new family functions let deal multitude gt tables, . can create gt_group object multiple tables via gt_group() function, , split single table multiple gt_split(). advantages group tables bundled together like . apply options pertain tables yet still access individual tables give specialized modifications. print together ! HTML, table separated line break whereas paginated formats (e.g., RTF, Word, etc.) tables separated page breaks. (#1216, #1219, #1226, #1248, #1249, #1262, #1264) now choice Markdown engine use Markdown rendering (fmt_markdown() vec_fmt_markdown()) default default choice. markdown package can chosen instead commonmark perform conversions Markdown HTML LaTeX (’s now default). One many benefits change parsing subscripts (using ~x~) superscripts (using ^x^) (#725). (#1254) Added footnote formatting options footnotes.spec_ref footnotes.spec_ftr tab_options() exposed options new function called opt_footnote_spec(). Specifications footnote formatting can produced footnote marks alight targeted text within cells various locations table, , footnote marks appear table footer. (#1268, #1271) towny dataset added. provides fun, population-based dataset place names, URLs, coordinate information, population figures repetition (values different census years). (#1184, #1199) metro dataset new. 308 rows, corresponds different Paris Metro station (#1231). rx_adsl rx_addv datasets added. clinical trial toy datasets featured new vignette explains gt can used table generation Pharma space (#1145, #1200; thank @alex-lauer!).","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"documentation-enhancements-0-9-0","dir":"Changelog","previous_headings":"","what":"Documentation enhancements","title":"gt 0.9.0","text":"Addition new vignette (gt Clinical Tables) uses rx_adsl rx_addv datasets. (#1145, #1217, #1224; contributed @alex-lauer) examples documentation modernized using |> instead %>%. lot explanatory text improved rewriting. ordering documentation sections improved. functions little documentation (like text_transform()) greatly improved (#1087). (#1166, #1185, #1192) Several small documentation housekeeping updates. (#1133, #1134, #1135, #1136, #1190, #1206, #1218, #1242, #1246, #1258, #1260, #1266, #1270, #1276, #1281) Added citation file package. (#1128, #1277)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.9.0","text":"fmt_scientific() fmt_engineering() (vec_fmt_*() analogues) now exp_style argument defining exponent notation. default \"x10n\" options include using single letter (e.g., “e”, “E”, etc.), letter followed “1” signal minimum digit width one, “low-ten” using stylized “10” marker. functions now also force_sign_m force_sign_n arguments forcing + signs mantissa exponent. (#1178) now right--left (RTL) text handling gt automatically set appropriate alignment RTL text HTML output. done detection RTL script characters. (#697). (#1202) columns labeled (.e., label attribute), gt automatically use labels column labels (#656). (#1230) Tables Word output format now much better Markdown support (#1057, #1067, #1204). (#1142, #1263, #1274) Added \"double\" option border style cell_borders() (#1132). (#1137) countrypops dataset updated recent (January 2023) World Bank data revises population estimates brings final year 2021. examples, tests, articles using dataset also updated. (#1191) Fixed conflict tab_spanner_delim() cols_label() (#1130). (#1173) Added fix summary_rows() problem summary rows generated single group display summary rows . (#1188) HTML output tables longer contain two <thead> elements display header column labels (#1235). (#1237) Incorporated CSS fix superscripted footnote marks. Prior change, footnote marks never styled within gt tables rendered Quarto documents. (#1210) now remove knitr flags saving RTF file gtsave() function (#674). (#1153) Fixed LaTeX rendering tables using xelatex engine removing unneeded \"amsmath\" LaTeX package default set LaTeX dependencies. set now modifiable gt.latex_packages option (#751). (#1279) Fixed border-related issues gt tables published R Markdown Quarto documents (#1120). (#1234) Added quarto.use_bootstrap quarto.disable_processing options tab_options() control whether Quarto add Bootstrap classes gt table ignore gt table. (#1222, #1227) Fixed unintended appearance bottom border column spanner row CSS environments. (#1209) Fixed SCSS class .gt_footnote_marks ensure footnote mark consistent height baseline different CSS environments. (#1187) Fixed error SCSS class .gt_footnote wrong types padding specified. (#1236) Added frequency levels cli_abort() warnings throughout package (#1160). (#1169)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-080","dir":"Changelog","previous_headings":"","what":"gt 0.8.0","title":"gt 0.8.0","text":"CRAN release: 2022-11-16","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.8.0","text":"new function sub_values() subbing arbitrary text body cells, based value, regex, specialized function. ’s like supercharged find--replace gt table (#703). (#1066) want setting styles easy possible , end, ’ve added helpful new function: tab_style_body(). function bit like sub_values() bit like tab_style(). idea basic style attributes can set based values table body. can target body cells though value, regex, custom matching rules, , apply styles surrounding context (e.g., styling entire row column wherein match found). help file ?tab_style_body provides copious examples w/ eye catching visuals (#863). (#1108) fmt_date(), fmt_time(), fmt_datetime() functions improved much, don’t even know begin. fmt_datetime() function enhanced format argument accepts CLDR-style formatting patterns (much powerful flexible strptime() patterns). fmt_datetime() function detect pattern type given format. date_style time_style arguments still exist extended accept style keywords. now concept flexible date time formats locale-aware (locale argument new functions). info_date_style() info_time_style() functions enhanced give display tables style possibilities. goodness extends vec_fmt_*() variants (vec_fmt_date(), vec_fmt_time(), vec_fmt_datetime()). documentation overhauled provides many explanations examples edification (#531, #1052). (#1053) can now decimal alignment numeric values made possible new cols_align_decimal() function. function ensures columns targeted right-aligned, accounting notation supported, footnote marks don’t interfere (#139, #144, #560, #673). (#1058, #1092; assist inimitable @steveputman!) can easily add caption gt table (replace existing one) new convenient tab_caption() function (#1048). (#1051, thank @billdenney!) ’ve got gt table want value two table appear elsewhere R Markdown Quarto document. Previously, recreate way now can use extract_cells()! function extract vector cell data gt_tbl object. output vector cell data formatted way table. (#1045, #1047) as_raw_html() function useful generating HTML string table--HTML-email situations HTML embedding purposes (inline_css = TRUE option). CSS-inlining mostly fine, two major problems: (1) slow, (2) underlying R code underpowered just couldn’t keep changes SCSS styles. now solved integrating package uses juice JS library (call juicyjuice!). solution far performant correct (#455, #540, #837, #858, #915, #1093). (#1114) ’s now padding around HTML table! can even control left/right (container.padding.x) top/bottom (container.padding.y) padding values tab_options()! helpful since tables way close paragraphs text rendered HTML documents produced R Markdown Quarto (#590, #1105). (#1116) table stub can now freely merge columns using cols_merge*() collection functions. great want independently format stub columns bring together interesting ways. (#1122) ’ve added ability treat columns containing row names group names Markdown text. provides process_md argument gt() function. option taken (example ) supplied names treated ensure unique IDs later targeting (tab_style(), tab_footnote(), etc.) (#694). (#1097) find knowing ID values certain cells table (sometimes necessary adding footnotes, styles, etc.) new tab_info() function can help! Use gt object ’ll get informative table summarizes table’s ID values associated labels (#1102). (#1104) Much gt adding things table opposite (taking things away)? new family rm_*() functions (rm_header(), rm_stubhead(), rm_spanners(), rm_footnotes(), rm_source_notes(), rm_caption()) let us safely remove parts gt table. can advantageous instances one might obtain gt table though means (like another pkg) prefer excise parts (#790, #1005). (#1073) table stub column can now contents formatted fmt_*() functions. also added stub() helper function help select stub column (#747). (#1038) new formatter function fmt_roman() lets us easily format numbers Roman numerals (either uppercase lowercase letters). vec_fmt_roman() vector-formatting function also introduced . (#1035) data_color() function allows us color background cells based data, gt smartly chooses text color provides contrast text background. wanted improve feature now data_color() contrast_algo argument allows us choose two color contrast algorithms: \"apca\" (Accessible Perceptual Contrast Algorithm; new, default now) \"wcag\" (Web Content Accessibility Guidelines). (#1062) accessibility structurally-complicated gt tables (.e., multi-level headings, irregular headers, row groups, etc.) addressed work follows W3C WAI (Web Accessibility Initiative) guidance. Now, screen readers can better describe gt tables complex structures (#926). (#988, thanks @jooyoungseo!)","code":"dplyr::tibble(x = c(\"**a**\", \"b\", \"*c*\"), y = c(\"*A*\", \"*B*\", \"*B*\"), z = 1:3) %>%   gt(rowname_col = \"x\", groupname_col = \"y\", process_md = TRUE)"},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.8.0","text":"docx output format now better detected R Markdown Quarto (#1040). (#1084, thanks @cderv!) Replaced match.arg() calls rlang::arg_match() better error output (#672). (#1099, thanks @mojister!) Project website improvements; now doublet sites: (1) https://gt.rstudio.com (2) https://gt.rstudio.com/dev (#1074, thanks @ddsjoberg!) dependency stringr package removed replacing remaining stringr-based function calls package base-R equivalents. (#1043)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-070","dir":"Changelog","previous_headings":"","what":"gt 0.7.0","title":"gt 0.7.0","text":"CRAN release: 2022-08-25","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.7.0","text":"can now export gt tables Word documents. thanks @thebioengineer (Ellis Hughes!) made type output work gtsave() (writes .docx file) also as_word() (gives OOXML string) (#121, #929). (#962, #986, #1016) whole new family vector formatting functions (form vec_fmt_*()) entered package! , columns formatting fun? vectors need formatting, 14 functions, adapted corresponding fmt_*() functions. can control output style resulting character vector output argument. can either \"auto\" (default), \"plain\", \"html\", \"latex\", \"rtf\", \"word\". knitr rendering (.e., Quarto R Markdown), \"auto\" option choose correct output value; great incorporating formatted values inline text. (#899, #995) ’s now incredibly easy colorful stylish tables thanks new opt_stylize() function. provide carefully curated set background colors, line colors, line styles. six styles six color variations, giving 36 combinations style color choose (#238). (#987) tab_stub_indent() function added allow fine control row label indentation. (#999, #1002) fmt_duration() function now available formatting values time duration values whether input values numbers difftime class. provides wide array options can get formatting time duration values just right (#403). (#916) Generating PNG files gt tables using gtsave() now way better due move away webshot sequel package webshot2 (#621, #885). (#985) number accessibility enhancements HTML table outputs undertaken make gt one accessible table packages around (#678, #679, #680). (#977, #978, #979, #981; thank , @jooyoungseo, ) Errors warnings, though don’t often like receive , look much better now since ’ve integrated cli package gt! (#963)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.7.0","text":"can now supply data adjacent columns user-supplied aggregation functions summary_rows() grand_summary_rows() (#383, #690, #952). (#1018) Initial alignments table stub now intelligently determined gt() examining content column (\"rowname_col\") comprise stub. values predominantly number-like right alignment chosen, otherwise row labels left aligned. (#999) Enhanced automatic column alignment (set \"auto\" default gt() function) probing contents columns. ensures string-based dates/times/datetimes receive better appearance formatting. (#997) gt tables longer break table numbering R Markdown Quarto documents. (#1003, thanks @cscheid!) as_latex() documentation updated provide guidance necessary LaTeX dependencies. (#1022, thanks @coatless!) Fixed bug footnote marks rendered stub column representing row groups (#1001). (#1014) Using gtsave() Quarto R Markdown code chunk longer generate output, good since don’t want (#974). (#1011) Fixed issue footnote marks set directly cell text generated fmt_markdown() (#893, #993). (#1013) testthat tests migrated 3rd Edition testthat. Also, tests run much faster now. (#959)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-060","dir":"Changelog","previous_headings":"","what":"gt 0.6.0","title":"gt 0.6.0","text":"CRAN release: 2022-05-24","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.6.0","text":"RTF output support suitable Pharma users: (1) table styling now defaults look far less table borders, common Pharma-based applications; (2) RTF table generation can make use new page-layout options (page.*) added tab_options() function (e.g., page.orientation, page.numbering, etc.) (#311, #653). (#927) tab_footnote() function now allows non-location footnote making locations argument optional; footnotes declared way notes precede location-based notes footer area (#879). (#925) fmt_partsper() function added can format values high-ratio, dimensionless quantities (e.g., \"per-mille\", \"ppm\", etc.). less common percentage values less important (#608). (#914) sub_*() group functions added make simple common substitutions data gt table --much effort. functions added : sub_missing(), sub_zero(), sub_small_vals(), sub_large_vals(). sub_missing() function replaces fmt_missing() (deprecates latter) (#904, #910, #911). (#912)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-050","dir":"Changelog","previous_headings":"","what":"gt 0.5.0","title":"gt 0.5.0","text":"CRAN release: 2022-04-21","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.5.0","text":"tab_spanner() tab_spanner_delim() functions now support addition column spanners unlimited levels (previously, single level spanner column labels possible add) (#746). (#905) now support Indian numbering system, making placement digit-grouping separators correspond thousand, lakh, crore, higher quantities. available several fmt_*() functions (fmt_number(), fmt_integer(), fmt_currency(), fmt_percent(), fmt_fraction()) exposed system argument two options \"intl\" (international, default) \"ind\" (Indian).","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.5.0","text":"Enhanced cols_merge_uncert() function different lower upper uncertainty values used (specifying two columns col_uncert argument) (#884). (#888) Honor locale setting initial gt() call rendering summary rows (#906). (#907) Fixed issue styles spanned multiple columns rows summary block fully rendered (#859). (#924) Improved LaTeX rendering certain characters (e.g, \\, ~, &, etc.). (#903) Aggregations summary_rows() grand_summary_rows() might return NaN (common case using mean(., na.rm = TRUE) -NA column) now return NA. removes evaluation error otherwise occur provides opportunity replace NA explanatory replacement string (#471, #827). (#887)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-040","dir":"Changelog","previous_headings":"","what":"gt 0.4.0","title":"gt 0.4.0","text":"CRAN release: 2022-02-15","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.4.0","text":"now ability display row group labels column stub (alternative grouping labels appearing header rows). made possible new option row_group.as_column tab_options() (default keeps preexisting behavior) (#291). (#855) table footer (can contain footnotes source notes) now numerous layout options tab_options(): footnotes.multiline, footnotes.sep, source_notes.multiline, source_notes.sep. *.multline options, can control whether notes span across separate lines (TRUE, default) kept together paragraph (FALSE). latter layout option, can control separation consecutive notes *.sep options (default \" \"). work done also fixes long-standing issues footer output LaTeX RTF formats (#593, #833). (#864) fmt_fraction() formatter added, allowing flexible formatting numerical values mixed fractions configurable accuracy (#402). (#753) Added opt_horizontal_padding() opt_vertical_padding() functions easily expand contract HTML table horizontal vertical directions (#868). (#882) now locale argument gt() function. set, formatter functions like fmt_number() automatically use global locale formatting. also remains option override global locale non-NULL value set locale within fmt_*() call (#682). (#866)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.4.0","text":"now flexibility, improved documentation, testing/reliability date/time formatting functions (fmt_date(), fmt_time(), fmt_datetime()). Now, Date POSIXct columns allowed formatted functions. fmt_datetime(), can even supply format code generation custom dates/times (#612, #775, #800). (#801) Footnote marks HTML tables now improved appearance. slightly larger, set better text follow, , asterisks specially handled sizing consistent marks (#511). (#876) improving support color value inputs, gt now allows shorthand hexadecimal color values (like #333) use transparent CSS color keyword (#839, #856). (#870) rendering percent signs HTML output changed problematic HTML entity &percnt; simply %. solves issues tables incorrectly rendering percent signs situations (#657, #686). (#871) values supplied within cells_title() now checked rigorously, erroring providing actionable messaging stopping occur (#424). (#783) Added missing column entry documentation gtcars dataset. Thanks, @luisDVA providing fix! (#883)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-031","dir":"Changelog","previous_headings":"","what":"gt 0.3.1","title":"gt 0.3.1","text":"CRAN release: 2021-08-07","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-3-1","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.3.1","text":"now force_sign argument several numeric formatting functions (fmt_number(), fmt_integer(), fmt_scientific(), fmt_engineering(), fmt_percent(), fmt_currency(), fmt_bytes()). makes possible force appearance positive sign positive values (#773). (#793) ’s now possible add padding column labels heading locations HTML tables two new arguments added tab_options(): column_labels.padding heading.padding. Several options already exist easily changing vertical padding certain locations, , additions make possible fully alter padding top bottom (without resorting using CSS) (#770). (#795) whitespace argument added cell_text() provides many options making whitespace easier handle HTML output tables (#714). (#797)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.3.1","text":"Fixed LaTeX rendering tables stub; now data row cells correctly laid . LaTeX output tables now properly render summary rows. addition, grand summary rows now rendered LaTeX outputs (previously, grand summary rows ignored). clears long-standing issue #625. (#768) Titles optional subtitles LaTeX output tables improved appearance, underlying code rewritten guard edge cases might lead failing LaTeX output. (#779) data argument cols_label() cols_width() functions renamed .data avoid partial matching issue (raised #715). (#772) Fixed bug styles may applied correctly summary row cells HTML output tables (#752). (#782) Incorporated full use X11 color names styling HTML tables. Now, named colors like gray50 won’t throw error. Additionally, CSS3 colors equivalent X11 (like Crimson RebeccaPurple) now also just work (#712). (#787) Fixed bug occurs following rare circumstance: using summary_rows() stub, new column generated internally given name rowname; can conflict column name, generating duplicate column names erroring instant (#749). (#792) image generation functions local_image() web_image() enhanced multiple image paths/URLs can now handled without errors. Thanks, @primaj initial work #738. Fixes #510. (#803) Fixed bug occurs using font cell_text() along styles. Fixes #661 #802. (#805) Implemented fix situation tab_style() used along cells_summary() location , also, row_group_order() used reorder row groups. resulted non-application style targeted summary cells (#812). (#814)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-030","dir":"Changelog","previous_headings":"","what":"gt 0.3.0","title":"gt 0.3.0","text":"CRAN release: 2021-05-12 release focuses improvements two main areas: RTF table generation now fit use following extensive rewrite internal RTF rendering functions. RTF table output gtsave(..., \"<file>.rtf\") as_rtf() now much feature parity compared HTML tables; can now add summary rows, format table text Markdown via fmt_markdown(), expect tables look acceptable Word text editors RTF-compatible. References columns (way columns argument many gt functions) now better adhere tidyselect semantics. Instead using columns = vars(, b), now use columns = c(, b) (columns = c(\"\", \"b\") also works, type expression always option gt). tidyselect idioms also work; things like using () target columns (e.g., gt(exibble) %>% cols_hide(columns = (.numeric)) hide numeric columns) negation (e.g., columns = -c(, b)) function expected.","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"breaking-changes-and-deprecations-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking changes and deprecations","title":"gt 0.3.0","text":"Column labels subordinate column spanner labels alignment forced \"center\" now specialized alignment column labels spanners. need old behavior, tab_style() can used along cell_text(align = \"center\") columns live spanners. (#662) automatic alignment integer values changed \"center\" \"right\". correct , use tab_style() cell_text(align = \"center\") affected columns. (#662) part tidyselect changes made release, using columns = TRUE (mean columns considered) now replaced columns = everything(). Using former result warning message. (#718) vars() still reexported gt, use columns argument (present large number functions) deprecated warning message appear used. later release, can expected vars() longer reexported. (#718) others_label argument tab_row_group() deprecated since confusing use. specify default label row groups, course action now use tab_options(row_group.default_label = <label>). (#699)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.3.0","text":"RTF table output via gtsave(..., \"<file>.rtf\") as_rtf() produce robust tables (allowing use summary_rows(), fmt_markdown(), etc.). tables generated RTF can now take advantage cols_width() flexible modifications column widths. (#638 #696) functions columns argument can now take advantage gt’s full adherence tidyselect semantics (use columns = c(, b) columns = c(\"\", \"b\") instead columns = vars(, b)). (#718) New location helper functions added make possible style locations add footnotes inaccessible locations; cells_stub_summary(), cells_stub_grand_summary(), cells_footnotes(), cells_source_notes(). Note footnotes declared latter two functions. (#737) cols_unhide() function added complement cols_hide() function. useful provided gt_tbl object without source data code recreate hidden columns made visible. (#710) new formatting function fmt_bytes() helps transform numerical values byte sizes human readable units. (#750) new column merging function, cols_merge_n_pct(), works merge count column percentage column together. function automatically hide col_pct column default (can changed setting autohide = FALSE). (#683) Added caption argument gt(). brings caption support gt tables R Markdown bookdown documents. (#689)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"gt 0.3.0","text":"accounting option now available fmt_percent() fmt_number() formatting functions (previously present fmt_currency()). (#756) RTF documents generated as_rtf() gtsave(..., filename = \"<file>.rtf\"), now page_numbering option adding page numbers either \"footer\" \"header\" areas (default \"none\"). (#755) tab_spanner_delim() gained split argument govern whether delimiter splitting occur \"first\" \"last\" instance delim. example, column name \".b.c\" present split = \"first\" spanner column label \"\" associated column label \"b.c\"; split = \"last\" spanner column \".b\" \"c\" labels. (#699) Added id argument tab_spanner() tab_row_group(), useful later access locations (especially spanner row group labels complicated). (#665, #699) HTML table generation much faster due efforts optimize HTML code generation building/rendering phase. (#664)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"gt 0.3.0","text":"getting HTML text gt table as_raw_html(..., inline_css = FALSE), <style> tag content longer omitted. (#718) Fixed two bugs tab_row_group(): (1) incorrect reordering rows (Issue #717), (2) spurious warnings multiple calls (Issue #675). (#699) tab_spanner_delim() gather = TRUE work reliably (Issue #626) fixed along work done overhaul function. (#665) Correction made representation PEN (Peruvian Nuevo Sol) currency. (#663) Fix gtsave() saving image specifying path value. (#592)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-022","dir":"Changelog","previous_headings":"","what":"gt 0.2.2","title":"gt 0.2.2","text":"CRAN release: 2020-08-05","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"new-features-0-2-2","dir":"Changelog","previous_headings":"","what":"New features","title":"gt 0.2.2","text":"new opt_table_font() function makes possible define custom font entire gt table. standard fallback fonts still set default font defined take precedence. still different fonts select locations table, need use tab_style() conjunction cell_text() helper function. new google_font() helper function provides option supplying font available Google Fonts service (addition using system fonts font argument). Using info_google_fonts() function provide table set helpful font recommendations Google Fonts catalog. new default_fonts() functions provides helpful vector system fallback fonts works well defining vector fonts. (#591) new opt_css() function makes allows addition custom CSS gt table. CSS added compiled CSS gt generates automatically gt_tbl object transformed HTML output table. can supply css vector lines single string. css() function re-exported htmltools make easier build CSS style declarations. (Also #591) Setting widths table columns now easier dependable cols_width(). Widths can expressed units pixels (easily set use px() helper function), percentages (pct() helper function useful), mixture two. function takes consideration whether overall table width provided tab_options(table.width = ...). Providing pixel widths columns serves override table width defined (yielding columns exact widths specified). (#561) new options numeric formatting: (1) using significant figures (n_sigfig fmt_number), (2) ability retain/drop trailing decimal marks (drop_trailing_dec_mark fmt_number(), fmt_percent(), fmt_currency()). Thank @drolejoel suggestion #535! (#546). new scale_values argument fmt_percent() makes easy use values already scaled (just require percent mark). Thank @djohn215 suggestion #559. (#565) Font weights expressed numeric values (e.g., 400, 600, etc.) cell_text()’s weight argument now works properly. (#591)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"minor-improvements-and-bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"gt 0.2.2","text":"data_color() function rewritten improve performance (#543). (#576) Restore ability row striping stub cells (tab_option()’s row.striping.include_stub = TRUE). Thanks @gergness creating PR #537, prompted final fix. (#564)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-021","dir":"Changelog","previous_headings":"","what":"gt 0.2.1","title":"gt 0.2.1","text":"CRAN release: 2020-05-23 summary_rows() grand_summary_rows() longer incorrectly calculate summary values cases rows aren’t already sorted group (#556). Ensure compatibility tibble 3.0.0. (#557) Adapt tests changes dependent packages. (#575)","code":""},{"path":"https://gt.rstudio.com/news/index.html","id":"gt-0205","dir":"Changelog","previous_headings":"","what":"gt 0.2.0.5","title":"gt 0.2.0.5","text":"CRAN release: 2020-03-31 New package 80 exported functions building display tables","code":""},{"path":[]}]
