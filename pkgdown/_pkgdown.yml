url: https://gt.rstudio.com

destination: docs

home:
  strip_header: true

template:
  bootstrap: 5

authors:
  JooYoung Seo:
    href: "https://jooyoungseo.github.io/"

news:
  releases:
  - text: "Version 0.10.0"
    href: https://posit.co/blog/new-features-in-gt-0-10-0/
  - text: "Version 0.9.0"
    href: https://posit.co/blog/?search=gt%2520%25200.9.0
  - text: "Version 0.8.0"
    href: https://posit.co/blog/new-features-upgrades-in-gt-0-8-0/
  - text: "Version 0.7.0"
    href: https://posit.co/blog/all-new-things-in-gt-0-7-0/
  - text: "Version 0.6.0"
    href: https://posit.co/blog/changes-for-the-better-in-gt-0-6-0/

development:
  mode: release

reference:
  - title: Table creation
    desc: >
      All **gt** tables begin with a call to `gt()`, where we would supply the
      input data table (data frame or tibble) and some basic options for
      creating a stub (`rowname_col`) and row groups (`groupname_col`). We
      can also introduce a grouped tibble (via `dplyr::group_by()`) for
      more precise divisions of rows into row groups. `gt_preview()`
      is great for getting a nicely-formatted preview of a data table
      (defaulting to the first 5 rows and the last row).
    contents:
    - gt
    - gt_preview

  - title: Creating or modifying parts of a table
    desc: >
      A **gt** table can contain a few useful parts for conveying additional
      information. These include a header (with a titles and subtitle), a
      footer (with footnotes and source notes), and additional areas for
      labels (row group labels, column spanner labels, the stubhead label).
      We can modify the look of table parts more generally with
      `tab_options()` and perform styling on targeted table locations with
      `tab_style()`.
    contents:
    - tab_header
    - tab_spanner
    - tab_spanner_delim
    - tab_row_group
    - tab_stubhead
    - tab_stub_indent
    - tab_footnote
    - tab_source_note
    - tab_caption
    - tab_style
    - tab_style_body
    - tab_options
    - tab_info

  - title: Formatting column data
    desc: >
      Columns of data can be formatted with the `fmt_*()` functions. We can
      specify the rows of these columns quite precisely with the `rows`
      argument. We get to apply these functions exactly once to each data
      cell (last call wins). Need to do custom formatting? Use the `fmt()`
      function and define your own formatter within (or, create a wrapper
      with `fmt()` if you prefer). The `sub_*()` functions allow you to perform
      substitution operations and `data_color()` provides a lot of power for
      colorizing body cells based on their data values.
    contents:
    - fmt_number
    - fmt_integer
    - fmt_scientific
    - fmt_engineering
    - fmt_percent
    - fmt_partsper
    - fmt_fraction
    - fmt_currency
    - fmt_roman
    - fmt_index
    - fmt_spelled_num
    - fmt_bytes
    - fmt_date
    - fmt_time
    - fmt_datetime
    - fmt_duration
    - fmt_bins
    - fmt_tf
    - fmt_markdown
    - fmt_units
    - fmt_chem
    - fmt_url
    - fmt_email
    - fmt_image
    - fmt_flag
    - fmt_country
    - fmt_icon
    - fmt_passthrough
    - fmt_auto
    - fmt
    - sub_missing
    - sub_zero
    - sub_small_vals
    - sub_large_vals
    - sub_values
    - data_color

  - title: Text transformation
    desc: >
      The `text_*()` functions take cell data that are solidified into
      strings and allow for flexible transformations of those string values.
      Whereas the `fmt_*()` and `sub_*()` are phases 1 and 2 of cell data
      metamorphoses, the text transformation functions are the final phase,
      acting on strings generated by formatting and substitution functions
      with no reference to the source values.
    contents:
    - text_replace
    - text_case_when
    - text_case_match
    - text_transform

  - title: Modifying columns
    desc: >
      The `cols_*()` functions allow for modifications that act on entire
      columns. This includes alignment of the data in columns
      (`cols_align()`), hiding columns from view (`cols_hide()`),
      re-labeling the column labels (`cols_label()`), merging two columns
      together (the `cols_merge*()` functions), and moving columns around
      (the `cols_move*()` functions).
    contents:
    - cols_align
    - cols_align_decimal
    - cols_width
    - cols_label
    - cols_label_with
    - cols_units
    - cols_add
    - cols_nanoplot
    - cols_move
    - cols_move_to_start
    - cols_move_to_end
    - cols_hide
    - cols_unhide
    - cols_merge
    - cols_merge_uncert
    - cols_merge_range
    - cols_merge_n_pct

  - title: Adding or modifying rows
    desc: >
      There are two functions that will add rows to a **gt** table:
      `summary_rows()` and `grand_summary_rows()`. These functions will both add
      summary rows but one will do it in a groupwise fashion while the other
      will create grand summary rows. The `row_group_order()` function lets us
      modify the ordering of any row groups in the table.
    contents:
    - summary_rows
    - grand_summary_rows
    - row_group_order
    - rows_add

  - title: Removing parts of a table
    desc: >
      The `rm_*()` functions let us safely remove parts of a **gt** table. This
      can be advantageous in those instances where you would obtain a **gt**
      table but prefer to excise some parts of it.
    contents:
    - rm_header
    - rm_stubhead
    - rm_spanners
    - rm_footnotes
    - rm_source_notes
    - rm_caption

  - title: Helper functions
    desc: >
      An assortment of helper functions is available in the **gt** package.
      The various `cells_*()` functions are used for targeting cells with the
      `locations` argument of `tab_footnote()`, `tab_style()`, and
      `text_transform()`, `text_case_match()`, and `text_case_when()`.
      The `cell_*()` functions are used exclusively with `tab_style()`'s `style`
      argument. `px()` & `pct()` are useful there for specifying
      units in pixels or percentages. The `md()` and `html()` helpers can used
      be during label creation with `tab_header()`, `tab_footnote()`,
      `tab_spanner()`, `tab_stubhead()`, and `tab_source_note()`.
    contents:
    - md
    - html
    - px
    - pct
    - from_column
    - currency
    - unit_conversion
    - nanoplot_options
    - adjust_luminance
    - stub
    - row_group
    - has_concept("location helper functions")
    - cell_text
    - cell_fill
    - cell_borders
    - random_id
    - escape_latex
    - gt_latex_dependencies
    - google_font
    - default_fonts
    - system_fonts

  - title: Image addition utilities
    desc: >
      We can add images into a **gt** table with the help of the `*_image()`
      functions. Two common ways to do this: (1) use `text_transform()` to
      insert images into data cells, (2) use any function that creates
      new labels (e.g., `tab_header()`) and use a `*_image()` function
      within the `html()` helper.
    contents:
    - web_image
    - local_image
    - ggplot_image
    - test_image

  - title: Table options
    desc: >
      With the `opt_*()` functions, we have an easy way to set commonly-used
      table options without having to use `tab_options()` directly. Like, we can
      quickly add a stylizing theme with `opt_stylize()`, get an interactive
      HTML table with `opt_interactive()`, modify the appearance of footnote
      marks with `opt_footnote_marks()` and `opt_footnote_spec()`, turn on
      row striping, change the alignment of the table header, and so much more.
    contents:
    - opt_stylize
    - opt_interactive
    - opt_footnote_marks
    - opt_footnote_spec
    - opt_row_striping
    - opt_align_table_header
    - opt_vertical_padding
    - opt_horizontal_padding
    - opt_all_caps
    - opt_table_lines
    - opt_table_outline
    - opt_table_font
    - opt_css

  - title: Informational tables for reference
    desc: >
      These `info_*()` functions present us with **gt** tables containing
      useful information. So far, we can get reference information on
      date styles (`info_date_style()`), on time styles
      (`info_time_style()`), on a huge number of color palettes
      (`info_paletteer()`), on currencies (`info_currencies()`), on
      all of the different locales supported in the formatter functions
      (`info_locales()`), and on our recommendations for which Google Fonts
      to try in your tables (`info_google_fonts()`).
    contents:
    - info_date_style
    - info_time_style
    - info_currencies
    - info_locales
    - info_paletteer
    - info_google_fonts
    - info_flags
    - info_icons
    - info_unit_conversions

  - title: Shiny
    desc: >
      Shiny is great for building interactive web apps with R. There's
      really nothing quite like it. The **gt** package includes two
      functions that work nicely with Shiny: a table render function
      `render_gt()` (for the `server`) and a table output element
      `gt_output()` (for the `ui`).
    contents:
    - render_gt
    - gt_output

  - title: Export and extraction functions
    desc: >
      There may come a day when you need to export a **gt** table to some
      specific format. A great function for that is `gtsave()`, which allows
      us to save the table as a standalone HTML, LaTeX, RTF, .docx, or even an
      image file. Some other functions give us table code as a character vector
      (e.g., `as_raw_html()` and more). Did you use the `summary_rows()`
      function and wish you had that summary data in a tibble? You can get it
      out with `extract_summary()`. Want to extract already-formatted cells
      from the table into a vector? Do it with `extract_cells()`! It's even
      possible to extract the body of a table as a data frame during various
      'build' stages (do this with `extract_body()`).
    contents:
    - gtsave
    - as_raw_html
    - as_latex
    - as_rtf
    - as_word
    - as_gtable
    - extract_body
    - extract_summary
    - extract_cells

  - title: Working with table groups
    desc: >
      Sometimes you want to deal with a multitude of **gt** tables, all at once.
      There are some advantages to having a group of tables bundled together in
      a `gt_group` object. You could apply options that pertain to all tables
      yet still access the individual tables to give them their own specialized
      modifications. They all print altogether at once too! For HTML, each table
      will be separated by a line break whereas in paginated formats the tables
      are separated by page breaks.
    contents:
    - gt_group
    - gt_split
    - grp_pull
    - grp_add
    - grp_clone
    - grp_replace
    - grp_rm
    - grp_options

  - title: Vector formatting
    desc: >
      Why should columns have all the formatting fun? If you have vectors in
      need of formatting, we have a set of `vec_fmt_*()` functions that have
      been adapted from the corresponding `fmt_*()` functions.
    contents:
    - vec_fmt_number
    - vec_fmt_integer
    - vec_fmt_scientific
    - vec_fmt_engineering
    - vec_fmt_percent
    - vec_fmt_partsper
    - vec_fmt_fraction
    - vec_fmt_currency
    - vec_fmt_roman
    - vec_fmt_index
    - vec_fmt_spelled_num
    - vec_fmt_bytes
    - vec_fmt_date
    - vec_fmt_time
    - vec_fmt_datetime
    - vec_fmt_duration
    - vec_fmt_markdown

  - title: Built in datasets
    desc: >
      The **gt** package is equipped with twelve datasets that come in all
      shapes and sizes. Use them to experiment with the package! Many examples
      in the internal help documents use these datasets to quickly demonstrate
      the awesome features of **gt**.
    contents:
    - countrypops
    - sza
    - gtcars
    - sp500
    - pizzaplace
    - exibble
    - towny
    - peeps
    - films
    - metro
    - gibraltar
    - constants
    - illness
    - reactions
    - photolysis
    - nuclides
    - rx_adsl
    - rx_addv

redirects:
  - ["articles/intro-creating-gt-tables.html", "articles/gt.html"]
