% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modify_columns.R
\name{cols_unhide}
\alias{cols_unhide}
\title{Unhide one or more columns}
\usage{
cols_unhide(data, columns)
}
\arguments{
\item{data}{\emph{The gt table data object}

\verb{obj:<gt_tbl>} // \strong{required}

This is the \strong{gt} table object that is commonly created through use of the
\code{\link[=gt]{gt()}} function.}

\item{columns}{\emph{Columns to target}

\verb{<column-targeting expression>} // \emph{default:} \code{everything()}

The columns to unhide in the output display table. Can either be a series
of column names provided in \code{c()}, a vector of column indices, or a select
helper function (e.g. \code{\link[=starts_with]{starts_with()}}, \code{\link[=ends_with]{ends_with()}}, \code{\link[=contains]{contains()}},
\code{\link[=matches]{matches()}}, \code{\link[=num_range]{num_range()}}, and \code{\link[=everything]{everything()}}).}
}
\value{
An object of class \code{gt_tbl}.
}
\description{
\code{cols_unhide()} allows us to take one or more hidden columns (usually done
via \code{\link[=cols_hide]{cols_hide()}}) and make them visible in the final output table. This may
be important in cases where the user obtains a \code{gt_tbl} object with hidden
columns and there is motivation to reveal one or more of those.
}
\details{
The hiding and unhiding of columns is internally a rendering directive, so,
all columns that are 'hidden' are still accessible and useful in any
expression provided to a \code{rows} argument. The \code{cols_unhide()} function
quietly changes the visible state of a column (much like the \code{\link[=cols_hide]{cols_hide()}}
function) and doesn't yield warnings or messages when changing the state of
already-visible columns.
}
\section{Examples}{


Let's use a small portion of the \code{\link{countrypops}} dataset to create a \strong{gt}
table. We'll hide the \code{country_code_2} and \code{country_code_3} columns with
\code{\link[=cols_hide]{cols_hide()}}.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{tab_1 <-
  countrypops |>
  dplyr::filter(country_name == "Singapore") |>
  dplyr::slice_tail(n = 5) |>
  gt() |>
  cols_hide(columns = c(country_code_2, country_code_3))

tab_1
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_cols_unhide_1.png" alt="This image of a table was generated from the first code example in the `cols_unhide()` help file." style="width:100\%;">
}}

If the \code{tab_1} object is provided without the code or source data to
regenerate it, and, the user wants to reveal otherwise hidden columns then
\code{cols_unhide()} becomes useful.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{tab_1 |> cols_unhide(columns = country_code_2)
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_cols_unhide_2.png" alt="This image of a table was generated from the second code example in the `cols_unhide()` help file." style="width:100\%;">
}}
}

\section{Function ID}{

5-13
}

\section{Function Introduced}{

\code{v0.3.0} (May 12, 2021)
}

\seealso{
\code{\link[=cols_hide]{cols_hide()}} to perform the inverse operation.

Other column modification functions: 
\code{\link{cols_add}()},
\code{\link{cols_align}()},
\code{\link{cols_align_decimal}()},
\code{\link{cols_hide}()},
\code{\link{cols_label}()},
\code{\link{cols_label_with}()},
\code{\link{cols_merge}()},
\code{\link{cols_merge_n_pct}()},
\code{\link{cols_merge_range}()},
\code{\link{cols_merge_uncert}()},
\code{\link{cols_move}()},
\code{\link{cols_move_to_end}()},
\code{\link{cols_move_to_start}()},
\code{\link{cols_nanoplot}()},
\code{\link{cols_units}()},
\code{\link{cols_width}()}
}
\concept{column modification functions}
