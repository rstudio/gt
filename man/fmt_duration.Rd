% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/format_data.R
\name{fmt_duration}
\alias{fmt_duration}
\title{Format numeric or duration values as styled time duration strings}
\usage{
fmt_duration(
  data,
  columns = everything(),
  rows = everything(),
  input_units = NULL,
  output_units = NULL,
  duration_style = c("narrow", "wide", "colon-sep", "iso"),
  trim_zero_units = TRUE,
  max_output_units = NULL,
  pattern = "{x}",
  use_seps = TRUE,
  sep_mark = ",",
  force_sign = FALSE,
  system = c("intl", "ind"),
  locale = NULL
)
}
\arguments{
\item{data}{\emph{The gt table data object}

\verb{obj:<gt_tbl>} // \strong{required}

This is the \strong{gt} table object that is commonly created through use of the
\code{\link[=gt]{gt()}} function.}

\item{columns}{\emph{Columns to target}

\code{\link[=rows-columns]{<column-targeting expression>}} // \emph{default:} \code{everything()}

Can either be a series of column names provided in \code{c()}, a vector of
column indices, or a select helper function (e.g. \code{\link[=starts_with]{starts_with()}},
\code{\link[=ends_with]{ends_with()}}, \code{\link[=contains]{contains()}}, \code{\link[=matches]{matches()}}, \code{\link[=num_range]{num_range()}} and \code{\link[=everything]{everything()}}).}

\item{rows}{\emph{Rows to target}

\code{\link[=rows-columns]{<row-targeting expression>}} // \emph{default:} \code{everything()}

In conjunction with \code{columns}, we can specify which of their rows should
undergo formatting. The default \code{\link[=everything]{everything()}} results in all rows in
\code{columns} being formatted. Alternatively, we can supply a vector of row
captions within \code{c()}, a vector of row indices, or a select helper
function (e.g. \code{\link[=starts_with]{starts_with()}}, \code{\link[=ends_with]{ends_with()}}, \code{\link[=contains]{contains()}}, \code{\link[=matches]{matches()}},
\code{\link[=num_range]{num_range()}}, and \code{\link[=everything]{everything()}}). We can also use expressions to filter
down to the rows we need (e.g., \verb{[colname_1] > 100 & [colname_2] < 50}).}

\item{input_units}{\emph{Declaration of duration units for numerical values}

\verb{scalar<character>} // \emph{default:} \code{NULL} (\code{optional})

If one or more selected columns contains numeric values (not \code{difftime}
values, which contain the duration units), a keyword must be provided for
\code{input_units} for \strong{gt} to determine how those values are to be
interpreted in terms of duration. The accepted units are: \code{"seconds"},
\code{"minutes"}, \code{"hours"}, \code{"days"}, and \code{"weeks"}.}

\item{output_units}{\emph{Choice of output units}

\verb{mult-kw:[weeks|days|hours|minutes|seconds]} // \emph{default:} \code{NULL} (\code{optional})

Controls the output time units. The default, \code{NULL}, means that \strong{gt} will
automatically choose time units based on the input duration value. To
control which time units are to be considered for output (before trimming
with \code{trim_zero_units}) we can specify a vector of one or more of the
following keywords: \code{"weeks"}, \code{"days"}, \code{"hours"}, \code{"minutes"}, or
\code{"seconds"}.}

\item{duration_style}{\emph{Style for representing duration values}

\verb{singl-kw:[narrow|wide|colon-sep|iso]} // \emph{default:} \code{"narrow"}

A choice of four formatting styles for the output duration values. With
\code{"narrow"} (the default style), duration values will be formatted with
single letter time-part units (e.g., 1.35 days will be styled as
\code{"1d 8h 24m"}). With \code{"wide"}, this example value will be expanded to
\code{"1 day 8 hours 24 minutes"} after formatting. The \code{"colon-sep"} style will
put days, hours, minutes, and seconds in the \code{"([D]/)[HH]:[MM]:[SS]"}
format. The \code{"iso"} style will produce a value that conforms to the ISO
8601 rules for duration values (e.g., 1.35 days will become \code{"P1DT8H24M"}).}

\item{trim_zero_units}{\emph{Trimming of zero values}

\verb{scalar<logical>|mult-kw:[leading|trailing|internal]} // \emph{default:} \code{TRUE}

Provides methods to remove output time units that have zero values. By
default this is \code{TRUE} and duration values that might otherwise be
formatted as \code{"0w 1d 0h 4m 19s"} with \code{trim_zero_units = FALSE} are instead
displayed as \code{"1d 4m 19s"}. Aside from using \code{TRUE}/\code{FALSE} we could
provide a vector of keywords for more precise control. These keywords are:
(1) \code{"leading"}, to omit all leading zero-value time units (e.g., \code{"0w 1d"}
-> \code{"1d"}), (2) \code{"trailing"}, to omit all trailing zero-value time units
(e.g., \code{"3d 5h 0s"} -> \code{"3d 5h"}), and \code{"internal"}, which removes all
internal zero-value time units (e.g., \code{"5d 0h 33m"} -> \code{"5d 33m"}).}

\item{max_output_units}{\emph{Maximum number of time units to display}

\code{scalar<numeric|integer>(val>=1)} // \emph{default:} \code{NULL} (\code{optional})

If \code{output_units} is \code{NULL}, where the output time units are unspecified
and left to \strong{gt} to handle, a numeric value provided for
\code{max_output_units} will be taken as the maximum number of time units to
display in all output time duration values. By default, this is \code{NULL} and
all possible time units will be displayed. This option has no effect when
\code{duration_style = "colon-sep"} (only \code{output_units} can be used to
customize that type of duration output).}

\item{pattern}{\emph{Specification of the formatting pattern}

\verb{scalar<character>} // \emph{default:} \code{"{x}"}

A formatting pattern that allows for decoration of the formatted value. The
formatted value is represented by the \code{{x}} (which can be used multiple
times, if needed) and all other characters will be interpreted as string
literals.}

\item{use_seps}{\emph{Use digit group separators}

\verb{scalar<logical>} // \emph{default:} \code{TRUE}

An option to use digit group separators. The type of digit group separator
is set by \code{sep_mark} and overridden if a locale ID is provided to \code{locale}.
This setting is \code{TRUE} by default.}

\item{sep_mark}{\emph{Separator mark for digit grouping}

\verb{scalar<character>} // \emph{default:} \code{","}

The string to use as a separator between groups of digits. For example,
using \code{sep_mark = ","} with a value of \code{1000} would result in a formatted
value of \code{"1,000"}. This argument is ignored if a \code{locale} is supplied
(i.e., is not \code{NULL}).}

\item{force_sign}{\emph{Forcing the display of a positive sign}

\verb{scalar<logical>} // \emph{default:} \code{FALSE}

Should the positive sign be shown for positive values (effectively showing
a sign for all values except zero)? If so, use \code{TRUE} for this option. By
default only negative values will display a minus sign.}

\item{system}{\emph{Numbering system for grouping separators}

\verb{singl-kw:[intl|ind]} // \emph{default:} \code{"intl"}

The international numbering system (keyword: \code{"intl"}) is widely used and
its grouping separators (i.e., \code{sep_mark}) are always separated by three
digits. The alternative system, the Indian numbering system (keyword:
\code{"ind"}), uses grouping separators that correspond to thousand, lakh,
crore, and higher quantities.}

\item{locale}{\emph{Locale identifier}

\verb{scalar<character>} // \emph{default:} \code{NULL} (\code{optional})

An optional locale identifier that can be used for formatting values
according to the locale's rules. Examples include \code{"en"} for English (United
States) and \code{"fr"} for French (France). We can call \code{\link[=info_locales]{info_locales()}} for a
useful reference for all of the locales that are supported. A locale ID can
be also set in the initial \code{\link[=gt]{gt()}} function call (where it would be used
automatically by any function with a \code{locale} argument) but a \code{locale}
value provided here will override that global locale.}
}
\value{
An object of class \code{gt_tbl}.
}
\description{
Format input values to time duration values whether those input values are
numbers or of the \code{difftime} class. We can specify which time units any
numeric input values have (as weeks, days, hours, minutes, or seconds) and
the output can be customized with a duration style (corresponding to narrow,
wide, colon-separated, and ISO forms) and a choice of output units ranging
from weeks to seconds.
}
\section{Output units for the colon-separated duration style}{


The colon-separated duration style (enabled when
\code{duration_style = "colon-sep"}) is essentially a clock-based output format
which uses the display logic of chronograph watch functionality. It will, by
default, display duration values in the \verb{(D/)HH:MM:SS} format. Any duration
values greater than or equal to 24 hours will have the number of days
prepended with an adjoining slash mark. While this output format is
versatile, it can be changed somewhat with the \code{output_units} option. The
following combinations of output units are permitted:
\itemize{
\item \code{c("minutes", "seconds")} -> \code{MM:SS}
\item \code{c("hours", "minutes")} -> \code{HH:MM}
\item \code{c("hours", "minutes", "seconds")} -> \code{HH:MM:SS}
\item \code{c("days", "hours", "minutes")} -> \verb{(D/)HH:MM}
}

Any other specialized combinations will result in the default set being used,
which is \code{c("days", "hours", "minutes", "seconds")}
}

\section{Compatibility of formatting function with data values}{


\code{fmt_duration()} is compatible with body cells that are of the \code{"numeric"},
\code{"integer"}, or \code{"difftime"} types. Any other types of body cells are ignored
during formatting. This is to say that cells of incompatible data types may
be targeted, but there will be no attempt to format them.
}

\section{Examples}{


Use part of the \code{sp500} table to create a \strong{gt} table. Create a
\code{difftime}-based column and format the duration values to be displayed as the
number of days since March 30, 2020.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{sp500 |>
  dplyr::slice_head(n = 10) |>
  dplyr::mutate(
    time_point = lubridate::ymd("2020-03-30"),
    time_passed = difftime(time_point, date)
  ) |>
  dplyr::select(time_passed, open, close) |>
  gt(rowname_col = "month") |>
  fmt_duration(
    columns = time_passed,
    output_units = "days",
    duration_style = "wide"
  ) |>
  fmt_currency(columns = c(open, close))
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_fmt_duration_1.png" alt="This image of a table was generated from the first code example in the `fmt_duration()` help file." style="width:100\%;">
}}
}

\section{Function ID}{

3-16
}

\section{Function Introduced}{

\code{v0.7.0} (Aug 25, 2022)
}

\seealso{
The vector-formatting version of this function:
\code{\link[=vec_fmt_duration]{vec_fmt_duration()}}.

Other data formatting functions: 
\code{\link{data_color}()},
\code{\link{fmt}()},
\code{\link{fmt_auto}()},
\code{\link{fmt_bins}()},
\code{\link{fmt_bytes}()},
\code{\link{fmt_chem}()},
\code{\link{fmt_country}()},
\code{\link{fmt_currency}()},
\code{\link{fmt_date}()},
\code{\link{fmt_datetime}()},
\code{\link{fmt_email}()},
\code{\link{fmt_engineering}()},
\code{\link{fmt_flag}()},
\code{\link{fmt_fraction}()},
\code{\link{fmt_icon}()},
\code{\link{fmt_image}()},
\code{\link{fmt_index}()},
\code{\link{fmt_integer}()},
\code{\link{fmt_markdown}()},
\code{\link{fmt_number}()},
\code{\link{fmt_partsper}()},
\code{\link{fmt_passthrough}()},
\code{\link{fmt_percent}()},
\code{\link{fmt_roman}()},
\code{\link{fmt_scientific}()},
\code{\link{fmt_spelled_num}()},
\code{\link{fmt_tf}()},
\code{\link{fmt_time}()},
\code{\link{fmt_units}()},
\code{\link{fmt_url}()},
\code{\link{sub_large_vals}()},
\code{\link{sub_missing}()},
\code{\link{sub_small_vals}()},
\code{\link{sub_values}()},
\code{\link{sub_zero}()}
}
\concept{data formatting functions}
