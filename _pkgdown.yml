url: https://gt.rstudio.com

home:
  strip_header: true

reference:
  - title: Create Table
    desc: >
      All **gt** tables begin with a call to `gt()`, where we would supply the
      input data table (data frame or tibble) and some basic options for
      creating a stub (`rowname_col`) and row groups (`groupname_col`). We
      can also introduce a grouped tibble (via **dplyr**'s `group_by()`) for
      more precise divisions of rows into row groups. The `gt_preview()`
      function is great for getting a nicely-formatted preview of a data
      table (defaulting to the first 5 rows and the last row).
    contents:
    - gt
    - gt_preview

  - title: Create or Modify Parts
    desc: >
      A **gt** table can contain a few useful parts for conveying additional
      information. These include a header (with a titles and subtitle), a
      footer (with footnotes and source notes), and additional areas for
      labels (row group labels, column spanner labels, the stubhead label).
      We can modify the look of table parts more generally with
      `tab_options()` and perform styling on targeted table locations with
      `tab_style()`.
    contents:
    - tab_header
    - tab_spanner
    - tab_spanner_delim
    - tab_row_group
    - tab_stubhead
    - tab_footnote
    - tab_source_note
    - tab_style
    - tab_options

  - title: Format Data
    desc: >
      Columns of data can be formatted with the `fmt_*()` functions. We can
      specify the rows of these columns quite precisely with the `rows`
      argument. We get to apply these functions exactly once to each data
      cell (last call wins). Need to do custom formatting? Use the `fmt()`
      function and define your own formatter within (or, create a wrapper
      with `fmt()` if you prefer). The `text_transform()` function allows
      for post-processing of any data, and we provide a function for that
      transformation.
    contents:
    - fmt_number
    - fmt_scientific
    - fmt_percent
    - fmt_currency
    - fmt_date
    - fmt_time
    - fmt_datetime
    - fmt_markdown
    - fmt_passthrough
    - fmt_missing
    - fmt
    - text_transform
    - data_color

  - title: Modify Columns
    desc: >
      The `cols_*()` functions allow for modifications that act on entire
      columns. This includes alignment of the data in columns
      (`cols_align()`), hiding columns from view (`cols_hide()`),
      re-labeling the column labels (`cols_label()`), merging two columns
      together (`cols_merge*()`), moving columns around (`cols_move*()`)
    contents:
    - cols_align
    - cols_width
    - cols_label
    - cols_move_to_start
    - cols_move_to_end
    - cols_move
    - cols_hide
    - cols_merge_range
    - cols_merge_uncert
    - cols_merge

  - title: Modify Rows
    desc: >
      The only function currently that modifies entire rows is the
      `row_group_order()` function. It lets us modify the ordering of any
      row groups in the table.
    contents:
    - row_group_order

  - title: Add Rows
    desc: >
      There are two functions that will add rows to a **gt** table:
      `summary_rows()` and `grand_summary_rows()`. These functions will both add
      summary rows but one will do it in a groupwise fashion while the other
      will create grand summary rows.
    contents:
    - summary_rows
    - grand_summary_rows

  - title: Helper Functions
    desc: >
      A small assortment of helper functions is available in the **gt**
      package. The various `cells_*()` functions are used for targeting
      cells with the `locations` argument in the `tab_footnote()`,
      `tab_style()`, and `text_transform()` functions. The `cells_styles()`
      function is used exclusively with `tab_style()`'s `style` argument
      (and the `px()` & `pct()` functions may be useful there for specifying
      units in pixels or percentages). The `md()` and `html()` helpers can
      used be during label creation with the `tab_header()`,
      `tab_footnote()`, `tab_spanner()`, `tab_stubhead_label()`, and
      `tab_source_note()` functions.
    contents:
    - md
    - html
    - px
    - pct
    - cells_title
    - cells_stubhead
    - cells_column_spanners
    - cells_column_labels
    - cells_row_groups
    - cells_stub
    - cells_body
    - cells_summary
    - cells_grand_summary
    - currency
    - cell_text
    - cell_fill
    - cell_borders
    - adjust_luminance
    - random_id
    - escape_latex
    - gt_latex_dependencies

  - title: Image Addition Functions
    desc: >
      We can add images into a **gt** table with the help of the `*_image()`
      functions. Two common ways to do this: (1) use `text_transform()` to
      insert images into data cells, (2) use any function that creates
      new labels (e.g., `tab_header()`) and use a `*_image()` function
      within the `html()` helper.
    contents:
    - web_image
    - local_image
    - ggplot_image
    - test_image

  - title: Table Option Functions
    desc: >
      With the `opt_*()` functions, we have an easy way to set commonly-used
      table options without having to use `tab_options()` directly. For
      instance, we can modify the set of marks to use with footnotes, turn on
      row striping, change the alignment of the table header, and much more.
    contents:
    - opt_footnote_marks
    - opt_row_striping
    - opt_align_table_header
    - opt_all_caps
    - opt_table_lines
    - opt_table_outline

  - title: Information Functions
    desc: >
      These `info_*()` functions present us with **gt** tables containing
      useful information. So far, we can get reference information on
      date styles (`info_date_style()`), on time styles
      (`info_time_style()`), on a huge number of color palettes
      (`info_paletteer()`), on currencies (`info_currencies()`), and, on
      all of the different locales supported in the formatter functions
      (`info_locales()`).
    contents:
    - info_date_style
    - info_time_style
    - info_currencies
    - info_locales
    - info_paletteer

  - title: Datasets
    desc: >
      The **gt** package is equipped with six datasets that come in all shapes
      and sizes. Use them to experiment with the package. Many examples in the
      internal help documents use these datasets to quickly demonstrate the key
      features of **gt**.
    contents:
    - countrypops
    - sza
    - gtcars
    - sp500
    - pizzaplace
    - exibble

  - title: Shiny Functions
    desc: >
      Shiny is great for building interactive web apps with R. There's
      really nothing quite like it. The **gt** package includes two
      functions that work nicely with Shiny: a table render function
      `render_gt()` (for the `server`) and a table output element
      `gt_output()` (for the `ui`).
    contents:
    - render_gt
    - gt_output

  - title: Export Functions
    desc: >
      There may come a day when you need to export a **gt** table to some
      specific format. A great function for that is `gtsave()`, which allows
      us to save as an HTML file or an image file. Some other functions give us
      table code as a character vector (e.g., `as_raw_html()`). Did you use the
      `summary_rows()` function and wish you had that summary data in a tibble?
      You can get it out with `extract_summary()`.
    contents:
    - gtsave
    - as_raw_html
    - as_latex
    - as_rtf
    - extract_summary

navbar:
  type: default
  left:
  - text: Intro
    href: articles/intro-creating-gt-tables.html
  - text: Reference
    href: reference/index.html
  - text: Articles
    menu:
    - text: How to Use
    - text: gt Datasets
      href: articles/gt-datasets.html
    - text: Summary Lines
      href: articles/creating-summary-lines.html
    - text: Case Studies
    - text: 'Case Study: gtcars'
      href: articles/case-study-gtcars.html
  - text: News
    href: news/index.html
  right:
  - icon: fa-github fa-lg
    href: https://github.com/rstudio/gt

development:
  mode: auto
